«IMPORT Automata»
«IMPORT edu::teco::automata::generator::templates»
«EXTENSION edu::teco::automata::generator::templates::util»
«EXTENSION edu::teco::automata::generator::templates::config»
«EXTENSION edu::teco::automata::generator::templates::AcceptorUtil»

«AROUND edu::teco::automata::generator::templates::c::bin2SAX::generateSaxBeginEvent FOR SimpleState»
	out->type=«getNSPrefix()»_«name»_begin;
	return ret;
«ENDAROUND»

«AROUND edu::teco::automata::generator::templates::c::bin2SAX::generateSaxEndEvent FOR State»
	out->type=«getNSPrefix()»_«getParentName()»_end;
	return ret;
«ENDAROUND»

«AROUND edu::teco::automata::generator::templates::c::bin2SAX::generateSaxValueEvent FOR SimpleState»
	«LET getTypeMap(type.metaType.name).toLowerCase() AS tName»
	 out->type=«getNSPrefix()»_«name»_«tName»_value;
	«ENDLET»
     return ret;
«ENDAROUND»

«AROUND edu::teco::automata::generator::templates::c::bin2SAX::generateSaxAttributeEvent FOR SimpleState»
    «LET getTypeMap(type.metaType.name).toLowerCase() AS tName»
     out->type=«getNSPrefix()»_«name»_«tName»_attribute;
    «ENDLET» 
     return ret;
«ENDAROUND»


«AROUND edu::teco::automata::generator::templates::c::bin2SAX::readFunction FOR SimpleState»


«LET getTypeMap(type.metaType.name).toLowerCase() AS tName»
ret = read_«getTypeMap(type.metaType.name).toLowerCase()»(&(out->value.«name»_«tName»)
«IF tName == "string"-»
   , «((Automata::TString)type).length»
«ELSEIF tName == "int" || tName == "short" || tName == "byte" -»
   «LET ((Automata::TInt)type) AS type-»
      «IF type.min != type.max-»
         , «bitsLen(type.min, type.max)-»
      «ELSE-»
         , 0
      «ENDIF-»
      «IF ( (type.min == 0)                                && 
           ((type.max == twoPow(8)-1  && tName == "byte")  || 
           (type.max == twoPow(16)-1  && tName == "short") || 
           (type.max == twoPow(32)-1  && tName == "int")))-»
        , 1
      «ELSE-»
        , 0
      «ENDIF-»
   «ENDLET-»       
«ELSEIF tName == "double"-»
   «LET ((Automata::TDouble)type) AS type-»
      «IF type.min != type.max-»
         , «bitsLen(type.min, type.max)-»
      «ELSE-»
         , 0
      «ENDIF-»
      «IF type.fractionDigits > 0-»
         , «type.fractionDigits», «fracBitsLen(type.fractionDigits)-»
      «ELSE-»
         , 0, 0
      «ENDIF-»
   «ENDLET-»
«ENDIF-»
, in);
 «ENDLET-»
«ENDAROUND»

«AROUND edu::teco::automata::generator::templates::c::bin2SAX::readFunctionCleanUp FOR SimpleState»
«ENDAROUND»

«AROUND edu::teco::automata::generator::templates::c::bin2SAX::readFunctionInit FOR StateMachine»
   int   ret       = 0;
«ENDAROUND»  

«AROUND edu::teco::automata::generator::templates::c::bin2SAX::header(String nameID) FOR StateMachine»
/* Generated file */
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <limits.h>
#include <errno.h>

#include <bitsio/bits_io.h>
#include <bitsio/read_func.h>
#include <bitsio/binxml.h>
#include "bin2sax.h"
«EXPAND bin2sax_h(nameID)»
#define reader in
int «IF (""!=nameID)-»_«nameID-»«ENDIF-»bin2sax_parse(binxml *in, «nameID»_event *out)
{
#define label (in->label)
«ENDAROUND»

«AROUND edu::teco::automata::generator::templates::c::bin2SAX::footer(String nameID) FOR StateMachine»
return 0;
#undef label
}

«ENDAROUND»

«DEFINE bin2sax_h(String nameID) FOR StateMachine»
«FILE nameID+"/bin2sax.h"»
#ifndef byte
#define byte unsigned char
#endif
typedef struct «nameID»_event
{
	enum {
	«set_reset()»
	«FOREACH states AS s»
	«EXPAND event_types FOR s»
	«ENDFOREACH»
	} type;
	union «nameID»_event_values
	{
	«set_reset()»
	«FOREACH states AS s»
	«EXPAND value_type FOR s»
	«ENDFOREACH»
	} value;
} «nameID»_event;
«ENDFILE»
«ENDDEFINE»

«DEFINE value_type FOR SimpleState»
«LET getTypeMap(type.metaType.name).toLowerCase() AS tName»
«IF !set_has(name+tName) && type.metaType!=complexType»
	«tName» «name»_«tName»;
	«set_add(name+tName)»
«ENDIF»

«ENDLET»
«ENDDEFINE»

«DEFINE value_type FOR StartState»
«ENDDEFINE»
«DEFINE value_type FOR StopState»
«ENDDEFINE»
«DEFINE value_type FOR State»
«ENDDEFINE»

«DEFINE event_types FOR SimpleState»
«LET getTypeMap(type.metaType.name).toLowerCase() AS tName»
	«IF !set_has(name+tName)»
	«IF type.metaType==complexType»
	«getNSPrefix()»_«name»_begin,
	«getNSPrefix()»_«name»_end,
	«ELSE»
	 	«IF kind == "attribute"-»
		«getNSPrefix()»_«name»_«tName»_attribute,
		«ELSE»
		«getNSPrefix()»_«name»_«tName»_value,
		«ENDIF»
	«ENDIF»
	«set_add(name+tName)»
	«ENDIF»
«ENDLET»
«ENDDEFINE»
«DEFINE event_types FOR StartState»
«ENDDEFINE»
«DEFINE event_types FOR StopState»
«ENDDEFINE»
«DEFINE event_types FOR State»
#error should not be executed
«ENDDEFINE»