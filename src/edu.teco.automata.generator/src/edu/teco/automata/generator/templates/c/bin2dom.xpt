«IMPORT Automata»

«IMPORT edu::teco::automata::generator::templates»
«EXTENSION edu::teco::automata::generator::templates::util»
«EXTENSION edu::teco::automata::generator::templates::c::util»



«EXTENSION edu::teco::automata::generator::templates::config»
«EXTENSION edu::teco::automata::generator::templates::AcceptorUtil»

«DEFINE  root(String nameID) FOR Automata::StateMachine»
   «stack_clear()»
   «resetCase()»
   «FOREACH states AS st»
      «EXPAND encoderRoot::initNeeded FOR st»
   «ENDFOREACH»
   «stack_clear()»
   
   «FILE this.states.typeSelect(StartState).first().out.name+"_bin2dom.c"»
   
   «EXPAND header(nameID)»
   

   
   while (1)
   {
   switch (label)
   {

   «FOREACH states AS st ITERATOR i-»
      «EXPAND encoderRoot::state(i.counter0) FOR st-»
   «ENDFOREACH-»
   }
   }
   «EXPAND footer(nameID)»
   «ENDFILE»
«ENDDEFINE»

«DEFINE header(String nameID) FOR StateMachine»

«FILE this.states.typeSelect(StartState).first().out.name+"_bin2dom.h"»
 #ifndef «("___"+this.states.typeSelect(StartState).first().out.name+"_bin2dom_h").toUpperCase()»
 #define «("___"+this.states.typeSelect(StartState).first().out.name+"_bin2dom_h").toUpperCase()» 1
 #include <bitsio/read_bits.h>
 #include "«getNSPrefix()»_types.h"
 typedef «this.states.typeSelect(StartState).out.typeSelect(SimpleState).first().ecore.name.p()» «this.states.typeSelect(StartState).first().out.name»_t;
  
 int «this.states.typeSelect(StartState).first().out.name»_bin2dom_run(struct READER_STRUCT *reader, «this.states.typeSelect(StartState).out.typeSelect(SimpleState).first().ecore.name.p()» *dom);
 #endif
«ENDFILE»

#include "«this.states.typeSelect(StartState).first().out.name»_bin2dom.h"
#include <ptr_stack.h>
#include <string.h>
#include <bitsio/read_bits_buf.h>


int «this.states.typeSelect(StartState).first().out.name»_bin2dom_run(struct READER_STRUCT *reader, «this.states.typeSelect(StartState).out.typeSelect(SimpleState).first().ecore.name.p()» *dom) 
{
	int label=0;
	new_ptr_stack(stack,dom);
	
	memset(dom,0,sizeof(*dom));
«ENDDEFINE»

«DEFINE footer(String nameID) FOR StateMachine»
return 1;
}
«ENDDEFINE»

«AROUND edu::teco::automata::generator::templates::encoderRoot::constLoopBegin(Integer count) 
 FOR SimpleState»
   /* constLoop «stack_getCurrPath() + name» */
   {
   static int lowB«count»;
   for (lowB«count»=0;lowB«count»>0;lowB«count»--)
    «targetDef.proceed()»
«ENDAROUND»

«AROUND edu::teco::automata::generator::templates::encoderRoot::constLoopEnd(String endName) 
FOR SimpleState»
   } /* «endName» */
«ENDAROUND»

«AROUND edu::teco::automata::generator::templates::encoderRoot::loopBegin(Integer count) FOR SimpleState»
   /* loop «stack_getCurrPath() + name» label=label */
   while(read_bit(reader))
     «targetDef.proceed()»  
«ENDAROUND»

«REM»

«AROUND edu::teco::automata::generator::templates::encoderRoot::loopEnd(String endName) 
FOR SimpleState»
   } /* «endName» */
«ENDAROUND»
«ENDREM»



«AROUND edu::teco::automata::generator::templates::encoderRoot::complexLoopBegin(Integer count, Integer next) FOR SimpleState»
   if(read_bit(reader))
   { /* depth «depth»*/
   «targetDef.proceed()»
   }
   else
   {
      label = «next» ;
      continue;
   } /* «name» */
«ENDAROUND»

«AROUND edu::teco::automata::generator::templates::encoderRoot::complexConstLoopBegin(Integer count, Integer next) FOR SimpleState» 
   if(read_bit(reader)) «REM» TODO: Same as complexLoop Can be optimized by counting occurences«ENDREM»
   { /* depth «depth»*/
   
    
    «targetDef.proceed()»
   }
   else
   {
      label = «next»;
      continue;
   } /* «name» */
«ENDAROUND»

«AROUND edu::teco::automata::generator::templates::encoderRoot::stateNameBegin 
FOR SimpleState»
     «IF upperBound!=lowerBound»
      	«IF !stack_isEmpty()»
      	{
      	«stack_top().ecore.name.p()» * cur;
      	«ecore.name.p()» * next;
      	
      	cur= («stack_top().ecore.name.p()» *)top();
      	next=«stack_top().ecore.name.p()»_add_«name.toFirstLower()»(cur);
      	push(next);
      	}
        «ELSE»
        «ERROR "optional root??"»
        «ENDIF»
     «ELSE»
     «IF !stack_isEmpty()»
     {
        «stack_top().ecore.name.p()» * cur;
        cur=(«stack_top().ecore.name.p()» *)top();  
      	push(&(cur->«name.toFirstLower()»));
     }
     «ELSE»
     //push(pop()): preinitialized stack
     «ENDIF»
     «ENDIF»
«ENDAROUND»

«AROUND edu::teco::automata::generator::templates::encoderRoot::stateNameEnd 
FOR SimpleState»
    	if(pop());
«ENDAROUND»

«AROUND edu::teco::automata::generator::templates::encoderRoot::StateEnd FOR StopState»
 return 0;
«ENDAROUND»


«REM»
=======================================SAXOut===========================================
«ENDREM»
«AROUND edu::teco::automata::generator::templates::encoderRoot::stateType 
FOR SimpleState»
{
   «ecore.name.p()»* cur;
   cur =(«ecore.name.p()»*) top();
   «EXPAND edu::teco::automata::generator::templates::c::binEncoder::read("cur") FOR type» 
}
«ENDAROUND»



