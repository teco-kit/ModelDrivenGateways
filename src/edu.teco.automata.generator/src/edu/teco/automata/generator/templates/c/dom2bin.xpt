«IMPORT Automata»
«IMPORT edu::teco::automata::generator::templates»
«EXTENSION edu::teco::automata::generator::templates::util»
«EXTENSION edu::teco::automata::generator::templates::c::util»


«EXTENSION edu::teco::automata::generator::templates::config»
«EXTENSION edu::teco::automata::generator::templates::AcceptorUtil»

«DEFINE root(String nameID) FOR Automata::StateMachine»
   «initQueries()»
    «stack_clear()»
   «resetCase()»
   «FOREACH states AS st»
      «EXPAND encoderRoot::initNeeded FOR st»
   «ENDFOREACH»
   «stack_clear()»
   
   «FILE this.states.typeSelect(StartState).first().out.name+"_dom2bin.c"»
   «EXPAND header(nameID)»
   for (;;)
   {
   switch (label)
   {

   «FOREACH states AS st ITERATOR i-»
      «EXPAND encoderRoot::state(i.counter0) FOR st-»
   «ENDFOREACH-»
   
   }
   }
   «EXPAND footer(nameID)»
   «ENDFILE»
«ENDDEFINE»

«DEFINE header(String nameID) FOR StateMachine»

«FILE this.states.typeSelect(StartState).first().out.name+"_dom2bin.h"»
 #ifndef «("___"+this.states.typeSelect(StartState).first().out.name+"_bin2dom_h").toUpperCase()»
 #define «("___"+this.states.typeSelect(StartState).first().out.name+"_bin2dom_h").toUpperCase()» 1
 #include <bitsio/write_bits.h>
 #include <string.h>
 #include <bitsio/write_bits_buf.h>
 #include "«getNSPrefix()»_types.h"
  
int «this.states.typeSelect(StartState).first().out.name»_dom2bin_run(«this.states.typeSelect(StartState).out.typeSelect(SimpleState).first().ecore.name.p()» *dom, struct WRITER_STRUCT *writer );
 #endif
«ENDFILE»

#include "«this.states.typeSelect(StartState).first().out.name»_dom2bin.h"


static int dom_automata(struct WRITER_STRUCT *writer,void **stack, int *_label);
int «this.states.typeSelect(StartState).first().out.name»_dom2bin_run(«this.states.typeSelect(StartState).out.typeSelect(SimpleState).first().ecore.name.p()» *dom, struct WRITER_STRUCT *writer ) 
{
	int ret;
	int label=0;
	void * stack[20]={dom};
	while((ret=dom_automata(writer,stack,&label))>0);
	
    return ret;	
}
   
static void *stack_pop(void ***stack) {
	return *(*stack--);
}
#define pop() stack_pop(&stack)

static void *stack_push(void ***stack, void * X) {
	return *(++*stack) = X;
}
#define push(X) stack_push(&stack,X)

#define top() *stack

// return:  0 if EOF, 0<for fault, and  read bits else (TODO)
static int dom_automata(struct WRITER_STRUCT *writer,void **stack, int *_label)
{
#define label (*_label)
void *last=NULL;
«ENDDEFINE»

«DEFINE footer(String nameID) FOR StateMachine»
return 1;
}
«ENDDEFINE»

«AROUND edu::teco::automata::generator::templates::encoderRoot::constLoopBegin(Integer count) 
 FOR SimpleState»
 «IF lowerBound!=upperBound»
 «ERROR name+" not constant"» 
 «ENDIF»
 «ERROR "not implemented"»
   /* constLoop «stack_getCurrPath() + name» */
   static int lowB«count»;
   for (lowB«count»=«lowerBound»;lowB«count»>0 && (soap_element_begin_in(soap,"«getNSPrefix()»:«name»")==SOAP_OK) ;lowB«count»--)
    «targetDef.proceed()»
    next=«stack_top().ecore.name.p()»_next_«name.toFirstLower()»((«stack_top().ecore.name.p()» *)top(),last)
     write_true(writer); //XXX: not necessary, right now symetric to bin2sax...
«ENDAROUND»

«AROUND edu::teco::automata::generator::templates::encoderRoot::constLoopEnd(String endName) FOR SimpleState»
«targetDef.proceed()»
	write_false(writer); //XXX: not necessary, right now symetric to bin2sax...
«ENDAROUND»


«AROUND edu::teco::automata::generator::templates::encoderRoot::loopBegin(Integer count) 
FOR SimpleState»
   /* loop «stack_getCurrPathSlash() + name» */
   «ecore.name.p()» *cur;
   while(NULL!=(cur=«stack_top().ecore.name.p()»_next_«name.toFirstLower()»((«stack_top().ecore.name.p()» *)top(),(«ecore.name.p()» *)last)))
   «targetDef.proceed()»
   write_true(writer);
   last=cur;
«ENDAROUND»

«AROUND edu::teco::automata::generator::templates::encoderRoot::loopEnd(String endName) FOR SimpleState»
«targetDef.proceed()» 
    last=NULL;
	write_false(writer); //XXX: not necessary, right now symetric to bin2sax...
«ENDAROUND»

«AROUND edu::teco::automata::generator::templates::encoderRoot::complexLoopBegin(Integer count, Integer next) FOR SimpleState»
   «ecore.name.p()» *next;
   if(NULL!=(next=«stack_top().ecore.name.p()»_next_«name.toFirstLower()»((«stack_top().ecore.name.p()» *)top(),(«ecore.name.p()» *) last)))
   { /* depth «depth»*/
   	«targetDef.proceed()»
   	write_true(writer);
   }
   else
   {
      label = «next» ; //TODO: xx
      write_false(writer);
      last=NULL;
      continue;
   } /* «name» */
«ENDAROUND»

«AROUND edu::teco::automata::generator::templates::encoderRoot::complexLoopEnd2(String endName) FOR SimpleState» 
    last=pop();
   «targetDef.proceed()»
«ENDAROUND»

«AROUND edu::teco::automata::generator::templates::encoderRoot::complexConstLoopBegin(Integer count, Integer next) FOR SimpleState»
   «ecore.name.p()» *next;
   if(NULL!=(next=«stack_top().ecore.name.p()»_next_«name.toFirstLower()»((«stack_top().ecore.name.p()» *)top(),(«ecore.name.p()» *)last)))
   { /* depth «depth»*/
   	«targetDef.proceed()»
   	write_true(_writer); //XXX: not necessary, right now symetric to bin2sax...
   }
   else
   {
      label = «next»;
      write_false(_writer);
      last=NULL;
      continue;
   } /* «name» */
«ENDAROUND»

«AROUND edu::teco::automata::generator::templates::encoderRoot::complexConstLoopEnd2(String endName) FOR SimpleState» 
    last=pop();
   «targetDef.proceed()»
«ENDAROUND»

«AROUND edu::teco::automata::generator::templates::encoderRoot::complexBegin FOR SimpleState» 
   «IF !stack_isEmpty()»
   push(&((«stack_top().ecore.name.p()» *) top())->«name.toFirstLower()»);
   «ELSE»
    //assert preinitialized stack 
   «ENDIF»
   «targetDef.proceed()»
«ENDAROUND»

«AROUND edu::teco::automata::generator::templates::encoderRoot::complexEnd FOR SimpleState» 
    pop();
   «targetDef.proceed()»
«ENDAROUND»

«AROUND edu::teco::automata::generator::templates::encoderRoot::simpleBegin(Integer label) FOR SimpleState» 
   push(&((«stack_top().ecore.name.p()» *) top())->«name.toFirstLower()»);
   
   «targetDef.proceed()»
«ENDAROUND»

«AROUND edu::teco::automata::generator::templates::encoderRoot::simpleEnd FOR SimpleState» 
   pop();
  «targetDef.proceed()»
«ENDAROUND»

«AROUND edu::teco::automata::generator::templates::encoderRoot::stateNameBegin 
FOR SimpleState»
«ENDAROUND»

«AROUND edu::teco::automata::generator::templates::encoderRoot::stateNameEnd 
FOR SimpleState»
   «targetDef.proceed()»
«ENDAROUND»


«REM»
=======================================BinOut===========================================
«ENDREM»


«AROUND edu::teco::automata::generator::templates::encoderRoot::stateType 
FOR SimpleState»
  {
    ssize_t ret=0;
  	«EXPAND edu::teco::automata::generator::templates::c::binEncoder::write("(*("+ecore.name.p()+"*)top())") FOR type»
  }
«ENDAROUND»

«AROUND edu::teco::automata::generator::templates::encoderRoot::StateEnd FOR StopState»
 return 0;
«ENDAROUND»


«DEFINE break FOR SimpleState»
«IF name==null»
«ERROR "null"»
«ENDIF»
«ENDDEFINE»




«REM»
«AROUND * FOR SimpleState»/*<«targetDef.name» for=«name»>*/«targetDef.proceed()-»/*</«targetDef.name»>*/«ENDAROUND»
«AROUND * FOR StartState»/*<«targetDef.name» for=«name»>*/«targetDef.proceed()-»/*</«targetDef.name»>*/«ENDAROUND»
«AROUND * FOR StopState»/*<«targetDef.name» for=«name»>*/«targetDef.proceed()-»/*</«targetDef.name»>*/«ENDAROUND»
«AROUND * FOR State»/*<«targetDef.name» for=«name»>*/«targetDef.proceed()-»/*</«targetDef.name»>*/«ENDAROUND»
«ENDREM»
