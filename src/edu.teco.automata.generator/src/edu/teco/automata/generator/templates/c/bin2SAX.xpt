«IMPORT Automata»
«IMPORT edu::teco::automata::generator::templates»
«EXTENSION edu::teco::automata::generator::templates::util»
«EXTENSION edu::teco::automata::generator::templates::c::util»


«EXTENSION edu::teco::automata::generator::templates::config»
«EXTENSION edu::teco::automata::generator::templates::AcceptorUtil»

«DEFINE root(String nameID) FOR Automata::StateMachine»
   «initQueries()»
   «stack_clear()»
   «resetCase()»
   «FOREACH states AS st»
      «EXPAND encoderRoot::initNeeded FOR st»
   «ENDFOREACH»
   «stack_clear()»
   «resetCase()»
   
   «FILE this.states.typeSelect(StartState).first().out.name+"_bin2sax.c"»
   «EXPAND header(nameID)»
   «EXPAND readFunctionInit» 
   while (1)
   {
   switch (label)
   {

   «FOREACH states AS st ITERATOR i-»
      «EXPAND encoderRoot::state(i.counter0) FOR st-»
   «ENDFOREACH-»
   }
   }
   «EXPAND footer(nameID)»
   «ENDFILE»
«ENDDEFINE»

«DEFINE header(String nameID) FOR StateMachine»
/* Generated file */
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <limits.h>
#include <errno.h>
#include <stdsoap2.h>


#include <bitsio/read_bits.h>
#include <enc/read_str_func.h>

static struct soap *soap   = NULL;
static        int   label  = 0;
static void        *reader = NULL;

#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string 0
#endif

void «this.states.typeSelect(StartState).first().out.name»_bin2sax_init(struct soap *_soap, void * _reader)
{
   soap   = _soap;
   reader = _reader;
   label  = 0;
   «REM»
   TODO: return lock state or make reentrant (watch static lowB{count})
   
   to make reentrant move soap argument to run and attach label and lowB[{count}] to reader (needs header for maxdepth/count)
   «ENDREM»
}

static int gsoap_automata();

int «this.states.typeSelect(StartState).first().out.name»_bin2sax_run() 
{
	int ret;
	while((ret=gsoap_automata())>0);
	
    return ret;	
}
// return:  0 if EOF, 0<for fault, and  read bits else (TODO)
static int gsoap_automata()
{
«ENDDEFINE»

«DEFINE footer(String nameID) FOR StateMachine»
return 1;
}
«ENDDEFINE»

«AROUND edu::teco::automata::generator::templates::encoderRoot::constLoopBegin(Integer count) 
 FOR SimpleState»
   /* constLoop «stack_getCurrPath() + name» */
   {
   static int lowB«count»;
   for (lowB«count»=0;lowB«count»>0;lowB«count»--)
    «targetDef.proceed()»
«ENDAROUND»

«AROUND edu::teco::automata::generator::templates::encoderRoot::constLoopEnd(String endName) 
FOR SimpleState»
   } /* «endName» */
«ENDAROUND»

«AROUND edu::teco::automata::generator::templates::encoderRoot::loopBegin(Integer count) FOR SimpleState»
   /* loop «stack_getCurrPath() + name» label=label */
   while(read_bit(reader))
     «targetDef.proceed()»  
«ENDAROUND»

«REM»

«AROUND edu::teco::automata::generator::templates::encoderRoot::loopEnd(String endName) 
FOR SimpleState»
   } /* «endName» */
«ENDAROUND»
«ENDREM»



«AROUND edu::teco::automata::generator::templates::encoderRoot::complexLoopBegin(Integer count, Integer label) FOR SimpleState»
   if(read_bit(reader))
   { /* depth «depth»*/
   «targetDef.proceed()»
   }
   else
   {
      label = «getEndCase()» ;
      continue;
   } /* «name» */
«ENDAROUND»

«AROUND edu::teco::automata::generator::templates::encoderRoot::complexConstLoopBegin(Integer count, Integer label) FOR SimpleState» 
   if(read_bit(reader)) «REM» TODO: Same as complexLoop Can be optimized by counting occurences«ENDREM»
   { /* depth «depth»*/
   «targetDef.proceed()»
   }
   else
   {
      label = «getEndCase()»;
      continue;
   } /* «name» */
«ENDAROUND»



«AROUND edu::teco::automata::generator::templates::encoderRoot::stateNameBegin 
FOR SimpleState»
   «IF type.metaType.name == complexTypeName()-»
   «EXPAND generateSaxBeginEvent»
   «ENDIF-»
«ENDAROUND»

«AROUND edu::teco::automata::generator::templates::encoderRoot::stateNameEnd 
FOR SimpleState»
   «IF kind != "attribute"-»
   «EXPAND generateSaxEndEvent»
   «ELSE-»
   «ENDIF-»
«ENDAROUND»


«REM»
=======================================SAXOut===========================================
«ENDREM»
«AROUND edu::teco::automata::generator::templates::encoderRoot::stateType 
FOR SimpleState»
   «EXPAND readFunction»
  
   
   «IF kind == "attribute"-»
 	«EXPAND generateSaxAttributeEvent»
   «ELSE-»
   «EXPAND generateSaxValueEvent»
   «ENDIF-»
   «EXPAND readFunctionCleanUp» 
«ENDAROUND»

«AROUND edu::teco::automata::generator::templates::encoderRoot::StateEnd FOR StopState»
 return 0;
«ENDAROUND»

«DEFINE generateSaxBeginEvent FOR SimpleState»
	soap_element_begin_out(soap, "«getNSPrefix()»:«name»", 0, "");
«ENDDEFINE»


«DEFINE generateSaxEndEvent FOR SimpleState»
	soap_element_end_out(soap, "«getNSPrefix()»:«name»");
«ENDDEFINE»

«DEFINE generateSaxValueEvent FOR SimpleState»
   {
     char * «name»_str = soap_strdup(soap, str);
     soap_outstring(soap, "«getNSPrefix()»:«name»", -1, &«name»_str, "", SOAP_TYPE_string);
   }
«ENDDEFINE»

«DEFINE generateSaxAttributeEvent FOR SimpleState»
 	soap_attribute(soap,  "«getNSPrefix()»:«name»",str);
«ENDDEFINE»


«DEFINE readFunction FOR SimpleState»
«LET getTypeMap(type.metaType.name).toLowerCase() AS tName»
ret = str_read_«getTypeMap(type.metaType.name).toLowerCase()»(&str
«IF tName == "string"-»
   , «((Automata::TString)type).length»
«ELSEIF tName == "int" || tName == "short" || tName == "byte" -»
   «LET ((Automata::TInt)type) AS type-»
      «IF type.min != type.max-»
         , «bitsLen(type.min, type.max)-»
      «ELSE-»
         , 0
      «ENDIF-»
      «IF ( (type.min == 0)                                && 
           ((type.max == twoPow(8)-1  && tName == "byte")  || 
           (type.max == twoPow(16)-1  && tName == "short") || 
           (type.max == twoPow(32)-1  && tName == "int")))-»
        , 1
      «ELSE-»
        , 0
      «ENDIF-»
   «ENDLET-»       
«ELSEIF tName == "double"-»
   «LET ((Automata::TDouble)type) AS type-»
      «IF type.min != type.max-»
         , «bitsLen(type.min, type.max)-»
      «ELSE-»
         , 0
      «ENDIF-»
      «IF type.fractionDigits > 0-»
         , «type.fractionDigits», «fracBitsLen(type.fractionDigits)-»
      «ELSE-»
         , 0, 0
      «ENDIF-»
   «ENDLET-»
«ENDIF-»
, reader);
«ENDLET»


 if (ret < 0)
   {
      fprintf(stderr,"Error reading input data. Errno: %s\n",
              strerror(errno));
      return -1;
   }
«ENDDEFINE»

«DEFINE readFunctionCleanUp FOR SimpleState»
 free(str);
«ENDDEFINE»

«DEFINE readFunctionInit FOR StateMachine»
   int   ret       = 0;
   char *str       = NULL;
«ENDDEFINE»  