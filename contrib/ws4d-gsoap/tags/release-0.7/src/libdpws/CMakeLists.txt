# Copyright (C) 2007  University of Rostock
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301 USA.

SET(gen_DIR ${CMAKE_CURRENT_BINARY_DIR}/gen)

# If the directory for the generated sources does not
# already exists, create it.
IF(NOT EXISTS ${gen_DIR})
	FILE(MAKE_DIRECTORY ${gen_DIR})
ENDIF(NOT EXISTS ${gen_DIR})

INCLUDE_DIRECTORIES(AFTER ${GSOAP_INCLUDE_DIR} ${DPWS_INCLUDES} ${gen_DIR})

# the variable "dpws_GSOAP" contains all .gsoap files of this project
SET(gsoap_files
	${CMAKE_CURRENT_BINARY_DIR}/devprof_2006_02.gsoap
	${CMAKE_CURRENT_BINARY_DIR}/target.gsoap
	${CMAKE_CURRENT_BINARY_DIR}/hosting.gsoap)
SET_SOURCE_FILES_PROPERTIES( ${gsoap_files}
	PROPERTIES GENERATED TRUE)

IF(NOT WITH_WS_SECURITY)
	ADD_CUSTOM_COMMAND(OUTPUT ${gsoap_files}
				COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/devprof_2006_02.gsoap ${CMAKE_CURRENT_BINARY_DIR}/devprof_2006_02.gsoap
				COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/target.gsoap ${CMAKE_CURRENT_BINARY_DIR}/target.gsoap
				COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/hosting.gsoap ${CMAKE_CURRENT_BINARY_DIR}/hosting.gsoap)
ELSE(NOT WITH_WS_SECURITY)
	ADD_CUSTOM_COMMAND(OUTPUT ${gsoap_files}
				COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/devprof_2006_02.gsoap-wsse ${CMAKE_CURRENT_BINARY_DIR}/devprof_2006_02.gsoap
				COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/target.gsoap-wsse ${CMAKE_CURRENT_BINARY_DIR}/target.gsoap
				COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/hosting.gsoap-wsse ${CMAKE_CURRENT_BINARY_DIR}/hosting.gsoap)
ENDIF(NOT WITH_WS_SECURITY)

SET(generated_files1
		${gen_DIR}/targetServerLib.c
		${gen_DIR}/targetServer.c
		${gen_DIR}/targetClientLib.c
		${gen_DIR}/targetClient.c
		${gen_DIR}/targetC.c
		${gen_DIR}/targetH.h
		${gen_DIR}/targetStub.h
		${gen_DIR}/hostingServerLib.c
		${gen_DIR}/hostingServer.c
		${gen_DIR}/hostingClientLib.c
		${gen_DIR}/hostingClient.c
		${gen_DIR}/hostingC.c
		${gen_DIR}/hostingH.h
		${gen_DIR}/hostingStub.h
		${gen_DIR}/dpwsC.c
		${gen_DIR}/dpwsH.h
		${gen_DIR}/dpwsStub.h)

GSOAP_GENERATE_DATABINDING(${CMAKE_CURRENT_BINARY_DIR}/devprof_2006_02.gsoap dpws ${gen_DIR} ${CMAKE_CURRENT_SOURCE_DIR}/fixups/dpwsC.c.patch)
GSOAP_GENERATE(${CMAKE_CURRENT_BINARY_DIR}/target.gsoap target ${gen_DIR})
GSOAP_GENERATE(${CMAKE_CURRENT_BINARY_DIR}/hosting.gsoap hosting ${gen_DIR})

# the variable "dpws_generated_SRCS" contains all sources generated by soapcpp2
SET(generated_files2
	${gen_DIR}/targetPeerLib.c
	${gen_DIR}/hostingPeerLib.c
	${DPWS_GENERATED_INCLUDE_DIR}/dpwsH.h
	${DPWS_GENERATED_INCLUDE_DIR}/dpwsStub.h)
SET_SOURCE_FILES_PROPERTIES( ${generated_files2}
	PROPERTIES GENERATED TRUE)

ADD_CUSTOM_COMMAND(OUTPUT ${generated_files2}
	COMMAND ${CMAKE_COMMAND} -E copy ${gen_DIR}/dpwsH.h ${DPWS_GENERATED_INCLUDE_DIR}/dpwsH.h
	COMMAND ${CMAKE_COMMAND} -E copy ${gen_DIR}/dpwsStub.h ${DPWS_GENERATED_INCLUDE_DIR}/dpwsStub.h
	COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/targetPeerLib.c ${gen_DIR}/targetPeerLib.c
	COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/hostingPeerLib.c ${gen_DIR}/hostingPeerLib.c
	DEPENDS ${generated_files1})

ADD_CUSTOM_TARGET(gen_sources DEPENDS ${generated_files1} ${generated_files2})

ADD_DEPENDENCIES(gen_sources gen_headers)

# the variable "dpws_client_OBJS" contains all .o files of libdpwsC.a
SET(dpws_client_SRCS
	${gen_DIR}/targetPeerLib
	${gen_DIR}/hostingPeerLib
	${CMAKE_CURRENT_SOURCE_DIR}/helper_addressing
	${CMAKE_CURRENT_SOURCE_DIR}/helper_discoveryClient
	${CMAKE_CURRENT_SOURCE_DIR}/ws-discovery_custom
	${CMAKE_CURRENT_SOURCE_DIR}/helper_mexClient
	${CMAKE_CURRENT_SOURCE_DIR}/helper_eventingClient
	${CMAKE_CURRENT_SOURCE_DIR}/helper_soapmisc
	${CMAKE_CURRENT_SOURCE_DIR}/ws4d_misc
	${CMAKE_CURRENT_SOURCE_DIR}/ws4d_uri
	${CMAKE_CURRENT_SOURCE_DIR}/helper_dpwsClient
	${CMAKE_CURRENT_SOURCE_DIR}/dpws_custom
	${CMAKE_CURRENT_SOURCE_DIR}/ws4d_epr
	${CMAKE_CURRENT_SOURCE_DIR}/ws4d_target
	${CMAKE_CURRENT_SOURCE_DIR}/ws4d_service
	${CMAKE_CURRENT_SOURCE_DIR}/ws4d_servicecache
    ${CMAKE_CURRENT_SOURCE_DIR}/ws4d_targetcache
    ${CMAKE_CURRENT_SOURCE_DIR}/ws4d_discovery_ctx
    ${CMAKE_CURRENT_SOURCE_DIR}/ws4d_epr_kv
    ${CMAKE_CURRENT_SOURCE_DIR}/ws4d_subscription
    ${CMAKE_CURRENT_SOURCE_DIR}/ws4d_subsmanproxy)
ADD_SUFFIX(dpws_client_SRCS .c)

IF(MSVC)
	SET_SOURCE_FILES_PROPERTIES( ${dpws_client_SRCS}
	        COMPILE_FLAGS "-D_CRT_SECURE_NO_DEPRECATE")
ENDIF(MSVC)

# the variable "dpws_client_OBJS" contains all .o files of libdpwsC.a
SET(dpws_client_mt_SRCS
	${gen_DIR}/targetPeerLib
	${gen_DIR}/hostingPeerLib
	${CMAKE_CURRENT_SOURCE_DIR}/helper_addressing_mt
	${CMAKE_CURRENT_SOURCE_DIR}/helper_discoveryClient_mt
	${CMAKE_CURRENT_SOURCE_DIR}/ws-discovery_custom
	${CMAKE_CURRENT_SOURCE_DIR}/helper_mexClient_mt
	${CMAKE_CURRENT_SOURCE_DIR}/helper_eventingClient_mt
	${CMAKE_CURRENT_SOURCE_DIR}/helper_soapmisc_mt
	${CMAKE_CURRENT_SOURCE_DIR}/ws4d_misc_mt
	${CMAKE_CURRENT_SOURCE_DIR}/ws4d_uri_mt
	${CMAKE_CURRENT_SOURCE_DIR}/helper_dpwsClient_mt
	${CMAKE_CURRENT_SOURCE_DIR}/dpws_custom
	${CMAKE_CURRENT_SOURCE_DIR}/ws4d_epr_mt
	${CMAKE_CURRENT_SOURCE_DIR}/ws4d_target_mt
	${CMAKE_CURRENT_SOURCE_DIR}/ws4d_service_mt
    ${CMAKE_CURRENT_SOURCE_DIR}/ws4d_servicecache_mt
    ${CMAKE_CURRENT_SOURCE_DIR}/ws4d_targetcache_mt
    ${CMAKE_CURRENT_SOURCE_DIR}/ws4d_discovery_ctx_mt
    ${CMAKE_CURRENT_SOURCE_DIR}/ws4d_epr_kv_mt
    ${CMAKE_CURRENT_SOURCE_DIR}/ws4d_subscription_mt
    ${CMAKE_CURRENT_SOURCE_DIR}/ws4d_subsmanproxy_mt)
ADD_SUFFIX(dpws_client_mt_SRCS .c)

IF(MSVC)
	SET_SOURCE_FILES_PROPERTIES( ${dpws_client_mt_SRCS}
		COMPILE_FLAGS "-D_CRT_SECURE_NO_DEPRECATE")
ENDIF(MSVC)

# the variable "dpws_device_OBJS" contains all .o files of libdpwsC.a
SET(dpws_device_SRCS
	${gen_DIR}/targetPeerLib
	${gen_DIR}/hostingPeerLib
	${CMAKE_CURRENT_SOURCE_DIR}/helper_addressing
	${CMAKE_CURRENT_SOURCE_DIR}/helper_discoveryServer
	${CMAKE_CURRENT_SOURCE_DIR}/ws-discovery_custom
	${CMAKE_CURRENT_SOURCE_DIR}/helper_mexServer
	${CMAKE_CURRENT_SOURCE_DIR}/helper_eventingServer
	${CMAKE_CURRENT_SOURCE_DIR}/helper_soapmisc
	${CMAKE_CURRENT_SOURCE_DIR}/ws4d_misc
	${CMAKE_CURRENT_SOURCE_DIR}/ws4d_uri
	${CMAKE_CURRENT_SOURCE_DIR}/ws4d_epr
	${CMAKE_CURRENT_SOURCE_DIR}/ws4d_target
	${CMAKE_CURRENT_SOURCE_DIR}/ws4d_service
	${CMAKE_CURRENT_SOURCE_DIR}/ws4d_targetservice
	${CMAKE_CURRENT_SOURCE_DIR}/ws4d_hosting
	${CMAKE_CURRENT_SOURCE_DIR}/helper_dpwsDevice
	${CMAKE_CURRENT_SOURCE_DIR}/dpws_custom
	${CMAKE_CURRENT_SOURCE_DIR}/ws4d_epr_kv
	${CMAKE_CURRENT_SOURCE_DIR}/ws4d_subscription
	${CMAKE_CURRENT_SOURCE_DIR}/ws4d_subsmanager)
ADD_SUFFIX(dpws_device_SRCS .c)

IF(MSVC)
	SET_SOURCE_FILES_PROPERTIES( ${dpws_device_SRCS}
                COMPILE_FLAGS "-D_CRT_SECURE_NO_DEPRECATE")
ENDIF(MSVC)

# the variable "dpws_device_OBJS" contains all .o files of libdpwsC.a
SET(dpws_device_mt_SRCS
	${gen_DIR}/targetPeerLib
	${gen_DIR}/hostingPeerLib
	${CMAKE_CURRENT_SOURCE_DIR}/helper_addressing_mt
	${CMAKE_CURRENT_SOURCE_DIR}/helper_discoveryServer_mt
	${CMAKE_CURRENT_SOURCE_DIR}/ws-discovery_custom
	${CMAKE_CURRENT_SOURCE_DIR}/helper_mexServer_mt
	${CMAKE_CURRENT_SOURCE_DIR}/helper_eventingServer_mt
	${CMAKE_CURRENT_SOURCE_DIR}/helper_soapmisc_mt
	${CMAKE_CURRENT_SOURCE_DIR}/ws4d_misc_mt
	${CMAKE_CURRENT_SOURCE_DIR}/ws4d_uri_mt
	${CMAKE_CURRENT_SOURCE_DIR}/ws4d_epr_mt
	${CMAKE_CURRENT_SOURCE_DIR}/ws4d_target_mt
	${CMAKE_CURRENT_SOURCE_DIR}/ws4d_service_mt
	${CMAKE_CURRENT_SOURCE_DIR}/ws4d_targetservice_mt
	${CMAKE_CURRENT_SOURCE_DIR}/ws4d_hosting_mt
	${CMAKE_CURRENT_SOURCE_DIR}/helper_dpwsDevice_mt
	${CMAKE_CURRENT_SOURCE_DIR}/dpws_custom
	${CMAKE_CURRENT_SOURCE_DIR}/ws4d_epr_kv_mt
	${CMAKE_CURRENT_SOURCE_DIR}/ws4d_subscription_mt
	${CMAKE_CURRENT_SOURCE_DIR}/ws4d_subsmanager_mt)
ADD_SUFFIX(dpws_device_mt_SRCS .c)

IF(MSVC)
	SET_SOURCE_FILES_PROPERTIES( ${dpws_device_mt_SRCS}
		COMPILE_FLAGS "-D_CRT_SECURE_NO_DEPRECATE")
ENDIF(MSVC)

# the variable "dpws_device_OBJS" contains all .o files of libdpwsC.a
SET(dpws_peer_SRCS
	${gen_DIR}/targetPeerLib
	${gen_DIR}/hostingPeerLib
	${CMAKE_CURRENT_SOURCE_DIR}/helper_addressing
	${CMAKE_CURRENT_SOURCE_DIR}/helper_discoveryPeer
	${CMAKE_CURRENT_SOURCE_DIR}/ws-discovery_custom
	${CMAKE_CURRENT_SOURCE_DIR}/helper_mexPeer
	${CMAKE_CURRENT_SOURCE_DIR}/helper_eventingPeer
	${CMAKE_CURRENT_SOURCE_DIR}/helper_soapmisc
	${CMAKE_CURRENT_SOURCE_DIR}/ws4d_misc
	${CMAKE_CURRENT_SOURCE_DIR}/ws4d_uri
	${CMAKE_CURRENT_SOURCE_DIR}/ws4d_epr
	${CMAKE_CURRENT_SOURCE_DIR}/ws4d_service
	${CMAKE_CURRENT_SOURCE_DIR}/ws4d_target
	${CMAKE_CURRENT_SOURCE_DIR}/ws4d_targetservice
	${CMAKE_CURRENT_SOURCE_DIR}/ws4d_hosting
    ${CMAKE_CURRENT_SOURCE_DIR}/ws4d_servicecache
    ${CMAKE_CURRENT_SOURCE_DIR}/ws4d_targetcache
    ${CMAKE_CURRENT_SOURCE_DIR}/ws4d_discovery_ctx
	${CMAKE_CURRENT_SOURCE_DIR}/helper_dpwsPeer
	${CMAKE_CURRENT_SOURCE_DIR}/dpws_custom
	${CMAKE_CURRENT_SOURCE_DIR}/ws4d_epr_kv
	${CMAKE_CURRENT_SOURCE_DIR}/ws4d_subscription
	${CMAKE_CURRENT_SOURCE_DIR}/ws4d_subsmanproxy
	${CMAKE_CURRENT_SOURCE_DIR}/ws4d_subsmanager)
ADD_SUFFIX(dpws_peer_SRCS .c)

IF(MSVC)
	SET_SOURCE_FILES_PROPERTIES( ${dpws_peer_SRCS}
		COMPILE_FLAGS "-D_CRT_SECURE_NO_DEPRECATE")
ENDIF(MSVC)

# the variable "dpws_device_OBJS" contains all .o files of libdpwsC.a
SET(dpws_peer_mt_SRCS
	${gen_DIR}/targetPeerLib
	${gen_DIR}/hostingPeerLib
	${CMAKE_CURRENT_SOURCE_DIR}/helper_addressing_mt
	${CMAKE_CURRENT_SOURCE_DIR}/helper_discoveryPeer_mt
	${CMAKE_CURRENT_SOURCE_DIR}/ws-discovery_custom
	${CMAKE_CURRENT_SOURCE_DIR}/helper_mexPeer_mt
	${CMAKE_CURRENT_SOURCE_DIR}/helper_eventingPeer_mt
	${CMAKE_CURRENT_SOURCE_DIR}/helper_soapmisc_mt
	${CMAKE_CURRENT_SOURCE_DIR}/ws4d_misc_mt
	${CMAKE_CURRENT_SOURCE_DIR}/ws4d_uri_mt
	${CMAKE_CURRENT_SOURCE_DIR}/ws4d_epr_mt
	${CMAKE_CURRENT_SOURCE_DIR}/ws4d_service_mt
	${CMAKE_CURRENT_SOURCE_DIR}/ws4d_target_mt
	${CMAKE_CURRENT_SOURCE_DIR}/ws4d_targetservice_mt
	${CMAKE_CURRENT_SOURCE_DIR}/ws4d_hosting_mt
    ${CMAKE_CURRENT_SOURCE_DIR}/ws4d_servicecache_mt
    ${CMAKE_CURRENT_SOURCE_DIR}/ws4d_targetcache_mt
    ${CMAKE_CURRENT_SOURCE_DIR}/ws4d_discovery_ctx_mt
	${CMAKE_CURRENT_SOURCE_DIR}/helper_dpwsPeer_mt
	${CMAKE_CURRENT_SOURCE_DIR}/dpws_custom
	${CMAKE_CURRENT_SOURCE_DIR}/ws4d_epr_kv_mt
	${CMAKE_CURRENT_SOURCE_DIR}/ws4d_subscription_mt
	${CMAKE_CURRENT_SOURCE_DIR}/ws4d_subsmanproxy_mt
	${CMAKE_CURRENT_SOURCE_DIR}/ws4d_subsmanager_mt)
ADD_SUFFIX(dpws_peer_mt_SRCS .c)

IF(MSVC)
	SET_SOURCE_FILES_PROPERTIES( ${dpws_peer_mt_SRCS}
		COMPILE_FLAGS "-D_CRT_SECURE_NO_DEPRECATE")
ENDIF(MSVC)

IF (WITH_HOSTING_SERVICE)
# the variable "dpws_hosted_OBJS" contains all .o files of libdpwsC.a
SET(dpws_hosted_SRCS
	${gen_DIR}/hostingPeerLib
	${CMAKE_CURRENT_SOURCE_DIR}/helper_addressing
	${CMAKE_CURRENT_SOURCE_DIR}/ws-discovery_custom
	${CMAKE_CURRENT_SOURCE_DIR}/helper_mexServer
	${CMAKE_CURRENT_SOURCE_DIR}/helper_eventingServer
	${CMAKE_CURRENT_SOURCE_DIR}/helper_soapmisc
	${CMAKE_CURRENT_SOURCE_DIR}/ws4d_misc
	${CMAKE_CURRENT_SOURCE_DIR}/ws4d_uri
	${CMAKE_CURRENT_SOURCE_DIR}/ws4d_epr
	${CMAKE_CURRENT_SOURCE_DIR}/ws4d_service
	${CMAKE_CURRENT_SOURCE_DIR}/ws4d_hosting
	${CMAKE_CURRENT_SOURCE_DIR}/helper_dpwsHostedService
	${CMAKE_CURRENT_SOURCE_DIR}/dpws_custom
	${CMAKE_CURRENT_SOURCE_DIR}/ws4d_epr_kv
	${CMAKE_CURRENT_SOURCE_DIR}/ws4d_subscription
	${CMAKE_CURRENT_SOURCE_DIR}/ws4d_subsmanager)
ADD_SUFFIX(dpws_hosted_SRCS .c)

IF(MSVC)
	SET_SOURCE_FILES_PROPERTIES( ${dpws_hosted_SRCS}
                COMPILE_FLAGS "-D_CRT_SECURE_NO_DEPRECATE")
ENDIF(MSVC)

# the variable "dpws_hosted_mt_OBJS" contains all .o files of libdpwsC.a
SET(dpws_hosted_mt_SRCS
	${gen_DIR}/hostingPeerLib
	${CMAKE_CURRENT_SOURCE_DIR}/helper_addressing_mt
	${CMAKE_CURRENT_SOURCE_DIR}/ws-discovery_custom
	${CMAKE_CURRENT_SOURCE_DIR}/helper_mexServer_mt
	${CMAKE_CURRENT_SOURCE_DIR}/helper_eventingServer_mt
	${CMAKE_CURRENT_SOURCE_DIR}/helper_soapmisc_mt
	${CMAKE_CURRENT_SOURCE_DIR}/ws4d_misc_mt
	${CMAKE_CURRENT_SOURCE_DIR}/ws4d_uri_mt
	${CMAKE_CURRENT_SOURCE_DIR}/ws4d_epr_mt
	${CMAKE_CURRENT_SOURCE_DIR}/ws4d_service_mt
	${CMAKE_CURRENT_SOURCE_DIR}/ws4d_hosting_mt
	${CMAKE_CURRENT_SOURCE_DIR}/helper_dpwsHostedService_mt
	${CMAKE_CURRENT_SOURCE_DIR}/dpws_custom
	${CMAKE_CURRENT_SOURCE_DIR}/ws4d_epr_kv_mt
	${CMAKE_CURRENT_SOURCE_DIR}/ws4d_subscription_mt
	${CMAKE_CURRENT_SOURCE_DIR}/ws4d_subsmanager_mt)
ADD_SUFFIX(dpws_hosted_mt_SRCS .c)

IF(MSVC)
	SET_SOURCE_FILES_PROPERTIES( ${dpws_hosted_mt_SRCS}
		COMPILE_FLAGS "-D_CRT_SECURE_NO_DEPRECATE")
ENDIF(MSVC)

ENDIF (WITH_HOSTING_SERVICE)

ADD_LIBRARY(dpwsC STATIC ${dpws_client_SRCS})

ADD_LIBRARY(dpwsCmt STATIC ${dpws_client_mt_SRCS})

ADD_LIBRARY(dpwsD STATIC ${dpws_device_SRCS})

ADD_LIBRARY(dpwsDmt STATIC ${dpws_device_mt_SRCS})

ADD_LIBRARY(dpwsP STATIC ${dpws_peer_SRCS})

ADD_LIBRARY(dpwsPmt STATIC ${dpws_peer_mt_SRCS})

IF (WITH_HOSTING_SERVICE)
ADD_LIBRARY(dpwsH STATIC ${dpws_hosted_SRCS})

ADD_LIBRARY(dpwsHmt STATIC ${dpws_hosted_mt_SRCS})
ENDIF (WITH_HOSTING_SERVICE)

ADD_LIBRARY(dpwsS STATIC ${gen_DIR}/dpwsC.c)

ADD_LIBRARY(ws4d_listF STATIC ${CMAKE_CURRENT_SOURCE_DIR}/ws4d_eprflist.c)

ADD_LIBRARY(ws4d_listFmt STATIC ${CMAKE_CURRENT_SOURCE_DIR}/ws4d_eprflist_mt.c)

ADD_LIBRARY(ws4d_listL STATIC ${CMAKE_CURRENT_SOURCE_DIR}/ws4d_eprllist.c)

ADD_LIBRARY(ws4d_listLmt STATIC ${CMAKE_CURRENT_SOURCE_DIR}/ws4d_eprllist_mt.c)


SET(DPWS-C_LIBRARIES
		dpwsC
		ws4d_listL
		CACHE STRING ""
		FORCE)

SET(DPWS-CMT_LIBRARIES
		dpwsCmt
		ws4d_listLmt
		CACHE STRING ""
		FORCE)
		
SET(DPWS-D_LIBRARIES
		dpwsD
		ws4d_listL
		CACHE STRING ""
		FORCE)

SET(DPWS-DMT_LIBRARIES
		dpwsDmt
		ws4d_listLmt
		CACHE STRING ""
		FORCE)
		
SET(DPWS-H_LIBRARIES
        dpwsH
        ws4d_listL
        CACHE STRING ""
        FORCE)

SET(DPWS-HMT_LIBRARIES
        dpwsHmt
        ws4d_listLmt
        CACHE STRING ""
        FORCE)

SET(DPWS_LIBRARIES
        dpwsS
        CACHE STRING ""
        FORCE)
        
SET(DPWS_LIST_LIBRARY
		ws4d_listL
		CACHE STRING ""
		FORCE)
    
SET(DPWS_LISTMT_LIBRARY
		ws4d_listLmt
		CACHE STRING ""
		FORCE)
		
ADD_DEPENDENCIES (dpwsC gen_headers gen_sources)
ADD_DEPENDENCIES (dpwsCmt gen_headers gen_sources)
ADD_DEPENDENCIES (dpwsD gen_headers gen_sources)
ADD_DEPENDENCIES (dpwsDmt gen_headers gen_sources)
ADD_DEPENDENCIES (dpwsP gen_headers gen_sources)
ADD_DEPENDENCIES (dpwsPmt gen_headers gen_sources)
IF (WITH_HOSTING_SERVICE)
ADD_DEPENDENCIES (dpwsH gen_headers gen_sources)
ADD_DEPENDENCIES (dpwsHmt gen_headers gen_sources)
ENDIF (WITH_HOSTING_SERVICE)
ADD_DEPENDENCIES (dpwsS gen_headers gen_sources)
ADD_DEPENDENCIES (ws4d_listF gen_headers gen_sources)
ADD_DEPENDENCIES (ws4d_listFmt gen_headers gen_sources)
ADD_DEPENDENCIES (ws4d_listL gen_headers gen_sources)
ADD_DEPENDENCIES (ws4d_listLmt gen_headers gen_sources)

INSTALL(TARGETS dpwsC dpwsCmt dpwsD dpwsDmt dpwsP dpwsPmt dpwsS ws4d_listF ws4d_listFmt ws4d_listL ws4d_listLmt
	ARCHIVE DESTINATION lib/ws4d-gSOAP)

IF (WITH_HOSTING_SERVICE)
INSTALL(TARGETS dpwsH dpwsHmt 	ARCHIVE DESTINATION lib/ws4d-gSOAP)
ENDIF (WITH_HOSTING_SERVICE)
INSTALL(FILES ${DPWS_GENERATED_INCLUDE_DIR}/dpwsH.h ${DPWS_GENERATED_INCLUDE_DIR}/dpwsStub.h DESTINATION include/ws4d-gSOAP)

MARK_AS_ADVANCED(
	DPWS-C_LIBRARIES
	DPWS-CMT_LIBRARIES
	DPWS-D_LIBRARIES
	DPWS-DMT_LIBRARIES
	DPWS-H_LIBRARIES
	DPWS-HMT_LIBRARIES
	DPWS_LIBRARIES
	DPWS_LIST_LIBRARY
	DPWS_LISTMT_LIBRARY)