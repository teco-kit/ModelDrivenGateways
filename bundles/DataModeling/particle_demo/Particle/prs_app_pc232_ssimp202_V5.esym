D G "BOARD" 0 1 "pc232"
D G "SENSORBOARD" 0 2 "ssimp202"
D G "MAC" 0 3 "5"
D G "this" 1 5 "(F) F"
D G "byte" 1 11 "BYTE"
D G "boolean" 1 12 "BOOLEAN"
D G "true" 1 13 "TRUE"
D G "false" 1 14 "FALSE"
D G "global" 1 15 "GLOBAL"
D G "INC" 1 17 "(X) #X"
D G "ACLAnyDataIsNew" 1 18 "ACLDataIsNew"
C G "" 2 1 1 "*"
C G "" 2 1 1 "*"
C G "" 2 1 1 "*"
C G "" 2 1 1 "*"
C G "" 2 1 1 "*"
C G "" 2 1 1 "*"
C G "" 2 1 1 "*"
C G "" 2 1 1 "*"
C G "" 2 1 1 "*"
C G "" 2 1 1 "*"
C G "" 2 1 1 "*"
C G "" 2 1 1 "*"
C G "" 2 1 1 "*"
C G "" 2 1 1 "*"
C G "" 2 1 1 "*"
C G "" 2 1 1 "*"
C G "" 2 1 1 "*"
C G "" 2 1 1 "*"
C G "" 2 1 1 "*"
C G "" 2 1 1 "*"
C G "" 2 1 1 "*"
C G "" 2 1 1 "*"
C G "" 2 1 1 "*"
C G "" 2 1 1 "*"
C G "" 2 1 1 "*"
C G "" 2 1 1 "*"
C G "" 2 1 1 "*"
C G "" 2 35 1 "*"
C G "" 2 35 1 "*"
C G "" 2 35 1 "*"
C G "" 2 35 1 "*"
C G "" 2 35 1 "*"
C G "" 2 35 1 "*"
C G "" 2 35 1 "*"
C G "" 2 35 1 "*"
C G "" 2 35 1 "*"
C G "" 2 35 1 "*"
C G "" 2 35 1 "*"
C G "" 2 35 1 "*"
C G "" 2 35 1 "*"
C G "" 2 35 1 "*"
C G "" 2 35 1 "*"
C G "" 2 35 1 "*"
C G "" 2 35 1 "*"
C G "" 2 35 1 "*"
C G "" 2 35 1 "*"
C G "" 2 35 1 "*"
C G "" 2 35 1 "*"
C G "" 2 35 1 "*"
C G "" 2 35 1 "*"
C G "" 2 35 1 "*"
C G "" 2 35 1 "*"
C G "" 2 35 1 "*"
C G "" 2 35 1 "*"
C G "" 2 35 1 "*"
C G "" 2 35 1 "*"
C G "" 2 35 1 "*"
D G "__ACLTYPES_H__" 2 85 "003"
D G "ACL_TYPE_ARG" 2 87 "(A) A>>8,A&0xff"
D G "ACL_TYPE_ALPHA" 2 89 "(A,B,C) ((A-0x33)+((B-0x33)*40)+((C-0x33)*1600))"
D G "ACL_TYPE_ALPHA_HI" 2 91 "(A,B,C) (ACL_TYPE_ALPHA(A,B,C)>>8)"
D G "ACL_TYPE_ALPHA_LO" 2 92 "(A,B,C) (ACL_TYPE_ALPHA(A,B,C)&0xff)"
D G "ACL_TYPE_ALPHA_ARG" 2 95 "(A,B,C) ACL_TYPE_ALPHA_HI(A,B,C),ACL_TYPE_ALPHA_LO(A,B,C)"
D G "ACL_TYPE_SGX_HI" 2 121 "234"
D G "ACL_TYPE_SGX_LO" 2 122 "128"
D G "ACL_TYPE_SGY_HI" 2 124 "240"
D G "ACL_TYPE_SGY_LO" 2 125 "192"
D G "ACL_TYPE_SGZ_HI" 2 127 "247"
D G "ACL_TYPE_SGZ_LO" 2 128 "0"
D G "ACL_TYPE_SLI_HI" 2 137 "141"
D G "ACL_TYPE_SLI_LO" 2 138 "136"
D G "ACL_TYPE_STE_HI" 2 146 "117"
D G "ACL_TYPE_STE_LO" 2 147 "200"
D G "ACL_TYPE_SFC_HI" 2 155 "103"
D G "ACL_TYPE_SFC_LO" 2 156 "24"
D G "ACL_TYPE_SAU_HI" 2 164 "214"
D G "ACL_TYPE_SAU_LO" 2 165 "208"
D G "ACL_TYPE_SSW_HI" 2 174 "230"
D G "ACL_TYPE_SSW_LO" 2 175 "32"
D G "ACL_TYPE_SVC_HI" 2 180 "105"
D G "ACL_TYPE_SVC_LO" 2 181 "152"
D G "ACL_TYPE_SJS_HI" 2 186 "203"
D G "ACL_TYPE_SJS_LO" 2 187 "184"
D G "ACL_TYPE_SIS_HI" 2 190 "203"
D G "ACL_TYPE_SIS_LO" 2 191 "144"
D G "ACL_TYPE_ACM_HI" 2 202 "165"
D G "ACL_TYPE_ACM_LO" 2 203 "14"
D G "ACL_TYPE_AMC_HI" 2 209 "104"
D G "ACL_TYPE_AMC_LO" 2 210 "30"
D G "ACL_TYPE_ASM_HI" 2 216 "167"
D G "ACL_TYPE_ASM_LO" 2 217 "142"
D G "ACL_TYPE_ACH_HI" 2 223 "133"
D G "ACL_TYPE_ACH_LO" 2 224 "206"
D G "ACL_TYPE_ADE_HI" 2 230 "115"
D G "ACL_TYPE_ADE_LO" 2 231 "54"
D G "ACL_TYPE_ADP_HI" 2 237 "183"
D G "ACL_TYPE_ADP_LO" 2 238 "246"
D G "ACL_TYPE_AFR_HI" 2 244 "196"
D G "ACL_TYPE_AFR_LO" 2 245 "198"
D G "ACL_TYPE_AMM_HI" 2 250 "166"
D G "ACL_TYPE_AMM_LO" 2 251 "158"
D G "ACL_TYPE_ADO_HI" 2 257 "177"
D G "ACL_TYPE_ADO_LO" 2 258 "182"
D G "ACL_TYPE_ABA_HI" 2 264 "89"
D G "ACL_TYPE_ABA_LO" 2 265 "230"
D G "ACL_TYPE_ALB_HI" 2 272 "97"
D G "ACL_TYPE_ALB_LO" 2 273 "182"
D G "ACL_TYPE_ACL_HI" 2 279 "158"
D G "ACL_TYPE_ACL_LO" 2 280 "206"
D G "ACL_TYPE_ASH_HI" 2 287 "136"
D G "ACL_TYPE_ASH_LO" 2 288 "78"
D G "ACL_TYPE_ARE_HI" 2 294 "117"
D G "ACL_TYPE_ARE_LO" 2 295 "102"
D G "ACL_TYPE_AAL_HI" 2 301 "158		" "artefact alchemist"
D G "ACL_TYPE_AAL_LO" 2 302 "126"
D G "ACL_TYPE_APS_HI" 2 307 "204"
D G "ACL_TYPE_APS_LO" 2 308 "150"
D G "ACL_TYPE_RDA_HI" 2 318 "90"
D G "ACL_TYPE_RDA_LO" 2 319 "71"
D G "ACL_TYPE_RDX_HI" 2 326 "234"
D G "ACL_TYPE_RDX_LO" 2 327 "7"
D G "ACL_TYPE_CAN_HI" 2 343 "171"
D G "ACL_TYPE_CAN_LO" 2 344 "0"
D G "ACL_TYPE_CHE_HI" 2 351 "115"
D G "ACL_TYPE_CHE_LO" 2 352 "216"
D G "ACL_TYPE_CEH_HI" 2 358 "134"
D G "ACL_TYPE_CEH_LO" 2 359 "32"
D G "ACL_TYPE_CSR_HI" 2 365 "198"
D G "ACL_TYPE_CSR_LO" 2 366 "208"
D G "ACL_TYPE_CPR_HI" 2 373 "198"
D G "ACL_TYPE_CPR_LO" 2 374 "88"
D G "ACL_TYPE_CRT_HI" 2 382 "211"
D G "ACL_TYPE_CRT_LO" 2 383 "40"
D G "ACL_TYPE_CRR_HI" 2 390 "198"
D G "ACL_TYPE_CRR_LO" 2 391 "168"
D G "ACL_TYPE_CFS_HI" 2 398 "203"
D G "ACL_TYPE_CFS_LO" 2 399 "8"
D G "ACL_TYPE_CSF_HI" 2 406 "123"
D G "ACL_TYPE_CSF_LO" 2 407 "208"
D G "ACL_TYPE_CID_HI" 2 413 "109"
D G "ACL_TYPE_CID_LO" 2 414 "192"
D G "ACL_TYPE_CST_HI" 2 420 "211"
D G "ACL_TYPE_CST_LO" 2 421 "80"
D G "ACL_TYPE_CAD_HI" 2 427 "108		" "adress control sequence"
D G "ACL_TYPE_CAD_LO" 2 428 "128"
D G "ACL_TYPE_CAC_HI" 2 436 "102"
D G "ACL_TYPE_CAC_LO" 2 437 "64"
D G "ACL_TYPE_CTR_HI" 2 443 "198"
D G "ACL_TYPE_CTR_LO" 2 444 "248"
D G "ACL_TYPE_CTA_HI" 2 457 "92"
D G "ACL_TYPE_CTA_LO" 2 458 "184"
D G "ACL_TYPE_CTS_HI" 2 472 "205"
D G "ACL_TYPE_CTS_LO" 2 473 "56"
D G "ACL_TYPE_CET_HI" 2 482 "209"
D G "ACL_TYPE_CET_LO" 2 483 "32"
D G "ACL_TYPE_CRS_HI" 2 502 "204"
D G "ACL_TYPE_CRS_LO" 2 503 "232"
D G "ACL_TYPE_CLE_HI" 2 520 "116"
D G "ACL_TYPE_CLE_LO" 2 521 "120"
D G "ACL_TYPE_CJC_HI" 2 545 "103"
D G "ACL_TYPE_CJC_LO" 2 546 "168"
D G "ACL_TYPE_CJR_HI" 2 560 "197"
D G "ACL_TYPE_CJR_LO" 2 561 "104"
D G "ACL_TYPE_CJA_HI" 2 571 "91"
D G "ACL_TYPE_CJA_LO" 2 572 "40"
D G "ACL_TYPE_CPI_HI" 2 579 "142"
D G "ACL_TYPE_CPI_LO" 2 580 "24"
D G "ACL_TYPE_CIC_HI" 2 591 "103"
D G "ACL_TYPE_CIC_LO" 2 592 "128"
D G "ACL_TYPE_CIR_HI" 2 602 "197"
D G "ACL_TYPE_CIR_LO" 2 603 "64"
D G "ACL_TYPE_CIA_HI" 2 610 "91"
D G "ACL_TYPE_CIA_LO" 2 611 "0"
d G "PIN_A0" 3 22 "31744"
d G "PIN_A1" 3 23 "31745"
d G "PIN_A2" 3 24 "31746"
d G "PIN_A3" 3 25 "31747"
d G "PIN_A4" 3 26 "31748"
d G "PIN_A5" 3 27 "31749"
d G "PIN_B0" 3 29 "31752"
d G "PIN_B1" 3 30 "31753"
d G "PIN_B2" 3 31 "31754"
d G "PIN_B3" 3 32 "31755"
d G "PIN_B4" 3 33 "31756"
d G "PIN_B5" 3 34 "31757"
d G "PIN_B6" 3 35 "31758"
d G "PIN_B7" 3 36 "31759"
d G "PIN_C0" 3 38 "31760"
d G "PIN_C1" 3 39 "31761"
d G "PIN_C2" 3 40 "31762"
d G "PIN_C3" 3 41 "31763"
d G "PIN_C4" 3 42 "31764"
d G "PIN_C5" 3 43 "31765"
d G "PIN_C6" 3 44 "31766"
d G "PIN_C7" 3 45 "31767"
d G "PIN_D0" 3 47 "31768"
d G "PIN_D1" 3 48 "31769"
d G "PIN_D2" 3 49 "31770"
d G "PIN_D3" 3 50 "31771"
d G "PIN_D4" 3 51 "31772"
d G "PIN_D5" 3 52 "31773"
d G "PIN_D6" 3 53 "31774"
d G "PIN_D7" 3 54 "31775"
d G "PIN_E0" 3 56 "31776"
d G "PIN_E1" 3 57 "31777"
d G "PIN_E2" 3 58 "31778"
d G "PIN_E3" 3 59 "31779"
d G "PIN_E4" 3 60 "31780"
d G "PIN_E5" 3 61 "31781"
d G "PIN_E6" 3 62 "31782"
d G "PIN_E7" 3 63 "31783"
d G "PIN_F0" 3 65 "31784"
d G "PIN_F1" 3 66 "31785"
d G "PIN_F2" 3 67 "31786"
d G "PIN_F3" 3 68 "31787"
d G "PIN_F4" 3 69 "31788"
d G "PIN_F5" 3 70 "31789"
d G "PIN_F6" 3 71 "31790"
d G "PIN_F7" 3 72 "31791"
d G "PIN_G0" 3 74 "31792"
d G "PIN_G1" 3 75 "31793"
d G "PIN_G2" 3 76 "31794"
d G "PIN_G3" 3 77 "31795"
d G "PIN_G4" 3 78 "31796"
d G "FALSE" 3 81 "0"
d G "TRUE" 3 82 "1"
d G "BYTE" 3 84 "int"
d G "BOOLEAN" 3 85 "short int"
d G "getc" 3 87 "getch"
d G "fgetc" 3 88 "getch"
d G "getchar" 3 89 "getch"
d G "putc" 3 90 "putchar"
d G "fputc" 3 91 "putchar"
d G "fgets" 3 92 "gets"
d G "fputs" 3 93 "puts"
d G "WDT_TIMEOUT" 3 99 "4"
d G "MCLR_FROM_SLEEP" 3 100 "8"
d G "NORMAL_POWER_UP" 3 101 "12"
d G "BROWNOUT_RESTART" 3 102 "14"
d G "RTCC_INTERNAL" 3 109 "0"
d G "RTCC_EXT_L_TO_H" 3 110 "32"
d G "RTCC_EXT_H_TO_L" 3 111 "48"
d G "RTCC_DIV_1" 3 113 "8"
d G "RTCC_DIV_2" 3 114 "0"
d G "RTCC_DIV_4" 3 115 "1"
d G "RTCC_DIV_8" 3 116 "2"
d G "RTCC_DIV_16" 3 117 "3"
d G "RTCC_DIV_32" 3 118 "4"
d G "RTCC_DIV_64" 3 119 "5"
d G "RTCC_DIV_128" 3 120 "6"
d G "RTCC_DIV_256" 3 121 "7"
d G "RTCC_OFF" 3 123 "0x80"
d G "RTCC_8_BIT" 3 125 "0x40"
d G "WDT_ON" 3 135 "0x100"
d G "WDT_OFF" 3 136 "0"
d G "T1_DISABLED" 3 142 "0"
d G "T1_INTERNAL" 3 143 "0x85"
d G "T1_EXTERNAL" 3 144 "0x87"
d G "T1_EXTERNAL_SYNC" 3 145 "0x83"
d G "T1_CLK_OUT" 3 147 "8"
d G "T1_DIV_BY_1" 3 149 "0"
d G "T1_DIV_BY_2" 3 150 "0x10"
d G "T1_DIV_BY_4" 3 151 "0x20"
d G "T1_DIV_BY_8" 3 152 "0x30"
d G "T2_DISABLED" 3 157 "0"
d G "T2_DIV_BY_1" 3 158 "4"
d G "T2_DIV_BY_4" 3 159 "5"
d G "T2_DIV_BY_16" 3 160 "6"
d G "T3_DISABLED" 3 166 "0"
d G "T3_INTERNAL" 3 167 "0x85"
d G "T3_EXTERNAL" 3 168 "0x87"
d G "T3_EXTERNAL_SYNC" 3 169 "0x83"
d G "T3_DIV_BY_1" 3 171 "0"
d G "T3_DIV_BY_2" 3 172 "0x10"
d G "T3_DIV_BY_4" 3 173 "0x20"
d G "T3_DIV_BY_8" 3 174 "0x30"
d G "T4_DISABLED" 3 179 "0"
d G "T4_DIV_BY_1" 3 180 "4"
d G "T4_DIV_BY_4" 3 181 "5"
d G "T4_DIV_BY_16" 3 182 "6"
d G "CCP_OFF" 3 188 "0"
d G "CCP_CAPTURE_FE" 3 189 "4"
d G "CCP_CAPTURE_RE" 3 190 "5"
d G "CCP_CAPTURE_DIV_4" 3 191 "6"
d G "CCP_CAPTURE_DIV_16" 3 192 "7"
d G "CCP_COMPARE_SET_ON_MATCH" 3 193 "8"
d G "CCP_COMPARE_CLR_ON_MATCH" 3 194 "9"
d G "CCP_COMPARE_INT" 3 195 "0xA"
d G "CCP_COMPARE_INT_AND_TOGGLE" 3 196 "0x2"
d G "CCP_COMPARE_RESET_TIMER" 3 197 "0xB"
d G "CCP_PWM" 3 198 "0xC"
d G "CCP_PWM_PLUS_1" 3 199 "0x1c"
d G "CCP_PWM_PLUS_2" 3 200 "0x2c"
d G "CCP_PWM_PLUS_3" 3 201 "0x3c"
d G "CCP_USE_TIMER3" 3 202 "0x100"
v G "CCP_1" 3 203 "int16"
v G "CCP_2" 3 207 "int16"
v G "CCP_3" 3 211 "int16"
v G "CCP_4" 3 215 "int16"
v G "CCP_5" 3 219 "int16"
d G "T3_CCP1_TO_5" 3 225 "0x48"
d G "T3_CCP2_TO_5" 3 226 "0x8"
d G "T3_CCP3_TO_5" 3 227 "0x40"
d G "PSP_ENABLED" 3 234 "0x10"
d G "PSP_DISABLED" 3 235 "0"
d G "SPI_MASTER" 3 242 "0x20"
d G "SPI_SLAVE" 3 243 "0x24"
d G "SPI_L_TO_H" 3 244 "0"
d G "SPI_H_TO_L" 3 245 "0x10"
d G "SPI_CLK_DIV_4" 3 246 "0"
d G "SPI_CLK_DIV_16" 3 247 "1"
d G "SPI_CLK_DIV_64" 3 248 "2"
d G "SPI_CLK_T2" 3 249 "3"
d G "SPI_SS_DISABLED" 3 250 "1"
d G "SPI_SAMPLE_AT_END" 3 252 "0x8000"
d G "SPI_XMIT_L_TO_H" 3 253 "0x4000"
d G "A0_A3_A1_A3" 3 258 "0xfff04"
d G "A0_A3_A1_A2_OUT_ON_A4_A5" 3 259 "0xfcf03"
d G "A0_A3_A1_A3_OUT_ON_A4_A5" 3 260 "0xbcf05"
d G "NC_NC_NC_NC" 3 261 "0x0ff07"
d G "A0_A3_A1_A2" 3 262 "0xfff02"
d G "A0_A3_NC_NC_OUT_ON_A4" 3 263 "0x9ef01"
d G "A0_VR_A1_VR" 3 264 "0x3ff06"
d G "A3_VR_A2_VR" 3 265 "0xcff0e"
d G "NO_ANALOGS" 3 274 "0x0F" "None"
d G "ALL_ANALOG" 3 275 "0x00" "A0 A1 A2 A3 A5 F0 F1 F2 F3 F4 F5 F6"
d G "ANALOG_AN0_TO_AN10" 3 276 "0x04" "A0 A1 A2 A3 A5 F0 F1 F2 F3 F4 F5"
d G "ANALOG_AN0_TO_AN9" 3 277 "0x05" "A0 A1 A2 A3 A5 F0 F1 F2 F3 F4"
d G "ANALOG_AN0_TO_AN8" 3 278 "0x06" "A0 A1 A2 A3 A5 F0 F1 F2 F3"
d G "ANALOG_AN0_TO_AN7" 3 279 "0x07" "A0 A1 A2 A3 A5 F0 F1 F2"
d G "ANALOG_AN0_TO_AN6" 3 280 "0x08" "A0 A1 A2 A3 A5 F0 F1"
d G "ANALOG_AN0_TO_AN5" 3 281 "0x09" "A0 A1 A2 A3 A5 F0"
d G "ANALOG_AN0_TO_AN4" 3 282 "0x0A" "A0 A1 A2 A3 A5"
d G "ANALOG_AN0_TO_AN3" 3 283 "0x0B" "A0 A1 A2 A3"
d G "ANALOG_AN0_TO_AN2" 3 284 "0x0C" "A0 A1 A2"
d G "ANALOG_AN0_TO_AN1" 3 285 "0x0D" "A0 A1"
d G "ANALOG_AN0" 3 286 "0x0E" "A0"
d G "VSS_VDD" 3 288 "0x00" "Range 0-Vdd"
d G "VREF_VREF" 3 289 "0x30" "Range VrefL-VrefH"
d G "VREF_VDD" 3 290 "0x20" "Range VrefL-Vdd"
d G "VSS_VREF" 3 291 "0x10" "Range 0-VrefH"
d G "ADC_OFF" 3 294 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 3 295 "0x100"
d G "ADC_CLOCK_DIV_4" 3 296 "0x104"
d G "ADC_CLOCK_DIV_8" 3 297 "0x101"
d G "ADC_CLOCK_DIV_16" 3 298 "0x105"
d G "ADC_CLOCK_DIV_32" 3 299 "0x102"
d G "ADC_CLOCK_DIV_64" 3 300 "0x106"
d G "ADC_CLOCK_INTERNAL" 3 301 "0x107" "Internal 2-6us"
d G "ADC_START_AND_READ" 3 304 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 3 305 "1"
d G "ADC_READ_ONLY" 3 306 "6"
d G "L_TO_H" 3 313 "0x40"
d G "H_TO_L" 3 314 "0"
d G "GLOBAL" 3 316 "0xF2C0"
d G "INT_RTCC" 3 317 "0xF220"
d G "INT_TIMER0" 3 318 "0xF220"
d G "INT_TIMER1" 3 319 "0x9D01"
d G "INT_TIMER2" 3 320 "0x9D02"
d G "INT_TIMER3" 3 321 "0xA002"
d G "INT_EXT" 3 322 "0xF210"
d G "INT_EXT1" 3 323 "0xF008"
d G "INT_EXT2" 3 324 "0xF010"
d G "INT_EXT3" 3 325 "0xF020"
d G "INT_RB" 3 326 "0xF208"
d G "INT_AD" 3 327 "0x9D40"
d G "INT_RDA" 3 328 "0x9D20"
d G "INT_TBE" 3 329 "0x9D10"
d G "INT_SSP" 3 330 "0x9D08"
d G "INT_CCP1" 3 331 "0x9D04"
d G "INT_CCP2" 3 332 "0xA001"
d G "INT_BUSCOL" 3 333 "0xA008"
d G "INT_LOWVOLT" 3 334 "0xA004"
d G "INT_COMP" 3 335 "0xA040"
d G "INT_EEPROM" 3 336 "0xA010"
d G "INT_RDA2" 3 337 "0xA320"
d G "INT_TBE2" 3 338 "0xA310"
d G "INT_TIMER4" 3 339 "0xA308"
d G "INT_CCP3" 3 340 "0xA301"
d G "INT_CCP4" 3 341 "0xA302"
d G "INT_CCP5" 3 342 "0xA304"
D G "PROCESSOR_TYPE" 4 10 "186720"
D G "RD" 4 151 "0"
D G "WR" 4 152 "1"
D G "WREN" 4 153 "2"
D G "WRERR" 4 154 "3"
D G "FREE" 4 155 "4"
D G "CFGS" 4 156 "6"
D G "EEPGD" 4 157 "7"
D G "EEIF" 4 160 "4"
D G "ADCH_PIN_A0" 4 163 "0b00000000"
D G "ADCH_PIN_A1" 4 164 "0b00000001"
D G "ADCH_PIN_A2" 4 165 "0b00000010"
D G "ADCH_PIN_A3" 4 166 "0b00000011"
D G "ADCH_PIN_A5" 4 167 "0b00000100"
D G "ADCH_PIN_F0" 4 168 "0b00000101"
C G "" 5 1 1 "*"
C G "" 5 1 1 "*"
D G "__PC232_H__" 5 14 "000"
D G "BOARD_ID_HIGH" 5 21 "2		" "boardtype is particle (1), board_id_high is 1<<1, see docu particle ids"
D G "BOARD_ID_LOW" 5 22 "232		" "boardversion"
D G "PIN_RF_CTR0" 5 26 "PIN_F5"
D G "TRIS_RF_CTR0" 5 27 "PIC_TRISF,5"
D G "PIN_RF_CTR1" 5 28 "PIN_G4"
D G "TRIS_RF_CTR1" 5 29 "PIC_TRISG,4"
D G "PIN_RF_TX" 5 30 "PIN_C5			" "SPI Out"
D G "TRIS_RF_TX" 5 31 "PIC_TRISC,5"
D G "PIN_RF_RX" 5 32 "PIN_G2			" "Data Line of Usart in Synchronous Mode"
D G "TRIS_RF_RX" 5 33 "PIC_TRISG,2"
D G "PIN_RF_POWER" 5 34 "PIN_D2"
D G "TRIS_RF_POWER" 5 35 "PIC_TRISD,2"
D G "PIN_RF_SENSITIVE" 5 36 "PIN_D1"
D G "TRIS_RF_SENSITIVE" 5 37 "PIC_TRISD,1"
D G "PIN_POTI_POWER" 5 41 "PIN_G3"
D G "TRIS_POTI_POWER" 5 42 "PIN_TRISG,3"
D G "PIN_POTI_UD" 5 43 "PIN_E0"
D G "TRIS_POTI_UD" 5 44 "PIC_TRISE,0"
D G "PIN_POTI_INC" 5 45 "PIN_G0"
D G "TRIS_POTI_INC" 5 46 "PIC_TRISG,0"
D G "LED_PC_RED" 5 50 "PIN_C2"
D G "LED_PC_BLUE" 5 51 "PIN_F6"
D G "RED" 5 52 "LED_PC_RED			" "for convenience"
D G "BLUE" 5 53 "LED_PC_BLUE"
D G "PIN_I2C_PC_SDA" 5 57 "PIN_C5"
D G "TRIS_I2C_PC_SDA" 5 58 "PIC_TRISC,5"
D G "PIN_I2C_PC_SCL" 5 59 "PIN_C3"
D G "TRIS_I2C_PC_SCL" 5 60 "PIC_TRISC,3"
D G "PIN_I2C_PC_POWER" 5 61 "PIN_D7"
D G "TRIS_I2C_PC_POWER" 5 62 "PIC_TRISD,7"
D G "XROM_ID" 5 64 "0"
D G "PIN_VOLTAGE" 5 67 "PIN_A0"
D G "ADCH_VOLTAGE" 5 68 "ADCH_PIN_A0"
D G "TRIS_RSSI_POWER" 5 71 "PIC_TRISF,4"
D G "PIN_RSSI_POWER" 5 72 "PIN_F4"
D G "TRIS_RSSI_IN" 5 73 "PIC_TRISA,1"
D G "PIN_RSSI_IN" 5 74 "PIN_A1"
D G "ADCH_RSSI" 5 75 "ADCH_PIN_A1"
D G "PIN_RSSI_RES" 5 77 "PIN_F3"
D G "TRIS_RSSI_RES" 5 78 "PIC_TRISF, 3"
D G "PIN_RSSI_CAP" 5 79 "PIN_E1"
D G "TRIS_RSSI_CAP" 5 80 "PIC_TRISE, 1"
D G "PIN_RSSI_VDD" 5 81 "PIN_F7"
D G "TRIS_RSSI_VDD" 5 82 "PIC_TRISF, 7"
D G "PIN_FLASH_POWER" 5 86 "PIN_D7"
D G "TRIS_FLASH_POWER" 5 87 "PIC_TRISD,7"
D G "PIN_FLASH_CS" 5 88 "PIN_D3"
D G "TRIS_FLASH_CS" 5 89 "PIC_TRISD,3"
D G "PIN_FLASH_SI" 5 93 "PIN_C5"
D G "TRIS_FLASH_SI" 5 94 "PIC_TRISC,5"
D G "PIN_FLASH_SO" 5 95 "PIN_C4"
D G "TRIS_FLASH_SO" 5 96 "PIC_TRISC,4"
D G "PIC_FLASH_SCK" 5 97 "PIN_C3"
D G "TRIS_FLASH_SCK" 5 98 "PIC_TRISC,3"
D G "TRIS_BUZZER" 5 102 "PIC_TRISE,3"
D G "PIN_BUZZER" 5 103 "PIN_E3"
D G "TRIS_ID_CHIP_DATA" 5 107 "PIC_TRISE,7"
D G "PIN_ID_CHIP_DATA" 5 108 "PIN_E7"
D G "PIN_ID_CHIP_POWER" 5 109 "PIN_E6"
D G "TRIS_ID_CHIP_POWER" 5 110 "PIC_TRISE,6"
D G "TRIS_BALL_INNER" 5 114 "PIC_TRISD,0"
D G "PIN_BALL_INNER" 5 115 "PIN_D0"
D G "PIN_BALL_OUTER" 5 116 "PIN_B0"
D G "TRIS_BALL_OUTER" 5 117 "PIC_TRISB,0"
D G "PIN_CONN_01" 5 121 "" "VCC"
D G "PIN_CONN_02" 5 122 "PIN_B0"
D G "PIN_CONN_03" 5 123 "PIN_B1"
D G "PIN_CONN_04" 5 124 "PIN_B2"
D G "PIN_CONN_05" 5 125 "PIN_B3"
D G "PIN_CONN_06" 5 126 "PIN_B4"
D G "PIN_CONN_07" 5 127 "PIN_B5"
D G "PIN_CONN_08" 5 128 "PIN_B6"
D G "PIN_CONN_09" 5 129 "PIN_B7"
D G "PIN_CONN_10" 5 130 "" "MCLR"
D G "PIN_CONN_11" 5 131 "PIN_A2"
D G "PIN_CONN_12" 5 132 "PIN_A3"
D G "PIN_CONN_13" 5 133 "PIN_F0"
D G "PIN_CONN_14" 5 134 "PIN_A5"
D G "PIN_CONN_15" 5 135 "PIN_E4"
D G "PIN_CONN_16" 5 136 "PIN_E5"
D G "PIN_CONN_17" 5 137 "PIN_D4"
D G "PIN_CONN_18" 5 138 "PIN_D5"
D G "PIN_CONN_19" 5 139 "PIN_C6"
D G "PIN_CONN_20" 5 140 "PIN_C7"
D G "PIN_CONN_21" 5 141 "" "GND"
D G "TRIS_CONN_01" 5 143 "" "VCC"
D G "TRIS_CONN_02" 5 144 "PIC_TRISB,0"
D G "TRIS_CONN_03" 5 145 "PIC_TRISB,1"
D G "TRIS_CONN_04" 5 146 "PIC_TRISB,2"
D G "TRIS_CONN_05" 5 147 "PIC_TRISB,3"
D G "TRIS_CONN_06" 5 148 "PIC_TRISB,4"
D G "TRIS_CONN_07" 5 149 "PIC_TRISB,5"
D G "TRIS_CONN_08" 5 150 "PIC_TRISB,6"
D G "TRIS_CONN_09" 5 151 "PIC_TRISB,7"
D G "TRIS_CONN_10" 5 152 "" "MCLR"
D G "TRIS_CONN_11" 5 153 "PIC_TRISA,2"
D G "TRIS_CONN_12" 5 154 "PIC_TRISA,3"
D G "TRIS_CONN_13" 5 155 "PIC_TRISF,0"
D G "TRIS_CONN_14" 5 156 "PIC_TRISA,5"
D G "TRIS_CONN_15" 5 157 "PIC_TRISE,4"
D G "TRIS_CONN_16" 5 158 "PIC_TRISE,5"
D G "TRIS_CONN_17" 5 159 "PIC_TRISD,4"
D G "TRIS_CONN_18" 5 160 "PIC_TRISD,5"
D G "TRIS_CONN_19" 5 161 "PIC_TRISC,6"
D G "TRIS_CONN_20" 5 162 "PIC_TRISC,7"
D G "TRIS_CONN_21" 5 163 "" "GND"
D G "ADCH_CONN_11" 5 165 "ADCH_PIN_A2"
D G "ADCH_CONN_12" 5 166 "ADCH_PIN_A3"
D G "ADCH_CONN_13" 5 167 "ADCH_PIN_F0"
D G "ADCH_CONN_14" 5 168 "ADCH_PIN_A5"
D G "TRIS_RPC_HANDSHAKE_SERVER" 5 172 "TRIS_CONN_04"
D G "PIN_RPC_HANDSHAKE_SERVER" 5 173 "PIN_CONN_04"
D G "RF_TXSTA" 5 176 "PIC_TXSTA2"
D G "RF_SPBRG" 5 177 "PIC_SPBRG2"
D G "RF_RCREG" 5 178 "PIC_RCREG2"
D G "RF_RCSTA" 5 179 "PIC_RCSTA2"
D G "RF_UART_SREN" 5 180 "PIC_RCSTA2,5"
D G "RF_UART_CREN" 5 181 "PIC_RCSTA2,4"
D G "RF_UART_RCIF" 5 182 "PIC_PIR3,5"
D G "RF_UART_SPEN" 5 183 "PIC_RCSTA2,7"
D G "RF_SSPBUF" 5 185 "PIC_SSPBUF"
D G "RF_SSPSTAT_BF" 5 186 "PIC_SSPSTAT,0"
D G "RF_TIMER1_IF" 5 187 "PIC_PIR1,0"
D G "RF_TIMER1_CON" 5 188 "PIC_T1CON"
D G "RF_TIMER2_TMR2IF" 5 189 "PIC_PIR1,1"
D G "RF_TIMER1H" 5 191 "PIC_TMR1H"
D G "RF_TIMER1L" 5 192 "PIC_TMR1L"
D G "RF_TIMER2" 5 193 "PIC_TMR2"
D G "RF_SSPCON_SSPEN" 5 195 "PIC_SSPCON1,5"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
D G "__SSIMP202_H__" 6 15 "001"
D G "PIN_ACCL_ADXL_POWER" 6 21 "PIN_CONN_04"
D G "PIN_ACCL_ADXL_XOUT" 6 22 "PIN_CONN_05"
D G "PIN_ACCL_ADXL_YOUT" 6 23 "PIN_CONN_06"
D G "TRIS_ACCL_ADXL_POWER" 6 25 "TRIS_CONN_04"
D G "TRIS_ACCL_ADXL_XOUT" 6 26 "TRIS_CONN_05"
D G "TRIS_ACCL_ADXL_YOUT" 6 27 "TRIS_CONN_06"
D G "PIN_ACCL_ADXL_POWER_Z" 6 30 "PIN_CONN_04"
D G "PIN_ACCL_ADXL_ZOUT" 6 31 "PIN_CONN_07"
D G "TRIS_ACCL_ADXL_POWER_Z" 6 33 "TRIS_CONN_04"
D G "TRIS_ACCL_ADXL_ZOUT" 6 34 "TRIS_CONN_07"
D G "PIN_LIGHT_TSL250_POWER" 6 38 "PIN_CONN_08"
D G "PIN_LIGHT_TSL250_OUT" 6 39 "PIN_CONN_14"
D G "TRIS_LIGHT_TSL250_POWER" 6 41 "TRIS_CONN_08"
D G "TRIS_LIGHT_TSL250_OUT" 6 42 "TRIS_CONN_14"
D G "ADCH_LIGHT_TSL250" 6 44 "ADCH_CONN_14"
D G "PIN_LIGHT_TSL2550_POWER" 6 48 "PIN_CONN_04"
D G "PIN_LIGHT_TSL2550_SDA" 6 49 "PIN_CONN_13"
D G "PIN_LIGHT_TSL2550_SCLK" 6 50 "PIN_CONN_09"
D G "TRIS_LIGHT_TSL2550_POWER" 6 52 "TRIS_CONN_04"
D G "TRIS_LIGHT_TSL2550_SDA" 6 53 "TRIS_CONN_13"
D G "TRIS_LIGHT_TSL2550_SCLK" 6 54 "TRIS_CONN_09"
D G "PIN_TEMP_MCP9800_POWER" 6 58 "PIN_CONN_04"
D G "PIN_TEMP_MCP9800_SDA" 6 59 "PIN_CONN_13"
D G "PIN_TEMP_MCP9800_SCLK" 6 60 "PIN_CONN_09"
D G "TRIS_TEMP_MCP9800_POWER" 6 62 "TRIS_CONN_04"
D G "TRIS_TEMP_MCP9800_SDA" 6 63 "TRIS_CONN_13"
D G "TRIS_TEMP_MCP9800_SCLK" 6 64 "TRIS_CONN_09"
D G "PIN_TEMP_TC74_POWER" 6 67 "PIN_CONN_04"
D G "PIN_TEMP_TC74_SDA" 6 68 "PIN_CONN_13"
D G "PIN_TEMP_TC74_SCLK" 6 69 "PIN_CONN_09"
D G "TRIS_TEMP_TC74_POWER" 6 71 "TRIS_CONN_04"
D G "TRIS_TEMP_TC74_SDA" 6 72 "TRIS_CONN_13"
D G "TRIS_TEMP_TC74_SCLK" 6 73 "TRIS_CONN_09"
D G "PIN_FORCE_FSR_POWER" 6 78 "PIN_CONN_17"
D G "PIN_FORCE_FSR_OUT" 6 79 "PIN_CONN_12"
D G "TRIS_FORCE_FSR_POWER" 6 81 "TRIS_CONN_17"
D G "TRIS_FORCE_FSR_OUT" 6 82 "TRIS_CONN_12"
D G "ADCH_FORCE_FSR" 6 84 "ADCH_CONN_12	" "channel AN2"
D G "PIN_AUDIO_MIC_POWER" 6 88 "PIN_CONN_17"
D G "PIN_AUDIO_MIC_OUT" 6 89 "PIN_CONN_11"
D G "TRIS_AUDIO_MIC_POWER" 6 91 "TRIS_CONN_17"
D G "TRIS_AUDIO_MIC_OUT" 6 92 "TRIS_CONN_11"
D G "ADCH_AUDIO_MIC" 6 94 "ADCH_CONN_11"
D G "PIN_GENERIC_POWER" 6 98 "PIN_CONN_08"
D G "PIN_GENERIC_OUT" 6 99 "PIN_CONN_14"
D G "TRIS_GENERIC_POWER" 6 101 "TRIS_CONN_08"
D G "TRIS_GENERIC_OUT" 6 102 "TRIS_CONN_14"
D G "ADCH_GENERIC_OUT" 6 104 "ADCH_CONN_14"
D G "PIN_LED_AMBER_POWER" 6 109 "PIN_CONN_03"
D G "TRIS_LED_AMBER_POWER" 6 110 "TRIS_CONN_03"
D G "PIN_SENSOR_I2C_SDA" 6 117 "PIN_CONN_13"
D G "TRIS_SENSOR_I2C_SDA" 6 118 "TRIS_CONN_13"
D G "PIN_SENSOR_I2C_SCL" 6 120 "PIN_CONN_09"
D G "TRIS_SENSOR_I2C_SCL" 6 121 "TRIS_CONN_09"
D G "PIN_SENSOR_I2C_POWER" 6 123 "PIN_CONN_04"
D G "TRIS_SENSOR_I2C_POWER" 6 124 "TRIS_CONN_04"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 2 "*"
C G "" 7 35 1 "*"
C G "" 7 35 1 "*"
C G "" 7 35 1 "*"
C G "" 7 35 1 "*"
C G "" 7 35 1 "*"
C G "" 7 35 1 "*"
D G "__WDT18FXX20_H__" 7 49 "003"
C L "WDTConfig" 7 51 1 "*"
C L "WDTConfig" 7 51 1 "*"
C L "WDTConfig" 7 51 1 "*"
C L "WDTConfig" 7 51 1 "*"
C L "WDTConfig" 7 51 1 "*"
C L "WDTConfig" 7 51 1 "*"
C L "WDTConfig" 7 51 1 "*"
C L "WDTConfig" 7 51 1 "*"
C L "WDTConfig" 7 51 1 "*"
C L "WDTConfig" 7 51 1 "*"
C L "WDTConfig" 7 51 1 "*"
C L "WDTConfig" 7 51 1 "*"
V L "timeout" 7 66 "int8"
F G "WDTConfig" 7 66 "int8(int8 timeout)" "* Enables the software watchdog timer."
F G "WDTEnable" 7 71 "int8()" "* Disables the software watchdog timer."
F G "WDTDisable" 7 76 "int8()" "* Tests, whether software watchdog timer is enabled (returns 1) or disabled (returns 0)"
F G "WDTTest" 7 81 "int8()" "* Reads the actual value of the software-watchdog-timer"
C L "WDTTest" 7 83 1 "*"
F G "WDTReadValue" 7 87 "int8()" "* Processor file for 18f6720."
C L "WDTReadValue" 8 1 1 "*"
C L "WDTReadValue" 8 1 1 "*"
C L "WDTReadValue" 8 1 1 "*"
C L "WDTReadValue" 8 1 1 "*"
C L "WDTReadValue" 8 1 1 "*"
C L "WDTReadValue" 8 1 1 "*"
C L "WDTReadValue" 8 1 1 "*"
C L "WDTReadValue" 8 1 1 "*"
D G "__18f6720_C__" 8 19 "008"
D G "SAVETIMINGS" 8 23 ""
C L "WDTReadValue" 8 1 4 "FUNCTION"
V L "address" 8 31 "int8"
V L "data" 8 31 "int8"
F G "WriteIntEeprom" 8 31 "int8(int8 address,int8 data)"
V L "address" 8 32 "int8"
F G "ReadIntEeprom" 8 32 "int8(int8 address)"
V L "Minizekunden" 8 34 "int16"
F G "DelayMs" 8 34 "int8(int16 Minizekunden)"
V L "muesekunden" 8 36 "int8"
F G "DelayUs" 8 36 "int8(int8 muesekunden)"
V L "muesekunden" 8 38 "int16"
F G "DelayUsLong" 8 38 "int8(int16 muesekunden)" "to make DelayUs as independent as possible from ccs compiler........"
D G "hi" 8 47 "(x)  (*(&x+1))"
D G "lo" 8 48 "(x)  (*(&x))"
D G "EEPROM_ADDRESS_ID" 8 49 "0		" "start addresss for ID in internal EEPROM"
D G "PIN_0_ON" 8 65 "#asm   bsf PIC_PORTB,0 #endasm"
D G "PIN_0_OFF" 8 66 "#asm   bcf PIC_PORTB,0 #endasm"
D G "PIN_1_ON" 8 67 "#asm   bsf PIC_PORTB,1 #endasm"
D G "PIN_1_OFF" 8 68 "#asm   bcf PIC_PORTB,1 #endasm"
D G "PIN_2_ON" 8 69 "#asm   bsf PIC_PORTB,2 #endasm"
D G "PIN_2_OFF" 8 70 "#asm   bcf PIC_PORTB,2 #endasm"
D G "PIN_3_ON" 8 71 "#asm   bsf PIC_PORTB,3 #endasm"
D G "PIN_3_OFF" 8 72 "#asm   bcf PIC_PORTB,3 #endasm"
D G "PIN_4_ON" 8 73 "#asm   bsf PIC_PORTB,4 #endasm"
D G "PIN_4_OFF" 8 74 "#asm   bcf PIC_PORTB,4 #endasm"
D G "PIN_5_ON" 8 75 "#asm   bsf PIC_PORTB,5 #endasm"
D G "PIN_5_OFF" 8 76 "#asm   bcf PIC_PORTB,5 #endasm"
D G "PIN_6_ON" 8 77 "#asm   bsf PIC_PORTB,6 #endasm"
D G "PIN_6_OFF" 8 78 "#asm   bcf PIC_PORTB,6 #endasm"
D G "PIN_7_ON" 8 79 "#asm   bsf PIC_PORTB,7 #endasm"
D G "PIN_7_OFF" 8 80 "#asm   bcf PIC_PORTB,7 #endasm"
V L "Minizekunden" 8 84 "int16" "ZEKUNDEN ZZZZEKUNDEN"
F G "DelayMs" 8 85 "int8(int16 Minizekunden)"
C L "DelayUs" 8 1 1 "FUNCTION"
V L "muesekunden" 8 98 "int8"
F G "DelayUs" 8 99 "int8(int8 muesekunden)"
C L "DelayUsLong" 8 1 1 "FUNCTION"
V L "muesekunden" 8 120 "int16"
F G "DelayUsLong" 8 121 "int8(int16 muesekunden)"
V L "address" 8 141 "int8"
V L "data" 8 141 "int8"
F G "WriteIntEeprom" 8 142 "int8(int8 address,int8 data)"
C L "WriteIntEeprom" 8 1 1 "FUNCTION"
C L "WriteIntEeprom" 8 1 1 "FUNCTION"
C L "WriteIntEeprom" 8 1 1 "FUNCTION"
C L "WriteIntEeprom" 8 1 1 "FUNCTION"
C L "WriteIntEeprom" 8 1 1 "FUNCTION"
C L "WriteIntEeprom" 8 1 1 "FUNCTION"
C L "WriteIntEeprom" 8 1 1 "FUNCTION"
C L "WriteIntEeprom" 8 1 1 "FUNCTION"
C L "WriteIntEeprom" 8 1 1 "FUNCTION"
C L "WriteIntEeprom" 8 1 1 "FUNCTION"
C L "WriteIntEeprom" 8 1 1 "FUNCTION"
V L "address" 8 161 "int8"
F G "ReadIntEeprom" 8 162 "int8(int8 address,int8 data)"
C L "ReadIntEeprom" 8 1 1 "FUNCTION"
C L "ReadIntEeprom" 8 1 1 "FUNCTION"
C L "ReadIntEeprom" 8 1 1 "FUNCTION"
C L "ReadIntEeprom" 8 1 1 "FUNCTION"
C L "ReadIntEeprom" 8 1 1 "FUNCTION"
C L "ADCEnable" 8 173 1 "*"
F G "ADCEnable" 8 176 "int8(int8 address,int8 data)" "* Checks whether the given channel is already set for"
C L "ADCEnable" 8 178 1 "*"
C L "ADCEnable" 8 178 1 "*"
C L "ADCEnable" 8 178 1 "*"
V L "channel" 8 184 "int8"
F G "ADCIsChSet" 8 184 "int8(int8 channel)" "* Sets a given channel for A/D conversion"
C L "ADCIsChSet" 8 186 1 "*"
V L "channel" 8 190 "int8"
F G "ADCSetCh" 8 190 "int8(int8 channel)" "* Sets the sampling speed for A/D conversion"
C L "ADCSetCh" 8 192 1 "*"
C L "ADCSetCh" 8 192 1 "*"
C L "ADCSetCh" 8 192 1 "*"
V L "speed" 8 199 "int8"
F G "ADCSetClock" 8 199 "int8(int8 speed)" "* Reads a sampled value from the A/D converter. Only one byte."
C L "ADCSetClock" 8 201 1 "*"
F G "ADCRead8" 8 205 "int8()" "* Reads a sampled value from the A/D converter. Full 10bit of the ADC"
C L "ADCRead8" 8 207 1 "*"
F G "ADCRead10" 8 211 "int16()" "* Initialises the A/D converter"
C L "ADCRead10" 8 216 1 "*"
F G "ADCInit" 8 220 "int8()" "* Disables the A/D converter"
F G "ADCDisable" 8 225 "int8()"
F G "ADCDisable" 8 229 "int8()"
C L "ADCDisable" 8 216 1 "FUNCTION"
F G "ADCInit" 8 234 "int8()"
C L "ADCInit" 8 216 1 "FUNCTION"
C L "ADCInit" 8 216 1 "FUNCTION"
C L "ADCInit" 8 216 1 "FUNCTION"
V L "conf" 8 240 "analog_config"
F G "ADCConfig" 8 241 "int8(analog_config conf)"
F G "ADCEnable" 8 272 "int8()"
C L "ADCEnable" 8 216 1 "FUNCTION"
V L "channel" 8 277 "int8"
F G "ADCIsChSet" 8 278 "int8(int8 channel)"
V L "actual" 8 279 "int8"
V L "channel" 8 286 "int8"
F G "ADCSetCh" 8 287 "int8(int8 channel)"
C L "ADCSetCh" 8 216 1 "FUNCTION"
V L "speed" 8 296 "int8"
F G "ADCSetClock" 8 297 "int8(int8 speed)"
C L "ADCSetClock" 8 216 1 "FUNCTION"
F G "ADCRead8" 8 303 "int8(int8 speed)"
V L "value" 8 304 "int8"
C L "ADCRead8" 8 216 1 "FUNCTION"
C L "ADCRead8" 8 216 1 "FUNCTION"
C L "ADCRead8" 8 216 1 "FUNCTION"
F G "ADCRead10" 8 315 "int16()"
V L "value" 8 316 "int16"
V L "temp" 8 317 "int8"
C L "ADCRead10" 8 216 1 "FUNCTION"
C L "ADCRead10" 8 216 1 "FUNCTION"
C L "ADCRead10" 8 216 1 "FUNCTION"
F G "ADCInProgress" 8 333 "int8()"
V L "wait_time" 8 345 "int16"
F G "Uart1WaitForRx" 8 345 "int8(int16 wait_time)"
F G "Uart1Enable" 8 346 "int8()"
F G "Uart1Disable" 8 347 "int8()"
V L "speed" 8 348 "int8"
V L "sync_mode" 8 348 "int8"
V L "bits" 8 348 "int8"
F G "Uart1Init" 8 348 "int8(int8 speed,int8 sync_mode,int8 bits)"
F G "Uart1CheckError" 8 349 "int8()"
F G "Uart1FlushReceive" 8 350 "int8()"
F G "Uart1WaitForTxEnd" 8 351 "int8()"
F G "Uart1DataIsThere" 8 352 "int8()"
V L "data" 8 353 "int8"
F G "Uart1SendByte" 8 353 "int8(int8 data)"
F G "Uart1GetByte" 8 354 "int8()" "void RPCSerialSendByte(int data)"
V L "data" 8 359 "int8"
F G "Uart1SendByte" 8 360 "int8(int8 data)"
C L "Uart1SendByte" 8 216 1 "FUNCTION"
F G "Uart1GetByte" 8 366 "int8(int8 data)"
C L "Uart1DataIsThere" 8 216 1 "FUNCTION"
F G "Uart1DataIsThere" 8 373 "int8(int8 data)"
F G "Uart1TxBusy" 8 378 "int8(int8 data)"
C L "Uart1WaitForTxEnd" 8 216 1 "FUNCTION"
F G "Uart1WaitForTxEnd" 8 384 "int8()"
C L "Uart1FlushReceive" 8 216 2 "FUNCTION"
F G "Uart1FlushReceive" 8 393 "int8()"
V L "nirvana" 8 394 "int8"
C L "Uart1CheckError" 8 216 1 "FUNCTION"
F G "Uart1CheckError" 8 404 "int8()"
V L "error" 8 405 "int8"
V L "buff" 8 406 "int8"
C L "Uart1CheckError" 8 216 1 "FUNCTION"
C L "Uart1CheckError" 8 216 1 "FUNCTION"
C L "Uart1Init" 8 216 2 "FUNCTION"
V L "speed" 8 430 "int8"
V L "sync_mode" 8 430 "int8"
V L "bits" 8 430 "int8"
F G "Uart1Init" 8 431 "int8(int8 speed,int8 sync_mode,int8 bits)"
C L "Uart1Init" 8 216 1 "FUNCTION"
C L "Uart1Init" 8 216 1 "FUNCTION"
C L "Uart1Init" 8 216 1 "FUNCTION"
C L "Uart1Init" 8 216 1 "FUNCTION"
C L "Uart1Init" 8 216 1 "FUNCTION"
C L "Uart1Init" 8 216 1 "FUNCTION"
C L "Uart1Init" 8 216 1 "FUNCTION"
C L "Uart1Init" 8 216 1 "FUNCTION"
C L "Uart1Init" 8 216 1 "FUNCTION"
C L "Uart1Init" 8 216 1 "FUNCTION"
C L "Uart1Init" 8 216 1 "FUNCTION"
C L "Uart1Init" 8 216 1 "FUNCTION"
C L "Uart1Init" 8 216 1 "FUNCTION"
C L "Uart1Disable" 8 216 1 "FUNCTION"
F G "Uart1Disable" 8 479 "int8(int8 speed,int8 sync_mode,int8 bits)"
C L "Uart1Disable" 8 216 1 "FUNCTION"
C L "Uart1Disable" 8 216 1 "FUNCTION"
C L "Uart1Disable" 8 216 1 "FUNCTION"
C L "Uart1Disable" 8 216 1 "FUNCTION"
C L "Uart1Disable" 8 216 1 "FUNCTION"
C L "Uart1Enable" 8 216 1 "FUNCTION"
F G "Uart1Enable" 8 491 "int8(int8 speed,int8 sync_mode,int8 bits)"
C L "Uart1Enable" 8 216 1 "FUNCTION"
C L "Uart1Enable" 8 216 1 "FUNCTION"
C L "Uart1Enable" 8 216 1 "FUNCTION"
C L "Uart1WaitForRx" 8 216 2 "FUNCTION"
V L "wait_time" 8 504 "int16"
F G "Uart1WaitForRx" 8 505 "int8(int16 wait_time,int8 sync_mode,int8 bits)"
C L "Uart1WaitForRx" 8 216 1 "FUNCTION"
C L "Timer3Init" 8 216 1 "FUNCTION"
V L "conf" 8 518 "timer_config"
F G "Timer3Init" 8 519 "int8(timer_config conf,int8 sync_mode,int8 bits)"
C L "Timer3Init" 8 216 1 "FUNCTION"
C L "Timer3Init" 8 216 2 "FUNCTION"
F G "Timer3GetHi" 8 531 "int8(int8 bits)"
F G "Timer3GetLo" 8 535 "int8()"
V L "val" 8 538 "int8"
F G "Timer3SetHi" 8 539 "int8(int8 val)"
V L "val" 8 542 "int8"
F G "Timer3SetLo" 8 543 "int8(int8 val)"
V L "mode" 8 559 "int8"
F G "SPISetMode" 8 560 "int8(int8 mode)" "first set the pins correctly"
C L "SPISetMode" 8 216 1 "FUNCTION"
C L "SPISetMode" 8 216 1 "FUNCTION"
C L "SPISetMode" 8 216 1 "FUNCTION"
C L "SPISetMode" 8 216 1 "FUNCTION"
V L "mode" 8 582 "int8"
F G "SPIInit" 8 583 "int8(int8 mode)" "first set the pins correctly"
C L "SPIInit" 8 216 1 "FUNCTION"
C L "SPIInit" 8 216 1 "FUNCTION"
C L "SPIInit" 8 216 1 "FUNCTION"
C L "SPIShift" 8 216 1 "FUNCTION"
V L "out" 8 599 "int8"
F G "SPIShift" 8 600 "int8(int8 out)"
V L "in" 8 601 "int8"
V L "dummy" 8 601 "int8"
C L "SPIShift" 8 216 1 "FUNCTION"
D G "ntohl" 8 621 "(x)  	((uint32_t)((((uint32_t)(x) & 0x000000ffU) << 24) |  		   (((uint32_t)(x) & 0x0000ff00U) <<  8) |  		   (((uint32_t)(x) & 0x00ff0000U) >>  8) |  		   (((uint32_t)(x) & 0xff000000U) >> 24)))"
D G "ntohs" 8 627 "(x)  	((uint16_t)((((uint16_t)(x) & 0x00ff) << 8) |  		   (((uint16_t)(x) & 0xff00) >> 8)))"
D G "htons" 8 633 "(x) ntohs(x)"
D G "htonl" 8 634 "(x) ntohl(x)"
C G "" 9 1 1 "*"
C G "" 9 1 1 "*"
C G "" 9 1 1 "*"
C G "" 9 1 1 "*"
C G "" 9 1 1 "*"
C G "" 9 1 1 "*"
C G "" 9 1 1 "*"
C G "" 9 1 1 "*"
C G "" 9 1 1 "*"
C G "" 9 1 1 "*"
C G "" 9 1 1 "*"
C G "" 9 1 1 "*"
C G "" 9 1 1 "*"
C G "" 9 1 1 "*"
C G "" 9 1 1 "*"
C G "" 9 1 1 "*"
C G "" 9 1 1 "*"
C G "" 9 1 1 "*"
C G "" 9 1 1 "*"
C G "" 9 1 1 "*"
C G "" 9 1 1 "*"
C G "" 9 1 1 "*"
C G "" 9 1 1 "*"
C G "" 9 1 1 "*"
C G "" 9 1 1 "*"
C G "" 9 1 1 "*"
C G "" 9 1 2 "*"
C G "" 9 35 1 "*"
C G "" 9 35 1 "*"
C G "" 9 35 1 "*"
C G "" 9 35 1 "*"
C G "" 9 35 1 "*"
C G "" 9 35 1 "*"
C G "" 9 35 1 "*"
C G "" 9 35 1 "*"
C G "" 9 35 1 "*"
C G "" 9 35 1 "*"
C G "" 9 35 1 "*"
C G "" 9 35 1 "*"
C G "" 9 35 1 "*"
C G "" 9 35 1 "*"
C G "" 9 35 1 "*"
C G "" 9 35 1 "*"
C G "" 9 35 1 "*"
C G "" 9 35 1 "*"
C G "" 9 35 1 "*"
C G "" 9 35 1 "*"
C G "" 9 35 1 "*"
D G "__WDT18FXX20_C__" 9 67 "003"
D G "VALID_PROCESSOR" 9 72 "1"
D G "WDT_DEFAULT" 9 77 "0	" "for values > 7. values see below."
V L "timeout" 9 82 "int8"
F G "WDTConfig" 9 82 "int8(int8 timeout)" "same code for 18f6620 and 18f6720"
V L "wdtrate" 9 85 "int8"
V L "global_interrupt_flag" 9 86 "int8"
C L "WDTConfig" 9 35 1 "FUNCTION"
C L "WDTConfig" 9 35 1 "FUNCTION"
C L "WDTConfig" 9 35 1 "FUNCTION"
C L "WDTConfig" 9 35 1 "FUNCTION"
C L "WDTConfig" 9 35 1 "FUNCTION"
C L "WDTConfig" 9 35 3 "FUNCTION"
C L "WDTConfig" 9 35 1 "FUNCTION"
C L "WDTConfig" 9 35 1 "FUNCTION"
C L "WDTConfig" 9 35 1 "FUNCTION"
C L "WDTConfig" 9 35 1 "FUNCTION"
C L "WDTConfig" 9 35 1 "FUNCTION"
C L "WDTConfig" 9 35 1 "FUNCTION"
C L "WDTConfig" 9 35 1 "FUNCTION"
C L "WDTConfig" 9 35 1 "FUNCTION"
C L "WDTConfig" 9 35 1 "FUNCTION"
C L "WDTConfig" 9 35 1 "FUNCTION"
F G "WDTEnable" 9 139 "int8()"
F G "WDTDisable" 9 143 "int8()"
F G "WDTTest" 9 147 "int8()"
V L "test" 9 148 "int8"
F G "WDTReadValue" 9 154 "int8()"
V L "value" 9 155 "int8"
C L "WDTReadValue" 9 35 1 "FUNCTION"
C L "WDTReadValue" 9 35 1 "FUNCTION"
C G "" 10 1 1 "*"
C G "" 10 1 1 "*"
C G "" 10 1 1 "*"
C G "" 10 1 1 "*"
D G "__BALLSWITCH_C__" 10 12 "002"
C L "BallswitchInit" 10 1 1 "FUNCTION"
F G "BallswitchInit" 10 20 "int8()" "outer on input, inner all high"
C L "BallswitchDisable" 10 1 1 "FUNCTION"
F G "BallswitchDisable" 10 33 "int8()"
C L "BallswitchGet" 10 1 1 "FUNCTION"
F G "BallswitchGet" 10 44 "int8()"
C G "" 11 1 1 "*"
C G "" 11 1 1 "*"
C G "" 11 1 1 "*"
C G "" 11 1 1 "*"
C G "" 11 1 1 "*"
C G "" 11 1 1 "*"
C G "" 11 1 1 "*"
C G "" 11 1 1 "*"
C G "" 11 1 1 "*"
C G "" 11 1 1 "*"
C G "" 11 1 1 "*"
C G "" 11 1 1 "*"
C G "" 11 1 1 "*"
C G "" 11 1 1 "*"
C G "" 11 1 1 "*"
C G "" 11 1 2 "*"
D G "__DS2431_C__" 11 28 "008"
D G "ID_CHIP_COMM_READ_ROM" 11 32 "0x33"
D G "ID_CHIP_COMM_SKIP_ROM" 11 33 "0xCC"
D G "ID_CHIP_COMM_READ_MEMORY" 11 34 "0xF0"
D G "ID_CHIP_COMM_WRITE_SCRATCHPAD" 11 35 "0x0F"
D G "ID_CHIP_COMM_COPY_SCRATCHPAD" 11 36 "0x55"
D G "ID_CHIP_ADDRESS_HI" 11 38 "0x00"
D G "ID_CHIP_ES_BYTE" 11 39 "0x07"
D G "ID_CHIP_PRODUCTION_ID_ADDRESS" 11 41 "0"
C L "IDChipInit" 11 1 1 "FUNCTION"
F G "IDChipInit" 11 45 "int8()"
F G "IDChipOn" 11 46 "int8()"
F G "IDChipOff" 11 47 "int8()"
V L "data" 11 50 "*int8"
F G "IDChipGetId" 11 50 "int8(*int8 data)"
V L "data" 11 51 "*int8"
F G "IDChipCheckCRCID" 11 51 "int8(*int8 data)"
V L "address" 11 52 "int8"
V L "number_bytes" 11 52 "int8"
V L "buff" 11 52 "*int8"
F G "IDChipReadEeprom" 11 52 "int8(int8 address,int8 number_bytes,*int8 buff)"
V L "address" 11 53 "int8"
V L "buff" 11 53 "*int8"
F G "IDChipWriteEeprom" 11 53 "int8(int8 address,*int8 buff)"
V L "crc" 11 54 "*int8"
V L "address" 11 54 "int8"
V L "buff" 11 54 "*int8"
F G "IDChipCheckCRCScratchpad" 11 54 "int8(*int8 crc,int8 address,*int8 buff)"
V L "production_id_hi" 11 55 "int8"
V L "production_id_lo" 11 55 "int8"
F G "IDChipWriteProductionID" 11 55 "int8(int8 production_id_hi,int8 production_id_lo)"
F G "OneWireHigh" 11 58 "int8()"
F G "OneWireLow" 11 60 "int8()"
F G "OneWireInit" 11 61 "int8()"
F G "OneWireRead" 11 64 "int8()"
F G "OneWirePresencePulse" 11 65 "int8()"
V L "data" 11 66 "int8"
F G "OneWireWriteByte" 11 66 "int8(int8 data)"
F G "OneWireReadByte" 11 67 "int8()" "tables"
V G "CRC8_TABLE" 11 71 "int8[256]"
V G "CRC16_TABLE_LO" 11 91 "int8[256]"
V G "CRC16_TABLE_HI" 11 127 "int8[256]"
F G "IDChipInit" 11 165 "int8()"
F G "IDChipOn" 11 173 "int8()"
F G "IDChipOff" 11 179 "int8()"
C L "IDChipGetId" 11 1 2 "FUNCTION"
V L "buff" 11 187 "*int8"
F G "IDChipGetId" 11 188 "int8(*int8 buff)"
V L "res" 11 189 "int8"
V L "i" 11 190 "int8"
V L "data_reserved" 11 191 "int8[8]"
V L "data" 11 192 "*int8"
V L "data" 11 252 "*int8"
F G "IDChipCheckCRCID" 11 253 "int8(*int8 data)"
V L "crc" 11 254 "int8"
V L "i" 11 255 "int8"
C L "IDChipReadEeprom" 11 1 2 "FUNCTION"
V L "address" 11 270 "int8"
V L "number_bytes" 11 270 "int8"
V L "buff" 11 270 "*int8"
F G "IDChipReadEeprom" 11 271 "int8(int8 address,int8 number_bytes,*int8 buff)"
V L "res" 11 272 "int8"
V L "i" 11 273 "int8"
C L "IDChipWriteEeprom" 11 1 3 "FUNCTION"
V L "address" 11 300 "int8"
V L "buff" 11 300 "*int8"
F G "IDChipWriteEeprom" 11 301 "int8(int8 address,*int8 buff)"
V L "res" 11 302 "int8"
V L "crc" 11 303 "int8[2]"
V L "dummy" 11 304 "int8"
C L "IDChipWriteEeprom" 11 1 2 "FUNCTION"
C L "IDChipWriteEeprom" 11 1 1 "FUNCTION"
C L "IDChipCheckCRCScratchpad" 11 1 1 "FUNCTION"
V L "crc" 11 360 "*int8"
V L "address" 11 360 "int8"
V L "buff" 11 360 "*int8"
F G "IDChipCheckCRCScratchpad" 11 361 "int8(*int8 crc,int8 address,*int8 buff)"
V L "crc_hi" 11 362 "int8"
V L "crc_lo" 11 363 "int8"
V L "dummy" 11 364 "int8"
V L "i" 11 365 "int8"
C L "IDChipCheckCRCScratchpad" 11 1 2 "FUNCTION"
C L "IDChipCheckCRCScratchpad" 11 1 2 "FUNCTION"
C L "IDChipCheckCRCScratchpad" 11 1 2 "FUNCTION"
C L "IDChipCheckCRCScratchpad" 11 1 2 "FUNCTION"
C L "IDChipWriteProductionID" 11 1 1 "FUNCTION"
V L "production_id_hi" 11 405 "int8"
V L "production_id_lo" 11 405 "int8"
F G "IDChipWriteProductionID" 11 406 "int8(int8 production_id_hi,int8 production_id_lo)"
V L "buff" 11 407 "int8[8]"
V L "buff_p" 11 408 "*int8"
V L "i" 11 409 "int8"
D G "PIN_ONE_WIRE" 11 423 "PIN_ID_CHIP_DATA"
D G "TRIS_ONE_WIRE" 11 424 "TRIS_ID_CHIP_DATA"
F G "OneWireHigh" 11 429 "int8()"
F G "OneWireLow" 11 436 "int8()"
C L "OneWireLow" 11 1 1 "FUNCTION"
C L "OneWireLow" 11 1 1 "FUNCTION"
F G "OneWireRead" 11 444 "int8()"
C L "OneWirePresencePulse" 11 1 1 "FUNCTION"
F G "OneWirePresencePulse" 11 452 "int8()"
V L "buff" 11 453 "int8"
C L "OneWirePresencePulse" 11 1 1 "FUNCTION"
C L "OneWireWriteByte" 11 1 1 "FUNCTION"
V L "data" 11 470 "int8"
F G "OneWireWriteByte" 11 471 "int8(int8 data)"
V L "i" 11 472 "int8"
C L "OneWireReadByte" 11 1 1 "FUNCTION"
F G "OneWireReadByte" 11 494 "int8()"
V L "i" 11 495 "int8"
V L "result" 11 495 "int8"
C L "OneWireReadByte" 11 1 1 "FUNCTION"
C G "" 12 1 1 "*"
C G "" 12 1 1 "*"
D G "__FLASH_C__" 12 15 "001"
D G "FLASH_DONT_CARE" 12 29 "0x00"
D G "FLASH_BUFFER_1_WRITE" 12 32 "0x84"
D G "FLASH_BUFFER_2_WRITE" 12 33 "0x87"
D G "FLASH_BUFFER_1_READ" 12 34 "0x54"
D G "FLASH_BUFFER_2_READ" 12 35 "0x56"
D G "FLASH_STATUS_READ" 12 37 "0x57"
D G "FLASH_FLASH_CONTINUOUS_READ" 12 38 "0x68"
D G "FLASH_PAGE_READ" 12 39 "0x52		" "doesn't stop automatically, starts again from beginning of page..."
D G "FLASH_BUFFER_1_TO_PAGE_ERASE_PROGRAM" 12 40 "0x83"
D G "FLASH_BUFFER_2_TO_PAGE_ERASE_PROGRAM" 12 42 "0x86"
D G "FLASH_BUFFER_1_TO_PAGE_PROGRAM" 12 43 "0x88		" "has to be erased before."
D G "FLASH_BUFFER_2_TO_PAGE_PROGRAM" 12 44 "0x89		" "has to be erased before."
D G "FLASH_PAGE_ERASE" 12 45 "0x81"
D G "FLASH_BLOCK_ERASE" 12 46 "0x50		" "erases 8 pages, addresses from 0 to 255."
D G "FLASH_PAGE_PROGRAM_THRU_BUFFER_1" 12 48 "0x82"
D G "FLASH_PAGE_PROGRAM_THRU_BUFFER_2" 12 49 "0x85"
D G "FLASH_PAGE_TO_BUFFER_1_TRANSFER" 12 51 "0x53"
D G "FLASH_PAGE_TO_BUFFER_2_TRANSFER" 12 52 "0x55"
D G "FLASH_PAGE_TO_BUFFER_1_COMPARE" 12 53 "0x53"
D G "FLASH_PAGE_TO_BUFFER_2_COMPARE" 12 54 "0x55" "??? opcode"
D G "FLASH_PAGE_REWRITE_THRU_BUFFER_1" 12 55 "0x58"
D G "FLASH_PAGE_REWRITE_THRU_BUFFER_2" 12 56 "0x59"
D G "FLASH_ID_ADDRESS" 12 61 "540408		" "start address for ID in external flash: last page, first byte"
V G "flash_old_write_address" 12 68 "int32"
V G "flash_write_done" 12 69 "int1"
V G "flash_active_write_buffer" 12 70 "int8"
F G "FlashEnable" 12 76 "int8()"
F G "FlashDisable" 12 83 "int8()"
F G "FlashOff" 12 89 "int8()"
C L "FlashOff" 12 8 1 "FUNCTION"
F G "FlashOn" 12 94 "int8()"
C L "FlashOn" 12 8 1 "FUNCTION"
F G "FlashInit" 12 101 "int8()" "set the states correctly"
C L "FlashInit" 12 8 1 "FUNCTION"
C L "FlashInit" 12 8 1 "FUNCTION"
C L "FlashInit" 12 8 1 "FUNCTION"
V L "pos" 12 121 "int16"
V L "data" 12 121 "*int8"
V L "len" 12 121 "int16"
F G "FlashReadSequenceFromBuffer1" 12 122 "int8(int16 pos,*int8 data,int16 len)"
V L "buff" 12 123 "int8"
V L "i" 12 124 "int16"
C L "FlashReadSequenceFromBuffer1" 12 8 1 "FUNCTION"
V L "pos" 12 145 "int16"
V L "data" 12 145 "*int8"
V L "len" 12 145 "int16"
F G "FlashReadSequenceFromBuffer2" 12 146 "int8(int16 pos,*int8 data,int16 len)"
V L "buff" 12 147 "int8"
V L "i" 12 148 "int16"
C L "FlashReadSequenceFromBuffer2" 12 8 1 "FUNCTION"
V L "pos" 12 168 "int16"
F G "FlashReadFromBuffer1" 12 169 "int8(int16 pos)"
V L "buff" 12 170 "int8"
C L "FlashReadFromBuffer1" 12 8 1 "FUNCTION"
C L "FlashWriteToBuffer1" 12 8 1 "FUNCTION"
V L "addr" 12 188 "int16"
V L "b" 12 188 "int8"
F G "FlashWriteToBuffer1" 12 189 "int8(int16 addr,int8 b)"
V L "buff" 12 190 "int8"
C L "FlashWriteToBuffer2" 12 8 1 "FUNCTION"
V L "addr" 12 206 "int16"
V L "b" 12 206 "int8"
F G "FlashWriteToBuffer2" 12 207 "int8(int16 addr,int8 b)"
V L "buff" 12 208 "int8"
F G "FlashReady" 12 228 "int8()"
V L "status" 12 229 "int8"
F G "FlashWaitForReady" 12 240 "int8()"
C L "FlashWaitForReady" 12 8 1 "FUNCTION"
C L "FlashInSamePageOld" 12 8 1 "FUNCTION"
V L "addr1" 12 245 "int32"
V L "addr2" 12 245 "int32"
F G "FlashInSamePageOld" 12 246 "int8(int32 addr1,int32 addr2)"
V L "addr1" 12 261 "int32"
V L "addr2" 12 261 "int32"
F G "FlashInSamePage" 12 262 "int8(int32 addr1,int32 addr2)"
V L "flash_address" 12 275 "int32"
F G "FlashSendAddress" 12 276 "int8(int32 flash_address)"
V L "pagenr" 12 277 "int16"
V L "bytenr" 12 278 "int16"
C L "FlashSendAddress" 12 8 4 "FUNCTION"
C L "FlashSendAddress" 12 8 3 "FUNCTION"
V L "flash_addr" 12 305 "int32"
F G "FlashGetBytePos_old" 12 306 "int16(int32 flash_addr)"
V L "pagenr" 12 307 "int16"
V L "bytenr" 12 308 "int16"
V L "flash_addr" 12 315 "int32"
F G "FlashGetBytePos" 12 316 "int16(int32 flash_addr)"
C L "FlashSetReadPointer" 12 8 2 "FUNCTION"
V L "flash_start_address" 12 323 "int32"
F G "FlashSetReadPointer" 12 324 "int8(int32 flash_start_address)"
C L "FlashStoreBuffer1" 12 8 1 "FUNCTION"
V L "flash_address" 12 338 "int32"
F G "FlashStoreBuffer1" 12 339 "int8(int32 flash_address)"
C L "FlashStoreBuffer1" 12 8 1 "FUNCTION"
C L "FlashStoreBuffer2" 12 8 1 "FUNCTION"
V L "flash_address" 12 349 "int32"
F G "FlashStoreBuffer2" 12 350 "int8(int32 flash_address)"
C L "FlashStoreBuffer2" 12 8 1 "FUNCTION"
C L "FlashLoadToBuffer1" 12 8 1 "FUNCTION"
V L "flash_address" 12 359 "int32"
F G "FlashLoadToBuffer1" 12 360 "int8(int32 flash_address)"
C L "FlashLoadToBuffer1" 12 8 1 "FUNCTION"
C L "FlashLoadToBuffer2" 12 8 1 "FUNCTION"
V L "flash_address" 12 369 "int32"
F G "FlashLoadToBuffer2" 12 370 "int8(int32 flash_address)"
C L "FlashLoadToBuffer2" 12 8 1 "FUNCTION"
C L "FlashFlush" 12 8 1 "FUNCTION"
F G "FlashFlush" 12 381 "int8()"
V L "old_addr" 12 407 "int32"
V L "new_addr" 12 407 "int32"
F G "FlashChangeWritePage" 12 408 "int8(int32 old_addr,int32 new_addr)" "the active page has changed and the content of RAM has not yet been saved"
C L "FlashChangeWritePage" 12 8 1 "FUNCTION"
C L "FlashChangeWritePage" 12 8 1 "FUNCTION"
C L "FlashChangeWritePage" 12 8 1 "FUNCTION"
C L "FlashWriteSequence" 12 8 3 "FUNCTION"
V L "flash_start_address" 12 446 "int32"
V L "data" 12 446 "*int8"
V L "count" 12 446 "int16"
F G "FlashWriteSequence" 12 447 "int8(int32 flash_start_address,*int8 data,int16 count)"
V L "i" 12 448 "int16"
V L "buffer_pos" 12 448 "int16"
V L "write_address" 12 449 "int32"
C L "FlashWriteSequence" 12 8 1 "FUNCTION"
C L "FlashWriteSequence" 12 8 1 "FUNCTION"
C L "FlashWriteSequence" 12 8 1 "FUNCTION"
C L "FlashWriteSequence" 12 8 1 "FUNCTION"
V L "flash_start_address" 12 508 "int32"
V L "data" 12 508 "*int8"
V L "count" 12 508 "int16"
F G "FlashReadContinuous" 12 509 "int8(int32 flash_start_address,*int8 data,int16 count)"
V L "pos" 12 511 "int16"
V L "flash_start_address" 12 532 "int32"
V L "data" 12 532 "*int8"
V L "count" 12 532 "int16"
F G "FlashReadSequence" 12 533 "int8(int32 flash_start_address,*int8 data,int16 count)"
V L "pos" 12 534 "int16"
V L "saveCount" 12 534 "int16"
V L "flashReadBeforeRAMCount" 12 534 "int16" "A write before a read may create a true dependency and therefore result"
C L "FlashReadSequence" 12 8 10 "FUNCTION"
C L "FlashReadSequence" 12 8 2 "FUNCTION"
C L "FlashReadSequence" 12 8 1 "FUNCTION"
C L "FlashReadSequence" 12 8 1 "FUNCTION"
C L "FlashReadSequence" 12 8 1 "FUNCTION"
C L "FlashReadSequence" 12 8 1 "FUNCTION"
C L "FlashReadSequence" 12 8 1 "FUNCTION"
C L "FlashReadSequence" 12 8 1 "FUNCTION"
C L "FlashReadSequence" 12 8 1 "FUNCTION"
C L "FlashReadSequence" 12 8 3 "FUNCTION"
C L "FlashReadSequence" 12 8 2 "FUNCTION"
C L "FlashReadSequence" 12 8 1 "FUNCTION"
C L "FlashReadSequence" 12 8 1 "FUNCTION"
C L "FlashReadSequence" 12 8 1 "FUNCTION"
C L "FlashReadSequence" 12 8 1 "FUNCTION"
C L "FlashReadSequence" 12 8 1 "FUNCTION"
C L "FlashReadSequence" 12 8 1 "FUNCTION"
C L "FlashReadSequence" 12 8 1 "FUNCTION"
C L "FlashReadSequence" 12 8 1 "FUNCTION"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
D G "TONE_C3" 13 18 "130"
D G "TONE_D3" 13 19 "146"
D G "TONE_E3" 13 20 "164"
D G "TONE_F3" 13 21 "174"
D G "TONE_G3" 13 22 "196"
D G "TONE_A3" 13 23 "220"
D G "TONE_H3" 13 24 "246"
D G "TONE_C4" 13 26 "261"
D G "TONE_D4" 13 27 "293"
D G "TONE_E4" 13 28 "329"
D G "TONE_F4" 13 29 "349"
D G "TONE_G4" 13 30 "392"
D G "TONE_A4" 13 31 "440"
D G "TONE_H4" 13 32 "493"
D G "TONE_C5" 13 34 "523"
D G "TONE_D5" 13 35 "587"
D G "TONE_E5" 13 36 "659"
D G "TONE_F5" 13 37 "698"
D G "TONE_G5" 13 38 "783"
D G "TONE_A5" 13 39 "880"
D G "TONE_H5" 13 40 "987"
D G "TONE_C6" 13 42 "1046"
D G "TONE_D6" 13 43 "1174"
D G "TONE_E6" 13 44 "1318"
D G "TONE_F6" 13 45 "1396"
D G "TONE_G6" 13 46 "1567"
D G "TONE_A6" 13 47 "1760"
D G "TONE_H6" 13 48 "1975"
D G "TONE_C7" 13 50 "2093"
D G "TONE_D7" 13 51 "2349"
D G "TONE_E7" 13 52 "2637"
D G "TONE_F7" 13 53 "2793"
D G "TONE_G7" 13 54 "3135"
D G "TONE_A7" 13 55 "3520"
D G "TONE_H7" 13 56 "3951"
D G "TONE_C8" 13 58 "4186"
D G "TONE_D8" 13 59 "4700"
D G "TONE_E8" 13 60 "5280"
D G "TONE_F8" 13 61 "5586"
D G "TONE_G8" 13 62 "6270"
D G "TONE_A8" 13 63 "7040"
D G "TONE_H8" 13 64 "7900"
D G "TONE_C9" 13 66 "8370"
C G "" 13 68 1 "*"
V G "sound_volume" 13 75 "int8"
F G "BuzzerOff" 13 78 "int8()"
V L "vol" 13 83 "int8"
F G "BuzzerSetVolume" 13 84 "int8(int8 vol)"
F G "BuzzerGetVolume" 13 90 "int8()"
C L "BuzzerInit" 13 95 1 "*"
F G "BuzzerInit" 13 99 "int8()"
C L "BuzzerInit" 13 95 1 "FUNCTION"
C L "BuzzerInit" 13 95 1 "FUNCTION"
C L "BuzzerInit" 13 95 1 "FUNCTION"
C L "BuzzerTone" 13 95 1 "FUNCTION"
V L "frequency" 13 108 "int16"
V L "duration" 13 108 "int16"
F G "BuzzerTone" 13 109 "int8(int16 frequency,int16 duration)"
V L "i" 13 110 "int16"
V L "T" 13 110 "int16"
V L "cycles" 13 110 "int16"
V L "f" 13 111 "float"
V L "d" 13 111 "float"
V L "tt" 13 111 "float"
C L "BuzzerTone" 13 95 1 "FUNCTION"
F G "BuzzerSweepUp" 13 133 "int8()"
V L "T" 13 134 "int16"
F G "BuzzerSweepDown" 13 147 "int8()"
V L "T" 13 148 "int16"
V L "song" 13 160 "int8"
F G "BuzzerPlayASong" 13 161 "int8(int8 song)"
C L "BuzzerPlayASong" 13 95 1 "FUNCTION"
C L "BuzzerPlayASong" 13 95 1 "FUNCTION"
C L "BuzzerPlayASong" 13 95 1 "FUNCTION"
C L "BuzzerPlayASong" 13 95 1 "FUNCTION"
C L "BuzzerPlayASong" 13 95 1 "FUNCTION"
C G "" 14 1 1 "*"
C G "" 14 1 1 "*"
D G "__PC232_C__" 14 11 "000"
F G "RFSetModeSleep" 14 15 "int8()"
F G "RFPowerModuleOn" 14 17 "int8()"
C L "RFPowerModuleOn" 14 26 2 "*"
V G "selftest_active" 14 31 "int1"
F G "PCInit" 14 35 "int8()"
V L "p_id" 14 36 "*int8"
F G "PCGetID" 14 36 "int8(*int8 p_id)"
V L "choice" 14 37 "port_settings"
F G "PCSetDigitalPorts" 14 37 "int8(port_settings choice)"
F G "PCSelfTestBoardIsThere" 14 38 "int8()"
V L "result" 14 39 "*int8"
F G "PCSelfTest" 14 39 "int8(*int8 result)"
F G "PCLedRedOn" 14 45 "int8()"
F G "PCLedBlueOn" 14 50 "int8()"
F G "PCLedRedOff" 14 55 "int8()"
F G "PCLedBlueOff" 14 60 "int8()"
C L "PCInit" 14 66 1 "*"
C L "PCInit" 14 66 1 "*"
C L "PCInit" 14 66 1 "*"
F G "PCInit" 14 71 "int8()" "* Sets the analog pins."
C L "PCInit" 14 73 1 "*"
C L "PCInit" 14 73 1 "*"
C L "PCInit" 14 73 1 "*"
C L "PCInit" 14 73 1 "*"
C L "PCInit" 14 73 1 "*"
C L "PCInit" 14 73 1 "*"
C L "PCInit" 14 73 1 "*"
V L "config" 14 85 "analog_settings"
F G "PCSetAnalogPorts" 14 85 "int8(analog_settings config)" "* Sets a given pin to a given digital state."
C L "PCSetAnalogPorts" 14 87 1 "*"
C L "PCSetAnalogPorts" 14 87 1 "*"
C L "PCSetAnalogPorts" 14 87 1 "*"
C L "PCSetAnalogPorts" 14 87 2 "*"
F G "PCInit" 14 99 "int8()"
C L "PCInit" 14 87 1 "FUNCTION"
C L "PCInit" 14 87 1 "FUNCTION"
C L "PCInit" 14 87 3 "FUNCTION"
V L "choice" 14 131 "port_settings"
F G "PCSetDigitalPorts" 14 132 "int8(port_settings choice)"
C L "PCSetDigitalPorts" 14 87 4 "FUNCTION"
C L "PCSetDigitalPorts" 14 87 4 "FUNCTION"
C L "PCSetDigitalPorts" 14 87 4 "FUNCTION"
C L "PCSelfTestBoardIsThere" 14 87 1 "FUNCTION"
F G "PCSelfTestBoardIsThere" 14 189 "int8(port_settings choice)"
V L "remember_TRISD" 14 190 "int8"
V L "remember_TRISB" 14 191 "int8"
V L "remember_PORTB" 14 192 "int8"
V L "remember_PORTD" 14 193 "int8"
V L "isthere" 14 195 "int1"
C L "PCSelfTestBoardIsThere" 14 87 1 "FUNCTION"
C L "PCSelfTestBoardIsThere" 14 87 1 "FUNCTION"
C L "PCSelfTestBoardIsThere" 14 87 1 "FUNCTION"
C L "PCSelfTestBoardIsThere" 14 87 1 "FUNCTION"
C L "PCSelfTestBoardIsThere" 14 87 1 "FUNCTION"
C L "PCSelfTest" 14 87 2 "FUNCTION"
V L "result" 14 243 "*int8"
F G "PCSelfTest" 14 244 "int8(*int8 result)"
V L "buff" 14 246 "int8"
V L "nirvana" 14 246 "int8"
C L "PCSelfTest" 14 87 1 "FUNCTION"
C L "PCSelfTest" 14 87 6 "FUNCTION"
C L "PCSelfTest" 14 87 1 "FUNCTION"
C L "PCSelfTest" 14 87 2 "FUNCTION"
C L "PCSelfTest" 14 87 2 "FUNCTION"
C L "PCSelfTest" 14 87 1 "FUNCTION"
C L "PCSelfTest" 14 87 1 "FUNCTION"
C L "PCSelfTest" 14 87 1 "FUNCTION"
C L "PCSelfTest" 14 87 1 "FUNCTION"
C L "PCSelfTest" 14 87 1 "FUNCTION"
C L "PCSelfTest" 14 87 1 "FUNCTION"
C L "PCSelfTest" 14 87 1 "FUNCTION"
C L "PCSelfTest" 14 87 1 "FUNCTION"
C L "PCSelfTest" 14 87 1 "FUNCTION"
C L "PCSelfTest" 14 87 1 "FUNCTION"
C L "PCSelfTest" 14 87 1 "FUNCTION"
C L "PCSelfTest" 14 87 1 "FUNCTION"
C L "PCSelfTest" 14 87 1 "FUNCTION"
C L "PCSelfTest" 14 87 2 "FUNCTION"
C L "PCSelfTest" 14 87 2 "FUNCTION"
C L "PCSelfTest" 14 87 1 "FUNCTION"
C L "PCSelfTest" 14 87 2 "FUNCTION"
C L "PCSelfTest" 14 87 1 "FUNCTION"
C L "PCSelfTest" 14 87 3 "FUNCTION"
C L "PCSelfTest" 14 87 1 "FUNCTION"
C L "PCSelfTest" 14 87 4 "FUNCTION"
C L "PCSelfTest" 14 87 2 "FUNCTION"
C L "PCSelfTest" 14 87 1 "FUNCTION"
C L "PCSelfTest" 14 87 3 "FUNCTION"
C L "PCSelfTest" 14 87 2 "FUNCTION"
C L "PCSelfTest" 14 87 2 "FUNCTION"
C L "PCSelfTest" 14 87 1 "FUNCTION"
C L "PCSelfTest" 14 87 1 "FUNCTION"
C L "PCSelfTest" 14 87 1 "FUNCTION"
C L "PCSelfTest" 14 87 3 "FUNCTION"
V L "config" 14 454 "analog_settings"
F G "PCSetAnalogPorts" 14 455 "int8(analog_settings config)"
V L "temp" 14 456 "int8" "delete bits 0-3"
C L "PCSetAnalogPorts" 14 87 1 "FUNCTION"
C L "PCSetAnalogPorts" 14 87 1 "FUNCTION"
C L "PCSetAnalogPorts" 14 87 1 "FUNCTION"
C L "PCSetAnalogPorts" 14 87 1 "FUNCTION"
C L "PCSetAnalogPorts" 14 87 1 "FUNCTION"
C L "PCSetAnalogPorts" 14 87 1 "FUNCTION"
C L "RPCServerSerialWaitForRx" 14 87 1 "FUNCTION"
V L "wait_time" 14 491 "int16"
F G "RPCServerSerialWaitForRx" 14 492 "int8(int16 wait_time)"
F G "RPCServerSerialEnable" 14 497 "int8()"
F G "RPCServerSerialDisable" 14 501 "int8()"
V L "speed" 14 504 "int8"
V L "sync_mode" 14 504 "int8"
V L "bits" 14 504 "int8"
F G "RPCServerSerialInit" 14 505 "int8(int8 speed,int8 sync_mode,int8 bits)"
F G "RPCServerSerialCheckError" 14 509 "int8()"
F G "RPCServerSerialFlushReceive" 14 513 "int8()"
F G "RPCServerSerialWaitForTxEnd" 14 517 "int8()"
F G "RPCServerSerialDataIsThere" 14 521 "int8()"
V L "data" 14 524 "int8"
F G "RPCServerSerialSendByte" 14 525 "int8(int8 data)"
F G "RPCServerSerialGetByte" 14 529 "int8()"
V L "conf" 14 535 "timer_config"
F G "ClockTimerInit" 14 536 "int8(timer_config conf)"
F G "ClockTimerGetHi" 14 541 "int8()"
F G "ClockTimerGetLo" 14 545 "int8()"
V L "val" 14 549 "int8"
F G "ClockTimerSetHi" 14 550 "int8(int8 val)"
V L "val" 14 553 "int8"
F G "ClockTimerSetLo" 14 554 "int8(int8 val)"
C L "RFPowerModuleOn" 14 559 1 "*"
F G "RFPowerModuleOn" 14 566 "int8()"
C L "RFPowerModuleOn" 14 559 1 "FUNCTION"
F G "RFPowerModuleOff" 14 573 "int8()"
C L "RFPowerModuleOff" 14 559 1 "FUNCTION"
V L "p_id" 14 580 "*int8"
F G "PCGetID" 14 581 "int8(*int8 p_id)"
V L "res" 14 582 "int8"
C L "PCGetID" 14 559 1 "FUNCTION"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
C G "" 15 1 1 "*"
D G "__SSIMP202_C__" 15 13 "001"
C L "SSimpInit" 15 15 1 "*"
F G "SSimpInit" 15 18 "int8()" "* Switches the amber LED on"
F G "SSimpLEDAmberOn" 15 23 "int8()" "* Switches the amber LED off"
F G "SSimpLEDAmberOff" 15 28 "int8()" "* Initializes all sensors on SSimp"
F G "SSimpensorsInit" 15 33 "int8()" "* Turn on all sensors on SSimp"
F G "SSimpSensorsOn" 15 38 "int8()"
F G "SSimpInit" 15 42 "int8()" "number of analog pins on the connector [0..4]"
C L "SSimpInit" 15 15 6 "FUNCTION"
C L "SSimpInit" 15 15 4 "FUNCTION"
F G "SSimpLEDAmberOn" 15 108 "int8()"
F G "SSimpLEDAmberOff" 15 114 "int8()"
F G "SSimpSensorsInit" 15 119 "int8()"
F G "SSimpSensorsOn" 15 153 "int8()" "__SSIMP192_C__"
D G "LL_HEADER_SIZE" 17 5 "12"
D G "LL_PAYLOAD_SIZE" 17 6 "64" "64"
D G "LL_TAIL_SIZE" 17 7 "2"
D G "LL_FRAME_MAX_SIZE" 17 8 " (LL_HEADER_SIZE+LL_PAYLOAD_SIZE+LL_TAIL_SIZE)"
V G "LL_slots_left" 17 10 "int8"
V G "LL_payload_length" 17 11 "int8" "hold the actual size of LL frame (not includes ll header, lltail)"
V G "LL_sequence_no" 17 12 "int8"
V G "LL_receive_buffer_locked" 17 13 "int1"
V G "LL_received_packet_in_this_slot" 17 14 "int1" "the reincarnation of the good old mac_msg_recieved_in_last_slot"
V G "LL_longbuffer" 17 15 "int16"
V G "LL_payload_received" 17 17 "int8[64]"
V G "LL_payload_send" 17 18 "int8[64]"
V G "LL_payload_receivebuffer" 17 19 "int8[64]"
V G "LL_header_received" 17 21 "int8[12]"
V G "LL_header_send" 17 22 "int8[12]"
V G "LL_header_receivebuffer" 17 23 "int8[12]"
V G "LL_tail_received" 17 25 "int8[2]"
V G "LL_tail_send" 17 26 "int8[2]"
V G "LL_tail_receivebuffer" 17 27 "int8[2]"
V G "LL_last_data" 17 29 "ll_data_in_last_slot" "LL Layer"
F G "LLStart" 17 31 "int8()"
F G "LLStop" 17 32 "int8()"
V L "slot_limit" 17 33 "int8"
F G "LLSendPacket" 17 33 "int8(int8 slot_limit)"
F G "LLSendingBusy" 17 34 "int8()"
F G "LLGetSendSuccess" 17 35 "int8()"
F G "LLIsActive" 17 36 "int8()"
F G "LLLockReceiveBuffer" 17 37 "int8()"
F G "LLReleaseReceiveBuffer" 17 38 "int8()"
F G "LLReceiveBufferLocked" 17 39 "int8()"
F G "LLSlotEnd" 17 40 "int8()"
F G "LLSetDataToOld" 17 41 "int8()"
F G "LLSetDataToNew" 17 42 "int8()"
F G "LLInit" 17 43 "int8()"
F G "LLGetFieldStrength" 17 44 "int8()"
V L "value" 17 45 "int8"
F G "LLSetFieldStrength" 17 45 "int8(int8 value)"
V L "header_data" 17 46 "*int8"
V L "payload_data" 17 46 "*int8"
V L "payload_size" 17 46 "int8"
F G "LLCalcCRC16" 17 46 "int16(*int8 header_data,*int8 payload_data,int8 payload_size)" ",int payload_size);"
F G "LLAbortSending" 17 47 "int8()"
F G "LLGetRemainingPayloadSpace" 17 48 "int8()"
F G "LLSetSendingSuccess" 17 49 "int8()"
F G "LLDataIsNew" 17 50 "int8()"
F G "LLSentPacketInThisSlot" 17 51 "int8()"
F G "LLGetIDFromHardware" 17 52 "int8()" "takes id either from internal or external eeprom"
D G "__STDINT_H__" 19 2 ""
T G "uint8_t" 19 4 "int8"
T G "int8_t" 19 5 "sint8"
T G "uint16_t" 19 7 "int16"
T G "int16_t" 19 8 "sint16"
T G "uint32_t" 19 10 "int32"
T G "int32_t" 19 11 "sint32"
T G "int1_t" 19 13 "int1" "ACL"
V L "LL_type_h" 18 5 "int8"
V L "LL_type_l" 18 5 "int8"
F G "ACLSubscribe" 18 5 "int8(int8 LL_type_h,int8 LL_type_l)" "adds a type to the subscription list"
V L "LL_type_h" 18 6 "int8"
V L "LL_type_l" 18 6 "int8"
F G "ACLUnsubscribe" 18 6 "int8(int8 LL_type_h,int8 LL_type_l)" "deletes a type out of the subscription list"
F G "ACLFlushSubscriptions" 18 7 "int8()" "deletes all subscription (not the default ones)"
F G "ACLSubscribeDefault" 18 8 "int8()" "subscribes to the default types (control msgs..)"
V L "type_h" 18 9 "int8"
V L "type_l" 18 9 "int8"
F G "ACLVerifySubscription" 18 9 "int8(int8 type_h,int8 type_l)" "checks if a subscription is there"
F G "ACLInit" 18 10 "int8()" "start ACL and lower layers, resets the whole stack"
C L "ACLInit" 18 11 1 "FUNCTION"
F G "ACLProcessControlMessages" 18 12 "int8()" "internal: is called if control msg is there"
V L "power" 18 13 "int8"
F G "ACLSetFieldStrength" 18 13 "int8(int8 power)" "sets the field strength of transmitter signals"
F G "ACLSendingBusy" 18 15 "int8()" "returns true if LL has Packet in send queue"
F G "ACLGetSendSuccess" 18 17 "int8()" "returns the result of last Packet transmission"
V L "slot_timeout" 18 18 "int8"
F G "ACLSendPacket" 18 18 "int8(int8 slot_timeout)" "starts packet transmission, return values!"
V L "type_h" 18 19 "int8"
V L "type_l" 18 19 "int8"
F G "ACLAddNewType" 18 19 "int8(int8 type_h,int8 type_l)" "adds a type into the ACL send buffer, return values!"
V L "data" 18 20 "int8"
F G "ACLAddData" 18 20 "int8(int8 data)" "adds one byte data into the ACL send buffer, return values!"
V L "data" 18 21 "*int8"
V L "len" 18 21 "int8"
F G "ACLAddDataN" 18 21 "int8(*int8 data,int8 len)" "adds one byte data into the ACL send buffer, return values!"
F G "ACLAbortSending" 18 22 "int8()" "stops a running transmission"
F G "ACLSubscribeAll" 18 23 "int8()" "subscribes to any possible type (all packets are received)"
V L "buffer" 18 24 "*int8"
F G "ACLMatchesMyIP" 18 24 "int8(*int8 buffer)" "checks, if buffer holds my IP"
V L "id1" 18 27 "*uint8_t"
V L "id2" 18 27 "*uint8_t"
F G "ACLIdEquals" 18 27 "int8(*uint8_t id1,*uint8_t id2)"
F G "ACLGetLocalId" 18 29 "*int8()"
V L "type_h" 18 30 "int8"
V L "type_l" 18 30 "int8"
F G "ACLGetReceivedData" 18 30 "*int8(int8 type_h,int8 type_l)" "returns the ACL payload data of the given type in the last received packet"
F G "ACLGetReceivedPayloadLength" 18 31 "int8()" "returns the number of bytes received"
V L "ignore" 18 32 "int8"
V L "pass" 18 32 "int8"
F G "ACLSetControlMessagesBehaviour" 18 32 "int8(int8 ignore,int8 pass)" "if ignore==true: don't react on any control msg; if pass==true: give control msgs to ACL as received payload packets"
V L "type_h" 18 33 "int8"
V L "type_l" 18 33 "int8"
F G "ACLGetReceivedDataLength" 18 33 "sint8(int8 type_h,int8 type_l)" "returns number of bytes received of given type in last msg"
F G "ACLSentPacketInThisSlot" 18 34 "int8()" "is true until next slot if msg was send in this slot"
F G "ACLAnswerOnACM" 18 35 "int8()" "if a control msgs comes in that requires an answer, it is answered"
F G "ACLNoAnswerOnACM" 18 36 "int8()" "if a control msgs comes in that requires an answer, it will not be answered"
F G "ACLClearSendData" 18 37 "int8()" "deletes the send buffer of ACL"
F G "ACLStart" 18 38 "int8()" "restart ACL after ACLstop()"
F G "ACLStop" 18 39 "int8()" "stops the RF stack. Everything is hold, continues after ACLstart. msg stay in queue"
F G "ACLGetRemainingPayloadSpace" 18 40 "int8()" "returns the number of free bytes in the transmit buffer"
F G "ACLLockReceiveBuffer" 18 41 "int8()" "locks the receive buffer: no new msgs are received"
F G "ACLReceiveBufferLocked" 18 42 "int8()" "returns true if receivebuffer is locked"
F G "ACLReleaseReceiveBuffer" 18 43 "int8()" "un-lock the receivebuffer;"
F G "ACLSetDataToOld" 18 44 "int8()" "set received data to "old": means ACLDataIsNew will not return true unless a new packet was received"
F G "ACLSetDataToNew" 18 45 "int8()" "set received data to "new": means ACLDataIsNew will return true every slot"
F G "ACLAnyDataIsNewNow" 18 46 "int8()" "returns true if data in receive buffer is "new" now"
F G "ACLDataIsNew" 18 47 "int8()" "returns true if data in receive buffer is "new""
V L "type_h" 18 48 "int8"
V L "type_l" 18 48 "int8"
V L "position" 18 48 "int8"
F G "ACLGetReceivedByte" 18 48 "int8(int8 type_h,int8 type_l,int8 position)" "returns a single received byte on the position"
F G "ACLStartup" 18 49 "int8()" "is the first function in any case,  runs selftest and aclinit"
F G "ACLDataReceivedInThisSlot" 18 50 "int8()" "returns true if data was received in this slot"
V L "type_h" 18 53 "int8"
V L "type_l" 18 53 "int8"
F G "ACLFoundReceivedType" 18 53 "int8(int8 type_h,int8 type_l)" "returns true if type was found"
F G "ACLAddressedDataIsNew" 18 54 "int8()" "return1 if adressed data came"
F G "ACLAddressedDataIsNewNow" 18 55 "int8()" "return 1 if adressed data came in this slot"
V L "add1" 18 56 "int8"
V L "add2" 18 56 "int8"
V L "add3" 18 56 "int8"
V L "add4" 18 56 "int8"
V L "add5" 18 56 "int8"
V L "add6" 18 56 "int8"
V L "add7" 18 56 "int8"
V L "add8" 18 56 "int8"
V L "timeout" 18 56 "int8"
F G "ACLSendPacketAddressed" 18 56 "int8(int8 add1,int8 add2,int8 add3,int8 add4,int8 add5,int8 add6,int8 add7,int8 add8,int8 timeout)" "sends out the current packet with a target ID"
F G "ACLWaitForReady" 18 57 "int8()" "waits until ACL has finished all jobs like packet send etc."
D G "ACL_ADDRESS_ARG" 18 59 "(addr) (addr)[0],(addr)[1],(addr)[2],(addr)[3],(addr)[4],(addr)[5],(addr)[6],(addr)[7]"
C L "ACLWaitForReady" 20 1 2 "FUNCTION"
V L "value" 20 4 "int16"
F G "AppSetRealTimeClock" 20 4 "int8(int16 value)" "sets the real time clock to given value"
F G "AppGetRealTimeClockH" 20 5 "int8()" "returns the HIGh byte of the real time clock"
F G "AppGetSupplyVoltage" 20 6 "int8()" "returns the supply voltage; 255 means 3.0 V, scaled linear"
V L "ledstyle" 20 8 "int8"
F G "AppSetLEDBehaviour" 20 8 "int8(int8 ledstyle)" "sets how LED should behave (blicking, blue on transmit, sync etc, off)"
F G "AppSetLEDs" 20 10 "int8()" "internal: updates the state of the LEDs"
V L "result" 20 11 "*int8"
F G "AppSelfTest" 20 11 "int8(*int8 result)" "runs the selftest if a selftest connector is on"
C L "AppSelfTest" 22 1 1 "*"
C L "AppSelfTest" 22 1 1 "*"
C L "AppSelfTest" 22 1 1 "*"
C L "AppSelfTest" 22 1 1 "*"
C L "AppSelfTest" 22 1 1 "*"
C L "AppSelfTest" 22 1 1 "*"
C L "AppSelfTest" 22 1 1 "*"
C L "AppSelfTest" 22 1 1 "*"
C L "AppSelfTest" 22 1 1 "*"
C L "AppSelfTest" 22 1 1 "*"
C L "AppSelfTest" 22 1 1 "*"
C L "AppSelfTest" 22 1 1 "*"
C L "AppSelfTest" 22 1 1 "*"
C L "AppSelfTest" 22 1 1 "*"
C L "AppSelfTest" 22 1 1 "*"
C L "AppSelfTest" 22 1 1 "*"
C L "AppSelfTest" 22 1 1 "*"
C L "AppSelfTest" 22 1 1 "*"
C L "AppSelfTest" 22 1 1 "*"
C L "AppSelfTest" 22 1 1 "*"
C L "AppSelfTest" 22 1 1 "*"
C L "AppSelfTest" 22 1 1 "*"
C L "AppSelfTest" 22 1 1 "*"
C L "AppSelfTest" 22 1 1 "*"
C L "AppSelfTest" 22 1 1 "*"
C L "AppSelfTest" 22 1 1 "*"
C L "AppSelfTest" 22 1 1 "*"
C L "AppSelfTest" 22 1 1 "*"
C L "AppSelfTest" 22 1 1 "*"
C L "AppSelfTest" 22 1 1 "*"
C L "AppSelfTest" 22 1 34 "*"
C L "AppSelfTest" 22 1 1 "*"
C L "AppSelfTest" 22 1 1 "*"
C L "AppSelfTest" 22 1 1 "*"
C L "AppSelfTest" 22 1 1 "*"
C L "AppSelfTest" 22 1 1 "*"
C L "AppSelfTest" 22 1 1 "*"
C L "AppSelfTest" 22 1 1 "*"
C L "AppSelfTest" 22 1 1 "*"
C L "AppSelfTest" 22 1 1 "*"
C L "AppSelfTest" 22 1 1 "*"
C L "AppSelfTest" 22 1 1 "FUNCTION"
C L "AppSelfTest" 22 1 1 "FUNCTION"
C L "AppSelfTest" 22 1 1 "FUNCTION"
T G "UInt8" 22 106 "int8"
T G "UInt16" 22 107 "int16" "this is debug stuff"
D G "SENDER" 22 111 "0"
D G "DEBUG" 22 112 "0"
D G "SYNC_DEBUG" 22 113 "0		" "set this to one: on pin 4 is the sync time visible to compare with other devices"
D G "VERSION" 22 117 "5"
D G "MY_MAC_ID" 22 118 "141					" "141"
D G "RF_FSM_TIME_SYNC" 22 121 "1			" "one count is one bit or TIMER1H = 50,1 us"
D G "RF_FSM_TIME_STATISTIC" 22 122 "11			" "rf_limit"
D G "RF_FSM_TIME_ARBI" 22 123 "15			" "rf_limit 14"
D G "RF_FSM_TIME_DATA" 22 124 "24"
D G "RF_FSM_TIME_TUNE16f" 22 125 "93			" "98	//tuning in  #asm cycles"
D G "RF_FSM_TIME_TUNE18f" 22 126 "93+5		" "war +10"
D G "RF_FSM_TIME_TUNE" 22 127 " (RF_FSM_TIME_TUNE18f)"
D G "RF_FSM_TIME_SYNC_RECEIVE" 22 129 " (RF_FSM_TIME_SYNC*256 + 7*(64*5) + RF_FSM_TIME_TUNE)"
D G "RF_FSM_TIME_SLOT_END" 22 130 "255"
D G "RF_FSM_TIME_EARLY_SLOT_END" 22 131 " (RF_FSM_TIME_SLOT_END-2)"
D G "RF_FSM_TIME_SYNC_COMPARE" 22 133 "180		" "this is the sync point to compare devices"
D G "FSM_STATE_START" 22 136 "1"
D G "FSM_STATE_SYNC" 22 137 "2"
D G "FSM_STATE_STATISTIC" 22 138 "3"
D G "FSM_STATE_ARBI" 22 139 "4"
D G "FSM_STATE_SEND_DATA" 22 140 "5"
D G "FSM_STATE_REC_DATA" 22 141 "8"
D G "FSM_STATE_ALONE" 22 142 "6"
D G "FSM_STATE_DEBUG" 22 143 "99"
D G "FSM_STATE_ERROR" 22 144 "10"
D G "FSM_STATE_END" 22 145 "20"
D G "RF_INITIAL_LISTEN_SLOTS_DEFAULT" 22 148 "2				" "duration in slot that an unsynced new smartit uses to listen"
D G "RF_ARBITRATION_MINIMUM_SAMPLES" 22 149 "7				" "no of (uart)samples with which a slot is assumed "busy""
D G "RF_SYMBOL_SYNC1" 22 152 "0b11100011"
D G "RF_SYMBOL_SYNC2" 22 153 "0b10001110"
D G "RF_SYMBOL_SYNC3" 22 154 "0b00111000"
D G "RF_SYMBOL_SYNC4" 22 155 "0b11100011"
D G "RF_SYMBOL_SYNC5" 22 156 "0b10001111"
D G "RF_SYMBOL_SYNC6" 22 157 "0b11000000"
D G "RF_SYMBOL_SYNC7" 22 158 "0b11100000"
D G "RF_SYMBOL_SYNCRECEIVED" 22 159 "0b00110010  			" "the received Sync symbol (is the "sync"-symbol, but 3 times as fast"
D G "RF_SYMBOL_FASTTRAILER" 22 160 "0b10101010				" "trailer for data packets"
D G "RF_SYMBOL_SOP" 22 161 "0b11001010"
D G "RF_SYMBOL_EOP" 22 162 "0b00000000				" "to reset the spi"
D G "RF_SYMBOL_RSSI" 22 163 "0b11111111"
D G "RF_SYMBOL_RSSI_START" 22 164 "0b11000111"
D G "RF_STATUS_SENDING" 22 168 "0b00000001"
D G "RF_STATUS_SEND_SUCCESS" 22 169 "0b00000010"
D G "RF_STATUS_NEW_PACKET" 22 170 "0b00000100"
D G "RF_STATUS_RECEIVE_ERROR" 22 171 "0b00001000"
D G "RF_STATUS_LAYER_ON" 22 172 "0b10000000		" "one if stack is running"
D G "RF_STATUS_INSERTED_CTRLMSG" 22 173 "0b01000000		" "is being set if waiting normal msg was interrupted due t incoming control/management msg"
D G "RF_STATUS_NEW_DATA" 22 174 "0b00010000		" "new data arrived"
D G "RF_STATUS_JUST_SENT" 22 175 "0b00100000		" "data send in this slot"
D G "SYNC_STATE_SYNCED" 22 178 "1"
D G "SYNC_STATE_ALONE" 22 179 "2"
D G "SYNC_MAX_MISSED_SYNCS" 22 180 "7		" "after these empty sync=> state=alone"
D G "SYNC_RECOVER_SYNCS" 22 181 "4		" "after these syncs it's recover state (only sync receive)"
D G "SYNC_STATE_DEBUG" 22 182 "99"
D G "RF_SYNC_MODE_ACTIVE" 22 184 "1		" "searches for partners and syncs"
D G "RF_SYNC_MODE_PASSIVE" 22 185 "2		" "does not search for partners but syncs"
D G "RF_SYNC_MODE_BLIND_FLIGHT" 22 186 "10" "means no transmission, no sync, no nothing, just interrupts"
D G "RF_SYNC_RATE_DEFAULT" 22 188 "80		" "normal = 30% sync rate"
D G "ACL_SUBSCRIPTIONLIST_LENGTH" 22 193 "8"
D G "ACL_CONTROL_MESSAGES_TIMEOUT" 22 194 "30"
D G "ACL_TYPE_ACM_H" 22 195 "ACL_TYPE_ACM_HI"
D G "ACL_TYPE_ACM_L" 22 196 "ACL_TYPE_ACM_LO"
D G "RF_RSSI_SAMPLES" 22 200 "36"
D G "RF_RSSI_BYTES" 22 201 "32"
D G "LEDS_NORMAL" 22 205 "1"
D G "LEDS_OFF" 22 206 "0		" "leds off and stack doesnt touch them"
D G "LEDS_ON_SEND" 22 207 "2"
D G "LEDS_ON_RECEIVE" 22 208 "3"
D G "LEDS_ONLY_ONE" 22 209 "5"
D G "LEDS_ON_CRC_ERROR" 22 210 "6	" "blue led on crc error"
C L "AppSelfTest" 22 1 5 "FUNCTION"
F G "RFSetModeSleep" 22 231 "int8()"
F G "RFSetModeAsk" 22 233 "int8()"
F G "RFSetModeOok" 22 235 "int8()"
F G "RFSetModeReceive" 22 237 "int8()"
F G "RFSetModeSensitive" 22 239 "int8()"
F G "RFSpiSendByte" 22 241 "int8()"
F G "RFDeleteTimer1Overflow" 22 243 "int8()"
F G "RFInit" 22 244 "int8()" "UInt8 RFGetRandom();"
F G "RFPowerModuleOn" 22 247 "int8()"
F G "RFPowerModuleOff" 22 249 "int8()"
V L "i" 22 252 "int8"
F G "DebugGiveOut" 22 252 "int8(int8 i)"
F G "RFInitUart" 22 256 "int8()"
F G "RFUartStartContinuous" 22 258 "int8()"
F G "RFUartClearFifo" 22 260 "int8()"
F G "RFUartGetByte" 22 262 "int8()"
F G "RFSpiWait" 22 264 "int8()"
F G "RFUartOff" 22 266 "int8()"
F G "RFUartOn" 22 268 "int8()"
F G "RFSpiOff" 22 270 "int8()"
F G "RFSpiOn" 22 272 "int8()"
V L "timeout" 22 274 "int8"
F G "RFWaitForTimer1Exact" 22 274 "int8(int8 timeout)"
F G "RFSpiClear" 22 276 "int8()"
F G "RFWaitForNextBitTimeExact" 22 278 "int8()"
F G "RFSendSync" 22 279 "int8()"
V L "Timeout" 22 280 "int8"
V L "wait_slots" 22 280 "int8"
F G "RFSynchronize" 22 280 "int8(int8 Timeout,int8 wait_slots)"
F G "RFInitRandom" 22 281 "int8()"
V L "receive" 22 283 "int8"
F G "RFStatistic" 22 283 "int8(int8 receive)"
V L "rf_arbi_pos" 22 284 "int16"
F G "RFArbitration" 22 284 "int8(int16 rf_arbi_pos)"
F G "RFSendData" 22 285 "int8()"
F G "RFReceiveData" 22 286 "int8()"
F G "RFScramble" 22 288 "int8()"
F G "RFCreateAliveSymbol" 22 289 "int8()"
F G "RFNewRandom" 22 290 "int8()"
F G "RFStop" 22 291 "int8()"
V L "power" 22 292 "int8"
F G "RFSetFieldStrength" 22 292 "int8(int8 power)"
F G "RFGetFieldStrength" 22 293 "int8()"
F G "RFStart" 22 295 "int8()"
F G "RFReceiveScrambledByte" 22 296 "int8()"
F G "RFReceiveByte" 22 297 "int8()"
V L "rate" 22 298 "int8"
F G "RFSetSyncRate" 22 298 "int8(int8 rate)"
V L "mode" 22 299 "int8"
F G "RFSetSyncMode" 22 299 "int8(int8 mode)"
V L "slots" 22 300 "int8"
F G "RFSetInitialListenSlots" 22 300 "int8(int8 slots)"
F G "RFAlone" 22 302 "int8()"
F G "RFCheckSubscriptions" 22 304 "int8()"
F G "RFShowSynchronization" 22 305 "int8()"
F G "RFMicroSecondsUntilNextSlot" 22 306 "int16()"
F G "RFEvaluateStatistic" 22 308 "int8()"
F G "RF100usLeft" 22 309 "int8()"
F G "RF200usLeft" 22 310 "int8()"
F G "RF500usLeft" 22 311 "int8()"
F G "SlotEndCallBack" 22 317 "int8()" "all other"
C L "SlotEndCallBack" 22 1 3 "FUNCTION"
V G "RF_BIT_POS_HIGH_PERIOD" 22 339 "int8[256]"
C L "SlotEndCallBack" 22 1 5 "FUNCTION"
V G "RF_NUMBER_OF_BITS" 22 370 "int8[256]"
C L "SlotEndCallBack" 22 1 18 "FUNCTION"
V G "RF_4_to_8" 22 412 "int8[16]"
C L "SlotEndCallBack" 22 1 1 "FUNCTION"
V G "RF_STATISTIC_TABLE" 22 434 "int8[8]"
C L "SlotEndCallBack" 22 1 10 "FUNCTION"
V G "RF_SYNC_RATES" 22 459 "int8[8]"
C L "SlotEndCallBack" 22 1 1 "FUNCTION"
V G "rf_fsm_state" 22 475 "int8"
V G "rf_status" 22 476 "int8" "holds the state of rf layer like busy, receiving succes , err, etc"
V G "rf_sync_state" 22 478 "int8"
V G "rf_sync_mode" 22 479 "int8"
V G "rf_sync_rate" 22 480 "int8" "0 means never send a sync; 255 means always send a sync"
V G "rf_missed_syncs" 22 482 "int8"
V G "rf_slotcounter" 22 483 "int16"
V G "rf_longbuffer" 22 484 "int16"
V G "rf_symbol_am_alive" 22 485 "int8" "always make sure that the lowest bit is zero"
V G "rf_statistic_am_alive" 22 486 "int8" "hold the last valid situation"
V G "rf_field_strength" 22 487 "int8"
V G "rf_initial_listen_slots" 22 488 "int8" "the number of listenslots before a lonely note sends a sync"
V G "rf_new_statistic_value" 22 489 "int1" "is set true if a new statistic value was there"
V G "rf_LED_style" 22 490 "int8"
V G "rf_random_8" 22 491 "int8"
V G "rf_number_of_devices" 22 492 "int8" "gives the number of devices in the environment"
V G "rf_statistic_values" 22 496 "int8[9]" "statistics only on 18f platforms 0..7 holds bits, 8 the counter"
C L "SlotEndCallBack" 22 1 1 "FUNCTION"
V G "rssi_send_on" 22 503 "int8"
V G "rssi_receive_on" 22 504 "int8" "globals for ota packets"
C L "SlotEndCallBack" 22 1 15 "FUNCTION"
C L "SlotEndCallBack" 22 1 1 "FUNCTION"
C L "SlotEndCallBack" 22 1 1 "FUNCTION"
V G "ACL_subscriptions" 22 583 "int8[8][2]"
V G "ACL_subscribe_all" 22 584 "int1"
V G "ACL_ignore_control_messages" 22 585 "int1"
V G "ACL_pass_control_messages" 22 586 "int1" "das ist die neue state machine"
F G "fsm" 22 596 "int8()" "int buff;"
C L "fsm" 22 1 1 "FUNCTION"
C L "fsm" 22 1 1 "FUNCTION"
C L "fsm" 22 1 3 "FUNCTION"
C L "fsm" 22 1 1 "FUNCTION"
C L "fsm" 22 1 1 "FUNCTION"
C L "fsm" 22 1 1 "FUNCTION"
C L "fsm" 22 1 1 "FUNCTION"
C L "fsm" 22 1 1 "FUNCTION"
C L "fsm" 22 1 2 "FUNCTION"
C L "fsm" 22 1 1 "FUNCTION"
C L "fsm" 22 1 1 "FUNCTION"
C L "fsm" 22 1 1 "FUNCTION"
C L "fsm" 22 1 1 "FUNCTION"
C L "fsm" 22 1 1 "FUNCTION"
C L "fsm" 22 1 1 "FUNCTION"
C L "fsm" 22 1 1 "FUNCTION"
C L "fsm" 22 1 1 "FUNCTION"
C L "fsm" 22 1 1 "FUNCTION"
C L "fsm" 22 1 2 "FUNCTION"
C L "fsm" 22 1 1 "FUNCTION"
C L "fsm" 22 1 1 "FUNCTION"
C L "fsm" 22 1 1 "FUNCTION"
C L "fsm" 22 1 1 "FUNCTION"
C L "fsm" 22 1 1 "FUNCTION"
C L "fsm" 22 1 1 "FUNCTION"
C L "fsm" 22 1 1 "FUNCTION"
C L "fsm" 22 1 1 "FUNCTION"
C L "fsm" 22 1 1 "FUNCTION"
C L "fsm" 22 1 1 "FUNCTION"
C L "fsm" 22 1 1 "FUNCTION"
C L "fsm" 22 1 1 "FUNCTION"
C L "fsm" 22 1 1 "FUNCTION"
C L "fsm" 22 1 1 "FUNCTION"
C L "fsm" 22 1 1 "FUNCTION"
C L "fsm" 22 1 1 "FUNCTION"
C L "fsm" 22 1 1 "FUNCTION"
C L "fsm" 22 1 1 "FUNCTION"
C L "fsm" 22 1 1 "FUNCTION"
C L "fsm" 22 1 1 "FUNCTION"
C L "fsm" 22 1 1 "FUNCTION"
C L "fsm" 22 1 1 "FUNCTION"
C L "fsm" 22 1 1 "FUNCTION"
C L "fsm" 22 1 4 "FUNCTION"
C L "fsm" 22 1 1 "FUNCTION"
C L "fsm" 22 1 2 "FUNCTION"
C L "fsm" 22 1 1 "FUNCTION"
C L "fsm" 22 1 1 "FUNCTION"
C L "fsm" 22 1 1 "FUNCTION"
C L "fsm" 22 1 1 "FUNCTION"
C L "fsm" 22 1 1 "FUNCTION"
C L "fsm" 22 1 3 "FUNCTION"
C L "fsm" 22 1 1 "FUNCTION"
C L "fsm" 22 1 4 "FUNCTION"
C L "RFSetModeSleep" 22 1 1 "FUNCTION"
F G "RFSetModeSleep" 22 978 "int8()"
F G "RFSetModeAsk" 22 985 "int8()"
F G "RFSetModeOok" 22 992 "int8()"
F G "RFSetModeReceive" 22 999 "int8()"
F G "RFSetModeSensitive" 22 1007 "int8()"
F G "RFInitUart" 22 1018 "int8()"
C L "RFInitUart" 22 1 1 "FUNCTION"
C L "RFInitUart" 22 1 1 "FUNCTION"
C L "RFInitUart" 22 1 1 "FUNCTION"
C L "RFInitUart" 22 1 1 "FUNCTION"
C L "RFInitUart" 22 1 1 "FUNCTION"
C L "RFInitUart" 22 1 1 "FUNCTION"
C L "RFInitUart" 22 1 1 "FUNCTION"
C L "RFInitUart" 22 1 1 "FUNCTION"
C L "RFInitUart" 22 1 1 "FUNCTION"
C L "RFInitUart" 22 1 1 "FUNCTION"
C L "RFSpiSendByte" 22 1 2 "FUNCTION"
F G "RFSpiSendByte" 22 1043 "int8()"
C L "RFSpiSendByte" 22 1 1 "FUNCTION"
C L "RFSpiSendByte" 22 1 1 "FUNCTION"
C L "RFSpiSendByte" 22 1 1 "FUNCTION"
C L "RFSpiSendByte" 22 1 1 "FUNCTION"
F G "RFSpiWait" 22 1055 "int8()" ""
C L "RFSpiWait" 22 1 1 "FUNCTION"
F G "RFSpiClear" 22 1068 "int8()"
V L "nirvana" 22 1070 "int8"
C L "RFSpiClear" 22 1 1 "FUNCTION"
C L "RFSpiClear" 22 1 1 "FUNCTION"
C L "RFSendSync" 22 1 1 "FUNCTION"
F G "RFSendSync" 22 1081 "int8()" "first wait for correct time"
F G "RFDeleteTimer1Overflow" 22 1105 "int8()"
C L "RFDeleteTimer1Overflow" 22 1 1 "FUNCTION"
V L "rate" 22 1111 "int8"
F G "RFSetSyncRate" 22 1112 "int8(int8 rate)"
V L "mode" 22 1115 "int8"
F G "RFSetSyncMode" 22 1116 "int8(int8 mode)"
F G "RFGetSyncMode" 22 1120 "int8(int8 mode)"
V L "slots" 22 1124 "int8"
F G "RFSetInitialListenSlots" 22 1125 "int8(int8 slots)"
F G "RFInit" 22 1132 "int8(int8 slots)" "set my own pins to the necessary values"
C L "RFInit" 22 1 1 "FUNCTION"
C L "RFInit" 22 1 3 "FUNCTION"
C L "RFInit" 22 1 1 "FUNCTION"
C L "RFInit" 22 1 1 "FUNCTION"
C L "RFInit" 22 1 4 "FUNCTION"
C L "RFInit" 22 1 1 "FUNCTION"
C L "RFInit" 22 1 1 "FUNCTION"
C L "RFInit" 22 1169 1 "*"
C L "RFInit" 22 1169 1 "FUNCTION"
C L "RFInit" 22 1169 1 "FUNCTION"
C L "RFInit" 22 1169 1 "FUNCTION"
C L "RFInit" 22 1169 1 "FUNCTION"
C L "RFInit" 22 1169 1 "FUNCTION"
C L "RFInit" 22 1169 1 "FUNCTION"
C L "RFInit" 22 1169 1 "FUNCTION"
C L "RFStart" 22 1169 16 "FUNCTION"
F G "RFStart" 22 1226 "int8(int8 slots)"
C L "RFStart" 22 1169 1 "FUNCTION"
C L "RFStart" 22 1233 1 "*"
C L "RFStart" 22 1233 1 "*"
C L "RFStart" 22 1236 1 "*"
C L "RFStart" 22 1236 5 "FUNCTION"
C L "RFStart" 22 1236 1 "FUNCTION"
C L "RFStart" 22 1236 1 "FUNCTION"
F G "RFGetFieldStrength" 22 1257 "int8(int8 slots)"
V L "power" 22 1261 "int8"
F G "RFSetFieldStrength" 22 1262 "int8(int8 power)"
C L "RFSetFieldStrength" 22 1236 2 "FUNCTION"
C L "RFSetFieldStrength" 22 1236 1 "FUNCTION"
C L "RFSetFieldStrength" 22 1236 1 "FUNCTION"
C L "RFSetFieldStrength" 22 1236 1 "FUNCTION"
C L "RFSetFieldStrength" 22 1236 1 "FUNCTION"
C L "RFSetFieldStrength" 22 1236 1 "FUNCTION"
C L "RFSetFieldStrength" 22 1236 1 "FUNCTION"
C L "RFAlone" 22 1236 6 "FUNCTION"
F G "RFAlone" 22 1294 "int8(int8 power)" "DebugGiveOut(6);"
C L "RFAlone" 22 1236 1 "FUNCTION"
C L "RFAlone" 22 1236 1 "FUNCTION"
C L "RFAlone" 22 1236 2 "FUNCTION"
C L "RFAlone" 22 1236 1 "FUNCTION"
C L "RFAlone" 22 1236 1 "FUNCTION"
C L "RFAlone" 22 1236 1 "FUNCTION"
C L "RFAlone" 22 1236 1 "FUNCTION"
C L "RFAlone" 22 1236 1 "FUNCTION"
C L "RFAlone" 22 1236 1 "FUNCTION"
C L "RFAlone" 22 1236 1 "FUNCTION"
C L "RFAlone" 22 1236 1 "FUNCTION"
C L "RFAlone" 22 1236 1 "FUNCTION"
C L "RFAlone" 22 1236 1 "FUNCTION"
C L "RFSynchronize" 22 1348 9 "*"
V L "Timeout" 22 1373 "int8"
V L "wait_slots" 22 1373 "int8"
F G "RFSynchronize" 22 1374 "int8(int8 Timeout,int8 wait_slots)" "this funtion uses globals:"
C L "RFSynchronize" 22 1348 6 "FUNCTION"
C L "RFSynchronize" 22 1348 1 "FUNCTION"
C L "RFSynchronize" 22 1348 1 "FUNCTION"
C L "RFSynchronize" 22 1348 1 "FUNCTION"
C L "RFSynchronize" 22 1348 1 "FUNCTION"
C L "RFSynchronize" 22 1348 1 "FUNCTION"
C L "RFSynchronize" 22 1348 1 "FUNCTION"
C L "RFSynchronize" 22 1348 1 "FUNCTION"
C L "RFSynchronize" 22 1348 1 "FUNCTION"
C L "RFSynchronize" 22 1348 1 "FUNCTION"
C L "RFSynchronize" 22 1348 1 "FUNCTION"
C L "RFSynchronize" 22 1348 1 "FUNCTION"
C L "RFSynchronize" 22 1348 2 "FUNCTION"
C L "RFSynchronize" 22 1348 1 "FUNCTION"
C L "RFSynchronize" 22 1348 1 "FUNCTION"
C L "RFSynchronize" 22 1348 1 "FUNCTION"
C L "RFSynchronize" 22 1348 1 "FUNCTION"
C L "RFSynchronize" 22 1348 1 "FUNCTION"
C L "RFSynchronize" 22 1348 1 "FUNCTION"
C L "RFSynchronize" 22 1348 1 "FUNCTION"
C L "RFSynchronize" 22 1348 2 "FUNCTION"
C L "RFSynchronize" 22 1348 1 "FUNCTION"
C L "RFSynchronize" 22 1348 1 "FUNCTION"
C L "RFSynchronize" 22 1348 1 "FUNCTION"
C L "RFSynchronize" 22 1348 1 "FUNCTION"
C L "RFSynchronize" 22 1348 2 "FUNCTION"
C L "RFSynchronize" 22 1348 1 "FUNCTION"
C L "RFSynchronize" 22 1348 1 "FUNCTION"
C L "RFSynchronize" 22 1348 1 "FUNCTION"
C L "RFSynchronize" 22 1348 1 "FUNCTION"
C L "RFSynchronize" 22 1348 1 "FUNCTION"
C L "RFSynchronize" 22 1348 2 "FUNCTION"
C L "RFSynchronize" 22 1348 1 "FUNCTION"
C L "RFSynchronize" 22 1348 1 "FUNCTION"
C L "RFSynchronize" 22 1348 1 "FUNCTION"
C L "RFSynchronize" 22 1348 1 "FUNCTION"
C L "RFSynchronize" 22 1348 2 "FUNCTION"
C L "RFSynchronize" 22 1348 1 "FUNCTION"
C L "RFSynchronize" 22 1348 1 "FUNCTION"
C L "RFSynchronize" 22 1348 4 "FUNCTION"
C L "RFSynchronize" 22 1348 1 "FUNCTION"
C L "RFSynchronize" 22 1348 1 "FUNCTION"
C L "RFSynchronize" 22 1348 1 "FUNCTION"
C L "RFSynchronize" 22 1348 1 "FUNCTION"
C L "RFSynchronize" 22 1348 1 "FUNCTION"
C L "RFSynchronize" 22 1348 1 "FUNCTION"
C L "RFSynchronize" 22 1348 1 "FUNCTION"
C L "RFSynchronize" 22 1348 1 "FUNCTION"
C L "RFSynchronize" 22 1348 1 "FUNCTION"
C L "RFSynchronize" 22 1348 1 "FUNCTION"
C L "RFSynchronize" 22 1348 1 "FUNCTION"
C L "RFSynchronize" 22 1348 1 "FUNCTION"
C L "RFSynchronize" 22 1348 1 "FUNCTION"
C L "RFSynchronize" 22 1348 1 "FUNCTION"
C L "RFSynchronize" 22 1348 1 "FUNCTION"
C L "RFSynchronize" 22 1348 1 "FUNCTION"
C L "RFSynchronize" 22 1348 1 "FUNCTION"
C L "RFSynchronize" 22 1348 1 "FUNCTION"
C L "RFSynchronize" 22 1348 1 "FUNCTION"
C L "RFSynchronize" 22 1348 1 "FUNCTION"
C L "RFSynchronize" 22 1348 1 "FUNCTION"
C L "RFSynchronize" 22 1348 1 "FUNCTION"
C L "RFSynchronize" 22 1348 1 "FUNCTION"
C L "RFSynchronize" 22 1348 1 "FUNCTION"
C L "RFSynchronize" 22 1348 1 "FUNCTION"
C L "RFSynchronize" 22 1348 1 "FUNCTION"
C L "RFSynchronize" 22 1348 1 "FUNCTION"
C L "RFSynchronize" 22 1348 1 "FUNCTION"
V L "i" 22 1667 "int8"
F G "DebugGiveOut" 22 1668 "int8(int8 i)" "int h;"
C L "DebugGiveOut" 22 1348 38 "FUNCTION"
F G "RFUartStartContinuous" 22 1717 "int8(int8 i)"
C L "RFUartStartContinuous" 22 1348 1 "FUNCTION"
C L "RFUartStartContinuous" 22 1348 1 "FUNCTION"
C L "RFUartStartContinuous" 22 1348 1 "FUNCTION"
F G "RFUartClearFifo" 22 1730 "int8(int8 i)"
C L "RFUartClearFifo" 22 1348 1 "FUNCTION"
C L "RFUartClearFifo" 22 1348 1 "FUNCTION"
F G "RFUartGetByte" 22 1741 "int8(int8 i)"
C L "RFUartGetByte" 22 1348 1 "FUNCTION"
C L "RFUartOff" 22 1348 1 "FUNCTION"
F G "RFUartOff" 22 1759 "int8()"
C L "RFUartOff" 22 1348 1 "FUNCTION"
F G "RFUartOn" 22 1766 "int8()"
C L "RFUartOn" 22 1348 1 "FUNCTION"
C L "RFSpiOff" 22 1348 1 "FUNCTION"
F G "RFSpiOff" 22 1776 "int8()"
C L "RFSpiOff" 22 1348 1 "FUNCTION"
F G "RFSpiOn" 22 1786 "int8()"
C L "RFSpiOn" 22 1348 3 "FUNCTION"
V L "timeout" 22 1802 "int8"
F G "RFWaitForTimer1Exact" 22 1803 "int8(int8 timeout)" "use global rf_buff as buffer, rf_timeout"
C L "RFWaitForTimer1Exact" 22 1348 1 "FUNCTION"
C L "RFWaitForTimer1Exact" 22 1348 1 "FUNCTION"
C L "RFWaitForTimer1Exact" 22 1348 1 "FUNCTION"
C L "RFWaitForTimer1Exact" 22 1348 1 "FUNCTION"
C L "RFWaitForTimer1Exact" 22 1348 1 "FUNCTION"
C L "RFWaitForTimer1Exact" 22 1348 1 "FUNCTION"
C L "RFWaitForTimer1Exact" 22 1348 1 "FUNCTION"
F G "RFWaitForNextBitTimeExact" 22 1849 "int8()" "use global rf_buff"
C L "RFWaitForNextBitTimeExact" 22 1348 1 "FUNCTION"
C L "RFWaitForNextBitTimeExact" 22 1348 1 "FUNCTION"
C L "RFWaitForNextBitTimeExact" 22 1348 1 "FUNCTION"
C L "RFWaitForNextBitTimeExact" 22 1348 1 "FUNCTION"
C L "RFWaitForNextBitTimeExact" 22 1348 1 "FUNCTION"
C L "RFWaitForNextBitTimeExact" 22 1348 1 "FUNCTION"
C L "RFWaitForNextBitTimeExact" 22 1348 1 "FUNCTION"
F G "RFInitRandom" 22 1901 "int8()"
V L "i" 22 1902 "UInt8"
C L "RFInitRandom" 22 1348 1 "FUNCTION"
C L "RFStatistic_old" 22 1348 3 "FUNCTION"
F G "RFStatistic_old" 22 1920 "int8()"
C L "RFStatistic_old" 22 1348 1 "FUNCTION"
C L "RFStatistic_old" 22 1348 1 "FUNCTION"
C L "RFStatistic_old" 22 1348 1 "FUNCTION"
C L "RFStatistic_old" 22 1348 1 "FUNCTION"
C L "RFStatistic_old" 22 1348 1 "FUNCTION"
C L "RFStatistic_old" 22 1348 2 "FUNCTION"
C L "RFStatistic_old" 22 1348 1 "FUNCTION"
C L "RFStatistic_old" 22 1348 3 "FUNCTION"
C L "RFStatistic_old" 22 1348 1 "FUNCTION"
C L "RFStatistic" 22 1348 4 "FUNCTION"
V L "receive" 22 1974 "int8"
F G "RFStatistic" 22 1975 "int8(int8 receive)" "reuse for send bytes"
C L "RFStatistic" 22 1348 2 "FUNCTION"
C L "RFStatistic" 22 1348 1 "FUNCTION"
C L "RFStatistic" 22 1348 1 "FUNCTION"
C L "RFStatistic" 22 1348 1 "FUNCTION"
C L "RFStatistic" 22 1348 1 "FUNCTION"
C L "RFStatistic" 22 1348 2 "FUNCTION"
C L "RFStatistic" 22 1348 1 "FUNCTION"
C L "RFStatistic" 22 1348 1 "FUNCTION"
C L "RFStatistic" 22 1348 1 "FUNCTION"
C L "RFStatistic" 22 1348 1 "FUNCTION"
C L "RFArbitration" 22 1348 1 "FUNCTION"
V L "rf_arbi_pos" 22 2029 "int16"
F G "RFArbitration" 22 2030 "int8(int16 rf_arbi_pos)" "int success;"
C L "RFArbitration" 22 1348 2 "FUNCTION"
C L "RFArbitration" 22 1348 1 "FUNCTION"
C L "RFArbitration" 22 1348 1 "FUNCTION"
C L "RFArbitration" 22 1348 1 "FUNCTION"
C L "RFArbitration" 22 1348 1 "FUNCTION"
C L "RFArbitration" 22 1348 1 "FUNCTION"
C L "RFArbitration" 22 1348 1 "FUNCTION"
C L "RFArbitration" 22 1348 1 "FUNCTION"
C L "RFArbitration" 22 1348 2 "FUNCTION"
C L "RFArbitration" 22 1348 1 "FUNCTION"
C L "RFArbitration" 22 1348 1 "FUNCTION"
C L "RFArbitration" 22 1348 1 "FUNCTION"
C L "RFArbitration" 22 1348 1 "FUNCTION"
C L "RFArbitration" 22 1348 1 "FUNCTION"
C L "RFArbitration" 22 1348 1 "FUNCTION"
C L "RFArbitration" 22 1348 1 "FUNCTION"
C L "RFArbitration" 22 1348 2 "FUNCTION"
C L "RFArbitration" 22 1348 1 "FUNCTION"
C L "RFArbitration" 22 1348 1 "FUNCTION"
C L "RFArbitration" 22 1348 1 "FUNCTION"
F G "RFSendData" 22 2106 "int8(int16 rf_arbi_pos)"
C L "RFSendData" 22 1348 1 "FUNCTION"
C L "RFSendData" 22 1348 1 "FUNCTION"
C L "RFSendData" 22 1348 1 "FUNCTION"
C L "RFSendData" 22 1348 1 "FUNCTION"
C L "RFSendData" 22 1348 1 "FUNCTION"
C L "RFSendData" 22 1348 1 "FUNCTION"
C L "RFSendData" 22 1348 1 "FUNCTION"
C L "RFSendData" 22 1348 2 "FUNCTION"
C L "RFSendData" 22 1348 1 "FUNCTION"
C L "RFSendData" 22 1348 2 "FUNCTION"
C L "RFSendData" 22 1348 1 "FUNCTION"
C L "RFSendData" 22 1348 1 "FUNCTION"
C L "RFSendData" 22 1348 1 "FUNCTION"
C L "RFSendData" 22 1348 2 "FUNCTION"
C L "RFSendData" 22 1348 1 "FUNCTION"
C L "RFSendData" 22 1348 1 "FUNCTION"
C L "RFSendData" 22 1348 1 "FUNCTION"
C L "RFSendData" 22 1348 1 "FUNCTION"
C L "RFSendData" 22 1348 1 "FUNCTION"
C L "RFSendData" 22 1348 1 "FUNCTION"
C L "RFSendData" 22 1348 1 "FUNCTION"
C L "RFSendData" 22 1348 1 "FUNCTION"
C L "RFSendData" 22 1348 1 "FUNCTION"
C L "RFSendData" 22 1348 1 "FUNCTION"
C L "RFSendData" 22 1348 1 "FUNCTION"
C L "RFSendData" 22 1348 1 "FUNCTION"
C L "RFSendData" 22 1348 1 "FUNCTION"
C L "RFSendData" 22 1348 1 "FUNCTION"
C L "RFSendData" 22 1348 7 "FUNCTION"
C L "RFCheckSubscriptions" 22 1348 1 "FUNCTION"
F G "RFCheckSubscriptions" 22 2241 "int8(int16 rf_arbi_pos)" "search through subscriptions for early shutdown"
C L "RFCheckSubscriptions" 22 1348 1 "FUNCTION"
C L "RFCheckSubscriptions" 22 1348 1 "FUNCTION"
C L "RFCheckSubscriptions" 22 1348 1 "FUNCTION"
C L "RFCheckSubscriptions" 22 1348 2 "FUNCTION"
C L "RFCheckSubscriptions" 22 1348 1 "FUNCTION"
F G "RFReceiveData" 22 2283 "int8(int16 rf_arbi_pos)"
V L "ll_receive_len" 22 2284 "int8"
V L "crc16" 22 2285 "int16"
C L "RFReceiveData" 22 1348 1 "FUNCTION"
C L "RFReceiveData" 22 1348 1 "FUNCTION"
C L "RFReceiveData" 22 1348 1 "FUNCTION"
C L "RFReceiveData" 22 1348 1 "FUNCTION"
C L "RFReceiveData" 22 1348 1 "FUNCTION"
C L "RFReceiveData" 22 1348 1 "FUNCTION"
C L "RFReceiveData" 22 1348 1 "FUNCTION"
C L "RFReceiveData" 22 1348 2 "FUNCTION"
C L "RFReceiveData" 22 1348 1 "FUNCTION"
C L "RFReceiveData" 22 1348 2 "FUNCTION"
C L "RFReceiveData" 22 1348 1 "FUNCTION"
C L "RFReceiveData" 22 1348 1 "FUNCTION"
C L "RFReceiveData" 22 1348 1 "FUNCTION"
C L "RFReceiveData" 22 1348 2 "FUNCTION"
C L "RFReceiveData" 22 1348 1 "FUNCTION"
C L "RFReceiveData" 22 1348 1 "FUNCTION"
C L "RFReceiveData" 22 1348 2 "FUNCTION"
C L "RFReceiveData" 22 1348 1 "FUNCTION"
C L "RFReceiveData" 22 1348 1 "FUNCTION"
C L "RFReceiveData" 22 1348 1 "FUNCTION"
C L "RFReceiveData" 22 1348 1 "FUNCTION"
C L "RFReceiveData" 22 1348 1 "FUNCTION"
C L "RFReceiveData" 22 1348 2 "FUNCTION"
C L "RFReceiveData" 22 1348 1 "FUNCTION"
C L "RFReceiveData" 22 1348 1 "FUNCTION"
C L "RFReceiveData" 22 1348 1 "FUNCTION"
C L "RFReceiveData" 22 1348 1 "FUNCTION"
C L "RFReceiveData" 22 1348 1 "FUNCTION"
C L "RFReceiveData" 22 1348 1 "FUNCTION"
C L "RFReceiveData" 22 1348 1 "FUNCTION"
C L "RFReceiveData" 22 1348 1 "FUNCTION"
C L "RFReceiveData" 22 1348 1 "FUNCTION"
C L "RFReceiveData" 22 1348 1 "FUNCTION"
C L "RFReceiveData" 22 1348 1 "FUNCTION"
C L "RFReceiveData" 22 1348 3 "FUNCTION"
C L "RFReceiveData" 22 1348 2 "FUNCTION"
C L "RFReceiveData" 22 1348 1 "FUNCTION"
C L "RFReceiveData" 22 1348 1 "FUNCTION"
C L "RFReceiveData" 22 1348 1 "FUNCTION"
C L "RFReceiveData" 22 1348 1 "FUNCTION"
C L "RFReceiveData" 22 1348 1 "FUNCTION"
C L "RFReceiveData" 22 1348 1 "FUNCTION"
C L "RFReceiveData" 22 1348 1 "FUNCTION"
C L "RFReceiveScrambledByte" 22 1348 2 "FUNCTION"
F G "RFReceiveScrambledByte" 22 2491 "int8()"
C L "RFReceiveScrambledByte" 22 1348 1 "FUNCTION"
C L "RFReceiveScrambledByte" 22 1348 1 "FUNCTION"
C L "RFReceiveScrambledByte" 22 1348 1 "FUNCTION"
C L "RFReceiveScrambledByte" 22 1348 1 "FUNCTION"
C L "RFReceiveScrambledByte" 22 1348 1 "FUNCTION"
C L "RFReceiveScrambledByte" 22 1348 1 "FUNCTION"
C L "RFReceiveScrambledByte" 22 1348 1 "FUNCTION"
C L "RFReceiveScrambledByte" 22 1348 1 "FUNCTION"
F G "RFReceiveByte" 22 2513 "int8()"
C L "RFScramble" 22 1348 1 "FUNCTION"
F G "RFScramble" 22 2539 "int8()" "rf_transition0 is the rf_shift register of the RFScrambler"
C L "RFScramble" 22 1348 2 "FUNCTION"
C L "RFCreateAliveSymbol" 22 1348 1 "FUNCTION"
F G "RFCreateAliveSymbol" 22 2558 "int8()" "if (!bit_test(rf_random_l,0)) return 0b00000001;"
C L "RFCreateAliveSymbol" 22 1348 8 "FUNCTION"
C L "RFNewRandom" 22 1348 1 "FUNCTION"
F G "RFNewRandom" 22 2591 "int8()" "first the 16bit randomfunction"
C L "RFNewRandom" 22 1348 1 "FUNCTION"
C L "RFNewRandom" 22 1348 1 "FUNCTION"
C L "RFNewRandom" 22 1348 1 "FUNCTION"
C L "RFNewRandom" 22 1348 1 "FUNCTION"
C L "RFNewRandom" 22 1348 2 "FUNCTION"
C L "RFNewRandom" 22 1348 14 "FUNCTION"
C L "RFNewRandom" 22 1348 7 "FUNCTION"
F G "RFStop" 22 2667 "int8()"
C L "RFStop" 22 1348 2 "FUNCTION"
C L "RFStop" 22 1348 1 "FUNCTION"
V L "slots" 22 2684 "int8"
F G "RFDelaySlots" 22 2685 "int8(int8 slots)"
V L "target" 22 2687 "int16"
C L "RFDelaySlots" 22 1348 1 "FUNCTION"
C L "RFDelaySlots" 22 1348 1 "FUNCTION"
C L "RFMicroSecondsUntilNextSlot" 22 1348 1 "FUNCTION"
F G "RFMicroSecondsUntilNextSlot" 22 2698 "int16()"
V L "value" 22 2699 "int16"
C L "RF100usLeft" 22 1348 1 "FUNCTION"
F G "RF100usLeft" 22 2705 "int8()"
C L "RF200usLeft" 22 1348 1 "FUNCTION"
F G "RF200usLeft" 22 2711 "int8()"
C L "RF500usLeft" 22 1348 1 "FUNCTION"
F G "RF500usLeft" 22 2718 "int8()"
F G "RFShowSynchronization" 22 2728 "int8()"
C L "RFShowSynchronization" 22 1348 1 "FUNCTION"
F G "RFEvaluateStatistic" 22 2739 "int8()" "do this only on 18f platforms"
C L "RFEvaluateStatistic" 22 1348 1 "FUNCTION"
C L "RFEvaluateStatistic" 22 1348 1 "FUNCTION"
C L "RFEvaluateStatistic" 22 1348 1 "FUNCTION"
C L "RFEvaluateStatistic" 22 1348 2 "FUNCTION"
C L "RFEvaluateStatistic" 22 1348 2 "FUNCTION"
C L "RFEvaluateStatistic" 22 1348 3 "FUNCTION"
C L "RFEvaluateStatistic" 22 1348 1 "FUNCTION"
F G "LLGetIDFromHardware" 23 2 "int8()"
V L "buff" 23 3 "int8" "return;"
C L "LLGetIDFromHardware" 23 6 5 "FUNCTION"
C L "LLGetIDFromHardware" 23 6 24 "FUNCTION"
F G "LLInit" 23 71 "int8()"
C L "LLInit" 23 6 1 "FUNCTION"
C L "LLInit" 23 6 8 "FUNCTION"
C L "LLInit" 23 6 1 "FUNCTION"
C L "LLInit" 23 6 1 "FUNCTION"
F G "LLStart" 23 109 "int8()"
F G "LLStop" 23 115 "int8()"
C L "LLStop" 23 6 1 "FUNCTION"
F G "LLSlotEnd" 23 122 "int8()" "check if timeout for waiting packet"
C L "LLSlotEnd" 23 6 1 "FUNCTION"
C L "LLSlotEnd" 23 6 1 "FUNCTION"
C L "LLSlotEnd" 23 6 1 "FUNCTION"
C L "LLSlotEnd" 23 6 1 "FUNCTION"
F G "LLAbortSending" 23 151 "int8()"
F G "LLSetSendingSuccess" 23 170 "int8()" "update the states"
C L "LLSetSendingSuccess" 23 6 1 "FUNCTION"
C L "LLSetSendingSuccess" 23 6 1 "FUNCTION"
C L "LLSetSendingSuccess" 23 6 1 "FUNCTION"
C L "LLSetSendingSuccess" 23 6 1 "FUNCTION"
C L "LLSetSendingSuccess" 23 6 1 "FUNCTION"
C L "LLSetSendingSuccess" 23 6 1 "FUNCTION"
C L "LLSetSendingSuccess" 23 6 1 "FUNCTION"
F G "LLSendingBusy" 23 189 "int8()"
C L "LLGetSendSuccess" 23 6 1 "FUNCTION"
F G "LLGetSendSuccess" 23 196 "int8()"
F G "LLIsActive" 23 202 "int8()"
F G "LLLockReceiveBuffer" 23 209 "int8()"
C L "LLLockReceiveBuffer" 23 6 1 "FUNCTION"
F G "LLReceiveBufferLocked" 23 216 "int8()"
F G "LLReleaseReceiveBuffer" 23 223 "int8()"
C L "LLReleaseReceiveBuffer" 23 6 1 "FUNCTION"
F G "LLSetDataToOld" 23 230 "int8()"
F G "LLSetDataToNew" 23 235 "int8()"
F G "LLDataIsNew" 23 241 "int8()"
F G "LLGetFieldStrength" 23 251 "int8()"
V L "value" 23 255 "int8"
F G "LLSetFieldStrength" 23 256 "int8(int8 value)"
V L "header_data" 23 261 "*int8"
V L "payload_data" 23 261 "*int8"
V L "payload_size" 23 261 "int8"
F G "LLCalcCRC16" 23 262 "int16(*int8 header_data,*int8 payload_data,int8 payload_size)" "calcs a crc on LL_header, ACL_data, LL_tail"
V L "hb" 23 264 "int8"
V L "lb" 23 264 "int8"
V L "i" 23 264 "int8"
V L "tmp" 23 264 "int8"
C L "LLCalcCRC16" 23 6 1 "FUNCTION"
C L "LLSendPacket" 23 6 1 "FUNCTION"
V L "slot_limit" 23 304 "int8"
F G "LLSendPacket" 23 305 "int8(int8 slot_limit)" "long crc16; // makes RAM too full if local var is active"
C L "LLSendPacket" 23 6 1 "FUNCTION"
C L "LLSendPacket" 23 6 2 "FUNCTION"
C L "LLSendPacket" 23 6 1 "FUNCTION"
C L "LLSendPacket" 23 6 1 "FUNCTION"
F G "LLGetRemainingPayloadSpace" 23 341 "int8(int8 slot_limit)"
F G "LLSentPacketInThisSlot" 23 349 "int8(int8 slot_limit)"
V G "ACL_payload_send" 24 1 "int8[64]"
V G "ACL_payload_length" 24 2 "int8"
V G "ACL_send_buffer_locked" 24 4 "int1"
V G "ACL_ACM_answers" 24 5 "int1" "answer on ACM messages like helo and so on"
V G "ACL_write_position" 24 6 "int8"
F G "ACLStartUp" 24 17 "int8()"
V L "result" 24 18 "int8[10]"
V L "selftest_result" 24 19 "int8"
V L "i" 24 19 "int8"
C L "ACLStartUp" 24 21 3 "FUNCTION"
C L "ACLStartUp" 24 21 1 "FUNCTION"
C L "ACLStartUp" 24 21 1 "FUNCTION"
C L "ACLStartUp" 24 21 1 "FUNCTION"
C L "ACLStartUp" 24 21 1 "FUNCTION"
C L "ACLStartUp" 24 21 1 "FUNCTION"
C L "ACLStartUp" 24 21 1 "FUNCTION"
C L "ACLStartUp" 24 21 1 "FUNCTION"
C L "ACLStartUp" 24 21 1 "FUNCTION"
F G "ACLInit" 24 69 "int8()"
C L "ACLInit" 24 21 1 "FUNCTION"
C L "ACLInit" 24 21 1 "FUNCTION"
V L "LL_type_h" 24 109 "int8"
V L "LL_type_l" 24 109 "int8"
F G "ACLSubscribe" 24 110 "int8(int8 LL_type_h,int8 LL_type_l)"
V L "i" 24 111 "int8"
C L "ACLSubscribe" 24 21 1 "FUNCTION"
C L "ACLSubscribe" 24 21 1 "FUNCTION"
C L "ACLSubscribe" 24 21 1 "FUNCTION"
V L "LL_type_h" 24 130 "int8"
V L "LL_type_l" 24 130 "int8"
F G "ACLUnsubscribe" 24 131 "int8(int8 LL_type_h,int8 LL_type_l)"
V L "i" 24 132 "int8"
C L "ACLUnsubscribe" 24 21 1 "FUNCTION"
C L "ACLUnsubscribe" 24 21 1 "FUNCTION"
C L "ACLUnsubscribe" 24 21 1 "FUNCTION"
F G "ACLFlushSubscriptions" 24 147 "int8(int8 LL_type_l)"
V L "i" 24 148 "int8"
F G "ACLSubscribeAll" 24 162 "int8()"
F G "ACLAnswerOnACM" 24 167 "int8()"
F G "ACLNoAnswerOnACM" 24 171 "int8()"
F G "ACLSubscribeDefault" 24 181 "int8()"
V L "result" 24 182 "int8"
C L "ACLSubscribeDefault" 24 21 1 "FUNCTION"
V L "type_h" 24 192 "int8"
V L "type_l" 24 192 "int8"
F G "ACLVerifySubscription" 24 193 "int8(int8 type_h,int8 type_l)"
V L "i" 24 194 "int8"
C L "ACLVerifySubscription" 24 21 1 "FUNCTION"
C L "ACLProcessControlMessages" 24 21 2 "FUNCTION"
F G "ACLProcessControlMessages" 24 212 "int8(int8 type_l)"
C L "ACLProcessControlMessages" 24 21 1 "FUNCTION"
C L "ACLProcessControlMessages" 24 21 2 "FUNCTION"
C L "ACLProcessControlMessages" 24 21 1 "FUNCTION"
D G "LONGESTWDT" 24 225 "7	" "this is the longest wait-time which is accepted from the Software-WDT (2.304sec)"
V L "oldwdtvalue" 24 226 "int8"
V L "oldwdttest" 24 227 "int8"
V L "shutdownminutes" 24 228 "int8"
V L "shutdownseconds" 24 229 "int8"
V L "allseconds" 24 230 "int16"
V L "i" 24 231 "int16"
V L "timercycles" 24 232 "int16"
C L "ACLProcessControlMessages" 24 21 1 "FUNCTION"
C L "ACLProcessControlMessages" 24 21 1 "FUNCTION"
C L "ACLProcessControlMessages" 24 21 1 "FUNCTION"
C L "ACLProcessControlMessages" 24 21 1 "FUNCTION"
C L "ACLProcessControlMessages" 24 21 2 "FUNCTION"
C L "ACLProcessControlMessages" 24 21 2 "FUNCTION"
V L "fsvalue" 24 294 "int8"
C L "ACLProcessControlMessages" 24 21 1 "FUNCTION"
C L "ACLProcessControlMessages" 24 21 1 "FUNCTION"
C L "ACLProcessControlMessages" 24 21 1 "FUNCTION"
C L "ACLProcessControlMessages" 24 21 1 "FUNCTION"
C L "ACLProcessControlMessages" 24 21 1 "FUNCTION"
C L "ACLProcessControlMessages" 24 21 1 "FUNCTION"
C L "ACLProcessControlMessages" 24 21 2 "FUNCTION"
C L "ACLProcessControlMessages" 24 21 1 "FUNCTION"
C L "ACLProcessControlMessages" 24 21 2 "FUNCTION"
C L "ACLProcessControlMessages" 24 21 1 "FUNCTION"
C L "ACLProcessControlMessages" 24 21 1 "FUNCTION"
C L "ACLProcessControlMessages" 24 21 1 "FUNCTION"
C L "ACLProcessControlMessages" 24 21 1 "FUNCTION"
C L "ACLProcessControlMessages" 24 21 1 "FUNCTION"
C L "ACLProcessControlMessages" 24 21 1 "FUNCTION"
C L "ACLProcessControlMessages" 24 21 1 "FUNCTION"
V L "power" 24 421 "int8"
F G "ACLSetFieldStrength" 24 422 "int8(int8 power)"
F G "ACLSendingBusy" 24 428 "int8(int8 power)"
F G "ACLGetSendSuccess" 24 434 "int8(int8 power)"
V L "id1" 24 440 "*uint8_t"
V L "id2" 24 440 "*uint8_t"
F G "ACLIdEquals" 24 441 "int8(*uint8_t id1,*uint8_t id2)"
V L "i" 24 442 "int8"
V L "buffer" 24 450 "*int8"
F G "ACLMatchesMyIP" 24 451 "int8(*int8 buffer)"
V L "i" 24 452 "int8" "check bcast"
C L "ACLMatchesMyIP" 24 21 2 "FUNCTION"
F G "ACLAbortSending" 24 478 "int8()"
C L "ACLSendPacket" 24 21 2 "FUNCTION"
V L "slot_timeout" 24 490 "int8"
F G "ACLSendPacket" 24 491 "int8(int8 slot_timeout)" "check if sending busy or layer off"
C L "ACLSendPacket" 24 21 2 "FUNCTION"
C L "ACLSendPacket" 24 21 1 "FUNCTION"
C L "ACLSendPacket" 24 21 1 "FUNCTION"
F G "ACLClearSendData" 24 515 "int8(int8 slot_timeout)"
C L "ACLClearSendData" 24 21 1 "FUNCTION"
C L "ACLClearSendData" 24 21 3 "FUNCTION"
C L "ACLClearSendData" 24 21 1 "FUNCTION"
C L "ACLClearSendData" 24 21 1 "FUNCTION"
V L "payload" 24 534 "*int8"
V L "len" 24 534 "int8"
F G "ACLAddPayload" 24 535 "int8(*int8 payload,int8 len)"
C L "ACLAddPayload" 24 21 1 "FUNCTION"
C L "ACLAddPayload" 24 21 1 "FUNCTION"
V L "i" 24 543 "int8"
V L "last" 24 544 "int8"
C L "ACLAddPayload" 24 21 1 "FUNCTION"
C L "ACLAddNewType" 24 21 3 "FUNCTION"
V L "type_h" 24 566 "int8"
V L "type_l" 24 566 "int8"
F G "ACLAddNewType" 24 567 "int8(int8 type_h,int8 type_l)"
C L "ACLAddNewType" 24 21 1 "FUNCTION"
C L "ACLAddNewType" 24 21 1 "FUNCTION"
C L "ACLAddNewType" 24 21 1 "FUNCTION"
C L "ACLAddNewType" 24 21 1 "FUNCTION"
V L "data" 24 585 "*int8"
V L "len" 24 585 "int8"
F G "ACLAddDataN" 24 586 "int8(*int8 data,int8 len)"
C L "ACLAddDataN" 24 21 1 "FUNCTION"
C L "ACLAddDataN" 24 21 1 "FUNCTION"
C L "ACLAddDataN" 24 21 1 "FUNCTION"
C L "ACLAddDataN" 24 21 1 "FUNCTION"
V L "data" 24 602 "int8"
F G "ACLAddData" 24 603 "int8(int8 data,int8 len)"
C L "ACLAddData" 24 21 1 "FUNCTION"
C L "ACLAddData" 24 21 1 "FUNCTION"
C L "ACLAddData" 24 21 1 "FUNCTION"
C L "ACLAddData" 24 21 1 "FUNCTION"
F G "ACLGetRemainingPayloadSpace" 24 620 "int8(int8 data,int8 len)" "return (LL_payload_length-ACL_payload_length);"
F G "ACLGetSrcId" 24 627 "*int8(int8 data,int8 len)"
F G "ACLGetLocalId" 24 632 "*int8(int8 len)"
F G "ACLGetReceivedFieldstrength" 24 637 "int8(int8 len)"
F G "ACLGetReceivedPayloadLength" 24 643 "int8()"
F G "ACLGetSubject" 24 648 "*int8()"
V L "data" 24 652 "*int8"
F G "ACLGetDataLength" 24 653 "int8(*int8 data)"
V L "data" 24 657 "*int8"
F G "ACLGetDataTypeHi" 24 658 "int8(*int8 data)"
V L "data" 24 662 "*int8"
F G "ACLGetDataTypeLo" 24 663 "int8(*int8 data)"
V L "data" 24 667 "*int8"
F G "ACLGetNextTupleData" 24 668 "*int8(*int8 data)"
D G "ACLGetTupleData" 24 677 "(X) &X[3]"
D G "ACLGetTupleLength" 24 678 "(X) X[2]"
F G "ACLGetReceivedSubjectData" 24 682 "*int8()"
C L "ACLGetReceivedData" 24 21 1 "FUNCTION"
V L "type_h" 24 687 "int8"
V L "type_l" 24 687 "int8"
F G "ACLGetReceivedData" 24 688 "*int8(int8 type_h,int8 type_l)"
V L "i" 24 689 "int8"
V L "type_h" 24 701 "int8"
V L "type_l" 24 701 "int8"
F G "ACLGetReceivedDataLength" 24 702 "sint8(int8 type_h,int8 type_l)"
V L "data" 24 703 "*int8"
V L "type_h" 24 709 "int8"
V L "type_l" 24 709 "int8"
V L "position" 24 709 "int8"
F G "ACLGetReceivedByte" 24 710 "int8(int8 type_h,int8 type_l,int8 position)"
V L "data" 24 711 "*int8"
V L "type_h" 24 717 "int8"
V L "type_l" 24 717 "int8"
F G "ACLFoundReceivedType" 24 718 "int8(int8 type_h,int8 type_l)"
V L "ignore" 24 724 "int8"
V L "pass" 24 724 "int8"
F G "ACLSetControlMessagesBehaviour" 24 725 "int8(int8 ignore,int8 pass)"
C L "ACLSetControlMessagesBehaviour" 24 21 1 "FUNCTION"
C L "ACLSetControlMessagesBehaviour" 24 21 1 "FUNCTION"
F G "ACLSentPacketInThisSlot" 24 733 "int8(int8 ignore,int8 pass)"
F G "ACLStart" 24 739 "int8(int8 ignore,int8 pass)"
F G "ACLStop" 24 744 "int8(int8 ignore,int8 pass)"
F G "ACLLockReceiveBuffer" 24 750 "int8(int8 ignore,int8 pass)"
F G "ACLReceiveBufferLocked" 24 755 "int8(int8 ignore,int8 pass)"
F G "ACLReleaseReceiveBuffer" 24 761 "int8(int8 ignore,int8 pass)"
F G "ACLSetDataToOld" 24 767 "int8(int8 ignore,int8 pass)"
F G "ACLSetDataToNew" 24 772 "int8(int8 ignore,int8 pass)"
F G "ACLDataIsNew" 24 778 "int8(int8 ignore,int8 pass)"
F G "ACLDataReceivedInThisSlot" 24 783 "int8(int8 ignore,int8 pass)"
F G "ACLAnyDataIsNewNow" 24 789 "int8(int8 ignore,int8 pass)"
F G "ACLXAddressedDataIsAddressed" 24 794 "int8(int8 ignore,int8 pass)"
F G "ACLAddressedDataIsNew" 24 799 "int8(int8 pass)"
V L "cad" 24 800 "*int8"
F G "ACLAddressedDataIsNewNow" 24 813 "int8()"
C L "ACLSendPacketAddressed" 24 21 1 "FUNCTION"
V L "add1" 24 820 "int8"
V L "add2" 24 820 "int8"
V L "add3" 24 820 "int8"
V L "add4" 24 820 "int8"
V L "add5" 24 820 "int8"
V L "add6" 24 820 "int8"
V L "add7" 24 820 "int8"
V L "add8" 24 820 "int8"
V L "timeout" 24 820 "int8"
F G "ACLSendPacketAddressed" 24 821 "int8(int8 add1,int8 add2,int8 add3,int8 add4,int8 add5,int8 add6,int8 add7,int8 add8,int8 timeout)"
C L "ACLSendPacketAddressed" 24 21 1 "FUNCTION"
F G "ACLWaitForReady" 24 839 "int8(int8 add1,int8 add2,int8 add3,int8 add4,int8 add5,int8 add6,int8 add7,int8 add8,int8 timeout)"
V L "ledstyle" 25 1 "int8"
F G "AppSetLEDBehaviour" 25 2 "int8(int8 ledstyle,int8 add2,int8 add3,int8 add4,int8 add5,int8 add6,int8 add7,int8 add8,int8 timeout)"
C L "AppSetLEDs" 25 10 1 "FUNCTION"
F G "AppSetLEDs" 25 13 "int8(int8 ledstyle,int8 add2,int8 add3,int8 add4,int8 add5,int8 add6,int8 add7,int8 add8,int8 timeout)"
C L "AppSetLEDs" 25 10 1 "FUNCTION"
C L "AppSetLEDs" 25 10 1 "FUNCTION"
C L "AppSetLEDs" 25 10 1 "FUNCTION"
C L "AppSetLEDs" 25 10 1 "FUNCTION"
C L "AppSetLEDs" 25 10 1 "FUNCTION"
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
C G "" 26 1 1 "*"
D G "__SENSORI2C_C__" 26 23 "002"
C L "SensorI2CInit" 26 26 1 "*"
C L "SensorI2CInit" 26 26 1 "*"
F G "SensorI2CInit" 26 30 "int8(int8 ledstyle,int8 add2,int8 add3,int8 add4,int8 add5,int8 add6,int8 add7,int8 add8,int8 timeout)" "* Switches all i2c sensor devices on"
F G "SensorI2COn" 26 35 "int8(int8 add2,int8 add3,int8 add4,int8 add5,int8 add6,int8 add7,int8 add8,int8 timeout)" "* Switches all i2c sensor devices off"
F G "SensorI2COff" 26 40 "int8(int8 add3,int8 add4,int8 add5,int8 add6,int8 add7,int8 add8,int8 timeout)" "* Raises i2c start condition on the sensor i2c bus"
F G "SensorI2CStart" 26 46 "int8(int8 add4,int8 add5,int8 add6,int8 add7,int8 add8,int8 timeout)" "* Writes a byte on the sensor i2c bus"
C L "SensorI2CStart" 26 48 1 "*"
C L "SensorI2CStart" 26 48 1 "*"
V L "data" 26 54 "int8"
F G "SensorI2CWrite" 26 54 "int8(int8 data,int8 add6,int8 add7,int8 add8,int8 timeout)" "* Reads a byte from the sensor i2c bus"
C L "SensorI2CWrite" 26 56 1 "*"
C L "SensorI2CWrite" 26 56 1 "*"
V L "data" 26 62 "int8"
F G "SensorI2CRead" 26 62 "int8(int8 data,int8 add8,int8 timeout)" "* Raises i2c stop condition on the sensor i2c bus"
F G "SensorI2CStop" 26 68 "int8(int8 timeout)"
F G "SensorI2CInit" 26 74 "int8()"
C L "SensorI2CInit" 26 56 1 "FUNCTION"
C L "SensorI2CInit" 26 56 1 "FUNCTION"
C L "SensorI2CInit" 26 56 1 "FUNCTION"
C L "SensorI2CInit" 26 56 1 "FUNCTION"
F G "SensorI2COn" 26 83 "int8()"
F G "SensorI2COff" 26 89 "int8()"
F G "SensorI2CStart" 26 96 "int8()"
V L "data" 26 103 "int8"
F G "SensorI2CWrite" 26 104 "int8(int8 data)"
V L "data" 26 112 "int8"
F G "SensorI2CRead" 26 113 "int8(int8 data)"
F G "SensorI2CStop" 26 121 "int8()"
C G "" 27 1 1 "*"
C G "" 27 1 1 "*"
C G "" 27 1 1 "*"
C G "" 27 1 1 "*"
C G "" 27 1 1 "*"
C G "" 27 1 1 "*"
D G "LIGHT_SENSOR" 27 15 "001"
D G "LightSensorOn" 27 21 "()	output_high(PIN_LIGHT_TSL250_POWER)"
D G "LightSensorOff" 27 26 "()	output_low(PIN_LIGHT_TSL250_POWER)"
C L "LightSensorInit" 27 29 1 "*"
C L "LightSensorInit" 27 29 1 "*"
C L "LightSensorInit" 27 29 1 "*"
F G "LightSensorInit" 27 37 "int8()"
C L "LightSensorInit" 27 29 1 "FUNCTION"
C L "LightSensorInit" 27 29 1 "FUNCTION"
C L "LightSensorInit" 27 29 1 "FUNCTION"
C L "LightSensorInit" 27 29 1 "FUNCTION"
C L "LightSensorGet" 27 48 1 "*"
C L "LightSensorGet" 27 48 1 "*"
C L "LightSensorGet" 27 48 1 "*"
V L "value" 27 53 "*int8"
F G "LightSensorGet" 27 54 "int8(*int8 value)"
C L "LightSensorPrepare" 27 62 1 "*"
C L "LightSensorPrepare" 27 62 1 "*"
C L "LightSensorPrepare" 27 62 1 "*"
F G "LightSensorPrepare" 27 68 "int8()" "set channel"
C L "LightSensorPrepare" 27 62 1 "FUNCTION"
C L "LightSensorPrepare" 27 62 1 "FUNCTION"
C G "" 27 84 1 "*"
C G "" 27 84 1 "*"
C G "" 27 84 1 "*"
C G "" 27 84 1 "*"
C G "" 27 84 1 "*"
C G "" 27 84 1 "*"
D G "LIGHTGENERICSENSORPACKINACL" 27 95 ""
V L "type" 27 96 "int8"
V L "data" 27 96 "*int8"
V L "dataLength" 27 96 "int8"
V L "index" 27 96 "int8"
F G "LightGenericSensorPackInACL" 27 97 "int8(int8 type,*int8 data,int8 dataLength,int8 index)"
V L "i" 27 98 "int8"
C L "LightGenericSensorPackInACL" 27 84 1 "FUNCTION"
C L "LightGenericSensorPackInACL" 27 84 1 "FUNCTION"
C L "LightGenericSensorPackInACL" 27 84 1 "FUNCTION"
C L "LightGenericSensorPackInACL" 27 84 1 "FUNCTION"
C L "LightGenericSensorPackInACL" 27 84 1 "FUNCTION"
C L "LightGenericSensorPackInACL" 27 84 1 "FUNCTION"
C L "LightSensorPackInACL" 27 84 1 "FUNCTION"
C L "LightSensorPackInACL" 27 120 1 "*"
C L "LightSensorPackInACL" 27 120 1 "*"
C L "LightSensorPackInACL" 27 120 1 "*"
C L "LightSensorPackInACL" 27 120 1 "*"
C L "LightSensorPackInACL" 27 120 1 "*"
V L "value" 27 128 "int8"
F G "LightSensorPackInACL" 27 129 "int8(int8 value)"
V L "ret" 27 131 "int8"
C L "LightSensorPackInACL" 27 120 1 "FUNCTION"
C G "" 28 1 1 "*"
C G "" 28 1 1 "*"
C G "" 28 1 1 "*"
C G "" 28 1 1 "*"
C G "" 28 1 1 "*"
C G "" 28 1 1 "*"
C G "" 28 1 1 "*"
C G "" 28 1 1 "*"
C G "" 28 1 1 "*"
C G "" 28 1 1 "*"
D G "FORCE_SENSOR" 28 22 "003"
D G "ForceSensorOn" 28 27 "()	output_high(PIN_FORCE_FSR_POWER)"
D G "ForceSensorOff" 28 32 "()	output_low(PIN_FORCE_FSR_POWER)"
C L "ForceSensorInit" 28 35 1 "*"
C L "ForceSensorInit" 28 35 1 "*"
C L "ForceSensorInit" 28 35 1 "*"
F G "ForceSensorInit" 28 43 "int8()"
C L "ForceSensorInit" 28 35 1 "FUNCTION"
C L "ForceSensorInit" 28 35 1 "FUNCTION"
C L "ForceSensorInit" 28 35 1 "FUNCTION"
C L "ForceSensorInit" 28 35 1 "FUNCTION"
C L "ForceSensorGet" 28 57 1 "*"
C L "ForceSensorGet" 28 57 1 "*"
C L "ForceSensorGet" 28 57 1 "*"
V L "value" 28 62 "*int8"
F G "ForceSensorGet" 28 63 "int8(*int8 value)"
C L "ForceSensorPrepare" 28 71 1 "*"
C L "ForceSensorPrepare" 28 71 1 "*"
C L "ForceSensorPrepare" 28 71 1 "*"
F G "ForceSensorPrepare" 28 77 "int8()" "set channel"
C L "ForceSensorPrepare" 28 71 1 "FUNCTION"
C L "ForceSensorPrepare" 28 71 1 "FUNCTION"
C L "ForceSensorPackInACL" 28 93 1 "*"
C L "ForceSensorPackInACL" 28 93 1 "*"
C L "ForceSensorPackInACL" 28 93 1 "*"
C L "ForceSensorPackInACL" 28 93 1 "*"
C L "ForceSensorPackInACL" 28 93 1 "*"
V L "value" 28 101 "int8"
F G "ForceSensorPackInACL" 28 102 "int8(int8 value)"
C L "ForceSensorPackInACL" 28 93 1 "FUNCTION"
C L "ForceSensorPackInACL" 28 93 1 "FUNCTION"
C L "ForceSensorPackInACL" 28 93 1 "FUNCTION"
C L "ForceSensorPackInACL" 28 93 1 "FUNCTION"
C L "ForceSensorPackInACL" 28 93 1 "FUNCTION"
C G "" 29 1 1 "*"
C G "" 29 1 1 "*"
C G "" 29 1 1 "*"
C G "" 29 1 1 "*"
C G "" 29 1 1 "*"
C G "" 29 1 1 "*"
C G "" 29 1 1 "*"
C G "" 29 1 1 "*"
D G "AUDIO_SENSOR" 29 18 "002"
D G "AudioSensorOn" 29 24 "()	output_high(PIN_AUDIO_MIC_POWER)"
D G "AudioSensorOff" 29 29 "()	output_low(PIN_AUDIO_MIC_POWER)"
C L "AudioSensorInit" 29 32 1 "*"
C L "AudioSensorInit" 29 32 1 "*"
C L "AudioSensorInit" 29 32 1 "*"
F G "AudioSensorInit" 29 40 "int8()"
C L "AudioSensorInit" 29 32 1 "FUNCTION"
C L "AudioSensorInit" 29 32 1 "FUNCTION"
C L "AudioSensorInit" 29 32 1 "FUNCTION"
C L "AudioSensorInit" 29 32 1 "FUNCTION"
C L "AudioSensorGet" 29 51 1 "*"
C L "AudioSensorGet" 29 51 1 "*"
C L "AudioSensorGet" 29 51 1 "*"
V L "value" 29 56 "*int8"
F G "AudioSensorGet" 29 57 "int8(*int8 value)"
C L "AudioSensorPrepare" 29 65 1 "*"
C L "AudioSensorPrepare" 29 65 1 "*"
C L "AudioSensorPrepare" 29 65 1 "*"
F G "AudioSensorPrepare" 29 71 "int8()" "set channel"
C L "AudioSensorPrepare" 29 65 1 "FUNCTION"
C L "AudioSensorPrepare" 29 65 1 "FUNCTION"
C L "AudioCalcVolume" 29 88 1 "*"
C L "AudioCalcVolume" 29 88 1 "*"
C L "AudioCalcVolume" 29 88 1 "*"
C L "AudioCalcVolume" 29 88 1 "*"
C L "AudioCalcVolume" 29 88 1 "*"
V L "AudioRawData" 29 95 "*int8"
V L "AudioArraySize" 29 95 "int8"
F G "AudioCalcVolume" 29 96 "int8(*int8 AudioRawData,int8 AudioArraySize)"
V L "i" 29 97 "int8"
V L "DCoffset" 29 98 "int8"
V L "Pave" 29 99 "int8"
V L "TempSum" 29 100 "int16"
V L "temp" 29 101 "int8" "first calc DCoffset as median = E{AudioRawData}"
C L "AudioCalcVolume" 29 88 1 "FUNCTION"
C L "AudioSensorGetVolume" 29 142 1 "*"
C L "AudioSensorGetVolume" 29 142 1 "*"
C L "AudioSensorGetVolume" 29 142 1 "*"
C L "AudioSensorGetVolume" 29 142 1 "*"
V L "volume" 29 148 "*int8"
F G "AudioSensorGetVolume" 29 149 "int8(*int8 volume)"
V L "TempSum" 29 150 "int16"
V L "TempSum2" 29 151 "int16"
V L "i" 29 153 "int8"
V L "DCoffset" 29 154 "int8"
V L "Pave" 29 155 "int8"
V L "temp" 29 156 "int8" "first calc DCoffset as median = E{AudioRawData}"
C L "AudioSensorGetVolume" 29 142 1 "FUNCTION"
C L "AudioSensorGetVolume" 29 142 5 "FUNCTION"
C L "AudioSensorGetVolume" 29 142 2 "FUNCTION"
C L "AudioSensorGetVolume" 29 142 8 "FUNCTION"
C L "AudioSensorPackInACL" 29 228 1 "*"
C L "AudioSensorPackInACL" 29 228 1 "*"
C L "AudioSensorPackInACL" 29 228 1 "*"
C L "AudioSensorPackInACL" 29 228 1 "*"
C L "AudioSensorPackInACL" 29 228 1 "*"
C L "AudioSensorPackInACL" 29 228 1 "*"
C L "AudioSensorPackInACL" 29 228 1 "*"
V L "type" 29 238 "int8"
V L "data" 29 238 "*int8"
V L "dataLength" 29 238 "int8"
F G "AudioSensorPackInACL" 29 239 "int8(int8 type,*int8 data,int8 dataLength)"
V L "i" 29 240 "int8"
C L "AudioSensorPackInACL" 29 228 1 "FUNCTION"
C L "AudioSensorPackInACL" 29 228 1 "FUNCTION"
C L "AudioSensorPackInACL" 29 228 1 "FUNCTION"
C L "AudioSensorPackInACL" 29 228 1 "FUNCTION"
C L "AudioSensorPackInACL" 29 228 1 "FUNCTION"
C L "AudioSensorPackInACL" 29 228 1 "FUNCTION"
C G "" 30 1 1 "*"
C G "" 30 1 1 "*"
C G "" 30 1 1 "*"
C G "" 30 1 1 "*"
C G "" 30 1 1 "*"
C G "" 30 1 1 "*"
D G "ACCL_SENSOR" 30 16 "001"
D G "AcclSensorOn" 30 22 "()	output_high(PIN_ACCL_ADXL_POWER)"
D G "AcclSensorOff" 30 27 "()	output_low(PIN_ACCL_ADXL_POWER)"
C L "AcclSensorInit" 30 30 1 "*"
C L "AcclSensorInit" 30 30 1 "*"
C L "AcclSensorInit" 30 30 1 "*"
F G "AcclSensorInit" 30 38 "int8()"
C L "AcclSensorInit" 30 30 1 "FUNCTION"
C L "AcclSensorInit" 30 30 1 "FUNCTION"
C L "AcclSensorInit" 30 30 1 "FUNCTION"
C L "AcclSensorInit" 30 30 1 "FUNCTION"
C L "AcclSensorInit" 30 30 1 "FUNCTION"
C L "AcclSensorPrepare" 30 50 1 "*"
C L "AcclSensorPrepare" 30 50 1 "*"
F G "AcclSensorPrepare" 30 55 "int8()" "nothing to do here??? yes: wait for adxl to settle after turn on"
C L "AcclXSensorGetDuty" 30 64 1 "*"
C L "AcclXSensorGetDuty" 30 64 1 "*"
C L "AcclXSensorGetDuty" 30 64 1 "*"
C L "AcclXSensorGetDuty" 30 64 1 "*"
V L "dutyHi" 30 70 "*int16"
V L "dutyLo" 30 70 "*int16"
F G "AcclXSensorGetDuty" 30 71 "int8(*int16 dutyHi,*int16 dutyLo)"
V L "xt1" 30 72 "int16"
V L "xt2" 30 72 "int16"
C L "AcclXSensorGetDuty" 30 64 1 "FUNCTION"
C L "AcclXSensorGetDuty" 30 64 1 "FUNCTION"
C L "AcclXSensorGetDuty" 30 64 1 "FUNCTION"
C L "AcclXSensorGetDuty" 30 64 1 "FUNCTION"
C L "AcclXSensorGetDuty" 30 64 1 "FUNCTION"
C L "AcclYSensorGetDuty" 30 90 1 "*"
C L "AcclYSensorGetDuty" 30 90 1 "*"
C L "AcclYSensorGetDuty" 30 90 1 "*"
C L "AcclYSensorGetDuty" 30 90 1 "*"
V L "dutyHi" 30 96 "*int16"
V L "dutyLo" 30 96 "*int16"
F G "AcclYSensorGetDuty" 30 97 "int8(*int16 dutyHi,*int16 dutyLo)"
V L "yt1" 30 98 "int16"
V L "yt2" 30 98 "int16"
C L "AcclYSensorGetDuty" 30 90 1 "FUNCTION"
C L "AcclYSensorGetDuty" 30 90 1 "FUNCTION"
C L "AcclYSensorGetDuty" 30 90 1 "FUNCTION"
C L "AcclYSensorGetDuty" 30 90 1 "FUNCTION"
C L "AcclYSensorGetDuty" 30 90 1 "FUNCTION"
C L "AcclSensorGetGravity" 30 116 1 "*"
C L "AcclSensorGetGravity" 30 116 1 "*"
C L "AcclSensorGetGravity" 30 116 1 "*"
C L "AcclSensorGetGravity" 30 116 1 "*"
C L "AcclSensorGetGravity" 30 116 1 "*"
C L "AcclSensorGetGravity" 30 116 1 "*"
C L "AcclSensorGetGravity" 30 116 1 "*"
V L "g" 30 127 "*sint16"
V L "dutyHi" 30 127 "int16"
V L "dutyLo" 30 127 "int16"
F G "AcclSensorGetGravity" 30 128 "int8(*sint16 g,int16 dutyHi,int16 dutyLo)" "unsigned long yt1,yt2;"
C L "AcclSensorGetGravity" 30 116 11 "FUNCTION"
C L "AcclSensorGetGravity" 30 130 2 "*g"
V L "xt1" 30 153 "int16"
V L "xt2" 30 153 "int16"
V L "sum_div_2" 30 154 "int16"
V L "acl_const" 30 155 "int16"
V L "res" 30 156 "sint16"
C L "AcclXSensorGetGravity" 30 130 1 "FUNCTION"
C L "AcclXSensorGetGravity" 30 175 1 "*"
C L "AcclXSensorGetGravity" 30 175 1 "*"
C L "AcclXSensorGetGravity" 30 175 1 "*"
C L "AcclXSensorGetGravity" 30 175 1 "*"
V L "g" 30 181 "*sint16"
F G "AcclXSensorGetGravity" 30 182 "int8(*sint16 g)"
V L "dutyHi" 30 183 "int16"
V L "dutyLo" 30 183 "int16"
V L "ret" 30 184 "int8"
C L "AcclYSensorGetGravity" 30 192 1 "*"
C L "AcclYSensorGetGravity" 30 192 1 "*"
C L "AcclYSensorGetGravity" 30 192 1 "*"
C L "AcclYSensorGetGravity" 30 192 1 "*"
V L "g" 30 198 "*sint16"
F G "AcclYSensorGetGravity" 30 199 "int8(*sint16 g)"
V L "dutyHi" 30 200 "int16"
V L "dutyLo" 30 200 "int16"
V L "ret" 30 201 "int8"
C L "AcclXSensorPackInACL" 30 210 1 "*"
C L "AcclXSensorPackInACL" 30 210 1 "*"
C L "AcclXSensorPackInACL" 30 210 1 "*"
C L "AcclXSensorPackInACL" 30 210 1 "*"
C L "AcclXSensorPackInACL" 30 210 1 "*"
V L "value" 30 218 "sint16"
F G "AcclXSensorPackInACL" 30 219 "int8(sint16 value)"
C L "AcclXSensorPackInACL" 30 210 1 "FUNCTION"
C L "AcclXSensorPackInACL" 30 210 1 "FUNCTION"
C L "AcclXSensorPackInACL" 30 210 1 "FUNCTION"
C L "AcclXSensorPackInACL" 30 210 1 "FUNCTION"
C L "AcclXSensorPackInACL" 30 210 1 "FUNCTION"
C L "AcclXSensorPackInACL" 30 210 1 "FUNCTION"
C L "AcclYSensorPackInACL" 30 237 1 "*"
C L "AcclYSensorPackInACL" 30 237 1 "*"
C L "AcclYSensorPackInACL" 30 237 1 "*"
C L "AcclYSensorPackInACL" 30 237 1 "*"
C L "AcclYSensorPackInACL" 30 237 1 "*"
V L "value" 30 245 "sint16"
F G "AcclYSensorPackInACL" 30 246 "int8(sint16 value)"
C L "AcclYSensorPackInACL" 30 237 1 "FUNCTION"
C L "AcclYSensorPackInACL" 30 237 1 "FUNCTION"
C L "AcclYSensorPackInACL" 30 237 1 "FUNCTION"
C L "AcclYSensorPackInACL" 30 237 1 "FUNCTION"
C L "AcclYSensorPackInACL" 30 237 1 "FUNCTION"
C L "AcclYSensorPackInACL" 30 237 1 "FUNCTION"
C G "" 31 1 1 "*"
C G "" 31 1 1 "*"
C G "" 31 1 1 "*"
C G "" 31 1 1 "*"
C G "" 31 1 1 "*"
C G "" 31 1 1 "*"
D G "ACCL_Z_SENSOR" 31 16 "001"
D G "AcclZSensorOn" 31 22 "()	output_high(PIN_ACCL_ADXL_POWER_Z)"
D G "AcclZSensorOff" 31 27 "()	output_low(PIN_ACCL_ADXL_POWER_Z)"
C L "AcclZSensorInit" 31 30 1 "*"
C L "AcclZSensorInit" 31 30 1 "*"
C L "AcclZSensorInit" 31 30 1 "*"
F G "AcclZSensorInit" 31 38 "int8()"
C L "AcclZSensorInit" 31 30 1 "FUNCTION"
C L "AcclZSensorInit" 31 30 1 "FUNCTION"
C L "AcclZSensorInit" 31 30 1 "FUNCTION"
C L "AcclZSensorInit" 31 30 1 "FUNCTION"
C L "AcclZSensorPrepare" 31 49 1 "*"
C L "AcclZSensorPrepare" 31 49 1 "*"
F G "AcclZSensorPrepare" 31 54 "int8()" "nothing to do here???"
C L "AcclZSensorGetDuty" 31 64 1 "*"
C L "AcclZSensorGetDuty" 31 64 1 "*"
C L "AcclZSensorGetDuty" 31 64 1 "*"
C L "AcclZSensorGetDuty" 31 64 1 "*"
V L "dutyHi" 31 70 "*int16"
V L "dutyLo" 31 70 "*int16"
F G "AcclZSensorGetDuty" 31 71 "int8(*int16 dutyHi,*int16 dutyLo)"
V L "zt1" 31 72 "int16"
V L "zt2" 31 72 "int16"
C L "AcclZSensorGetDuty" 31 64 1 "FUNCTION"
C L "AcclZSensorGetDuty" 31 64 1 "FUNCTION"
C L "AcclZSensorGetDuty" 31 64 1 "FUNCTION"
C L "AcclZSensorGetDuty" 31 64 1 "FUNCTION"
C L "AcclZSensorGetDuty" 31 64 1 "FUNCTION"
C L "AcclZSensorGetGravity" 31 91 1 "*"
C L "AcclZSensorGetGravity" 31 91 1 "*"
C L "AcclZSensorGetGravity" 31 91 1 "*"
C L "AcclZSensorGetGravity" 31 91 1 "*"
C L "AcclZSensorGetGravity" 31 91 1 "*"
C L "AcclZSensorGetGravity" 31 91 1 "*"
C L "AcclZSensorGetGravity" 31 91 2 "*"
C L "AcclZSensorGetGravity" 31 125 1 "*"
C L "AcclZSensorGetGravity" 31 125 1 "*"
C L "AcclZSensorGetGravity" 31 125 1 "*"
C L "AcclZSensorGetGravity" 31 125 1 "*"
V L "g" 31 131 "*sint16"
F G "AcclZSensorGetGravity" 31 132 "int8(*sint16 g)"
V L "dutyHi" 31 133 "int16"
V L "dutyLo" 31 133 "int16"
V L "ret" 31 134 "int8"
C L "AcclZSensorPackInACL" 31 143 1 "*"
C L "AcclZSensorPackInACL" 31 143 1 "*"
C L "AcclZSensorPackInACL" 31 143 1 "*"
C L "AcclZSensorPackInACL" 31 143 1 "*"
C L "AcclZSensorPackInACL" 31 143 1 "*"
V L "value" 31 151 "sint16"
F G "AcclZSensorPackInACL" 31 152 "int8(sint16 value)"
C L "AcclZSensorPackInACL" 31 143 1 "FUNCTION"
C L "AcclZSensorPackInACL" 31 143 1 "FUNCTION"
C L "AcclZSensorPackInACL" 31 143 1 "FUNCTION"
C L "AcclZSensorPackInACL" 31 143 1 "FUNCTION"
C L "AcclZSensorPackInACL" 31 143 1 "FUNCTION"
C L "AcclZSensorPackInACL" 31 143 1 "FUNCTION"
C G "" 32 1 1 "*"
C G "" 32 1 1 "*"
C G "" 32 1 1 "*"
C G "" 32 1 1 "*"
C G "" 32 1 1 "*"
D G "TEMPERATURE_SENSOR" 32 14 "001"
D G "I2C_TEMPERATURE_ID" 32 16 "0b10010000"
D G "TemperatureSensorOn" 32 21 "()	output_high(PIN_TEMP_MCP9800_POWER)"
D G "TemperatureSensorOff" 32 26 "()	output_low(PIN_TEMP_MCP9800_POWER)"
C G "" 32 29 1 "*"
C G "" 32 29 1 "*"
D G "MCP9800_REG_CONFIG" 32 36 "1"
D G "MCP9800_CONFIG_ONE_SHOT" 32 38 " (1<<7)"
D G "MCP9800_CONFIG_9BIT" 32 40 " (0<<5)"
D G "MCP9800_CONFIG_10BIT" 32 41 " (1<<5)"
D G "MCP9800_CONFIG_11BIT" 32 42 " (2<<5)"
D G "MCP9800_CONFIG_12BIT" 32 43 " (3<<5)"
D G "MCP9800_CONFIG_FAULTQ_1" 32 45 " (0<<3)"
D G "MCP9800_CONFIG_FAULTQ_2" 32 46 " (1<<3)"
D G "MCP9800_CONFIG_FAULTQ_4" 32 47 " (2<<3)"
D G "MCP9800_CONFIG_FAULTQ_6" 32 48 " (3<<3)"
D G "MCP9800_CONFIG_ALERT_HIGH" 32 50 " (1<<2)"
D G "MCP9800_CONFIG_ALERT_LOW" 32 51 " (0<<2)"
D G "MCP9800_CONFIG_INT_MODE" 32 53 " (1<<1)"
D G "MCP9800_CONFIG_CMP_MODE" 32 54 " (0<<1)"
D G "MCP9800_CONFIG_SHUTDOWN" 32 56 " (1<<0)"
F G "TemperatureSensorInit" 32 59 "int8()"
C L "TemperatureSensorInit" 32 29 1 "FUNCTION"
C L "TemperatureSensorInit" 32 29 1 "FUNCTION"
C L "TemperatureSensorInit" 32 29 1 "FUNCTION"
C L "TemperatureSensorInit" 32 29 1 "FUNCTION"
C L "TemperatureSensorInit" 32 29 1 "FUNCTION"
C L "TemperatureSensorInit" 32 29 1 "FUNCTION"
C L "TemperatureSensorPrepare" 32 83 1 "*"
C L "TemperatureSensorPrepare" 32 83 1 "*"
F G "TemperatureSensorPrepare" 32 88 "int8()"
C L "TemperatureSensorGet" 32 94 1 "*"
C L "TemperatureSensorGet" 32 94 1 "*"
C L "TemperatureSensorGet" 32 94 1 "*"
V L "value" 32 99 "*sint8"
F G "TemperatureSensorGet" 32 100 "int8(*sint8 value)"
V L "data1" 32 102 "int8"
V L "data2" 32 103 "int8"
C L "TemperatureSensorGet" 32 94 1 "FUNCTION"
C L "TemperatureSensorGet" 32 94 1 "FUNCTION"
C L "TemperatureSensorGet" 32 94 1 "FUNCTION"
C L "TemperatureSensorGet" 32 94 1 "FUNCTION"
C L "TemperatureSensorGet" 32 94 1 "FUNCTION"
C L "TemperatureSensorGet12bit" 32 124 1 "*"
C L "TemperatureSensorGet12bit" 32 124 1 "*"
C L "TemperatureSensorGet12bit" 32 124 1 "*"
V L "value" 32 129 "*sint16"
F G "TemperatureSensorGet12bit" 32 130 "int8(*sint16 value)"
V L "data1" 32 132 "int8"
V L "data2" 32 133 "int8"
V L "data" 32 134 "int16"
C L "TemperatureSensorGet12bit" 32 124 1 "FUNCTION"
C L "TemperatureSensorGet12bit" 32 124 1 "FUNCTION"
C L "TemperatureSensorGet12bit" 32 124 1 "FUNCTION"
C L "TemperatureSensorGet12bit" 32 124 1 "FUNCTION"
C L "TemperatureSensorGet12bit" 32 124 1 "FUNCTION"
C L "TemperatureSensorPackInACL" 32 156 1 "*"
C L "TemperatureSensorPackInACL" 32 156 1 "*"
C L "TemperatureSensorPackInACL" 32 156 1 "*"
C L "TemperatureSensorPackInACL" 32 156 1 "*"
C L "TemperatureSensorPackInACL" 32 156 1 "*"
V L "value" 32 164 "sint8"
F G "TemperatureSensorPackInACL" 32 165 "int8(sint8 value)"
C L "TemperatureSensorPackInACL" 32 156 1 "FUNCTION"
C L "TemperatureSensorPackInACL" 32 156 1 "FUNCTION"
C L "TemperatureSensorPackInACL" 32 156 1 "FUNCTION"
C L "TemperatureSensorPackInACL" 32 156 1 "FUNCTION"
C L "TemperatureSensorPackInACL" 32 156 1 "FUNCTION"
C L "TemperatureSensorPackInACL12bit" 32 182 1 "*"
C L "TemperatureSensorPackInACL12bit" 32 182 1 "*"
C L "TemperatureSensorPackInACL12bit" 32 182 1 "*"
C L "TemperatureSensorPackInACL12bit" 32 182 1 "*"
C L "TemperatureSensorPackInACL12bit" 32 182 1 "*"
V L "value" 32 190 "sint16"
F G "TemperatureSensorPackInACL12bit" 32 191 "int8(sint16 value)"
C L "TemperatureSensorPackInACL12bit" 32 182 1 "FUNCTION"
C L "TemperatureSensorPackInACL12bit" 32 182 1 "FUNCTION"
C L "TemperatureSensorPackInACL12bit" 32 182 1 "FUNCTION"
C L "TemperatureSensorPackInACL12bit" 32 182 1 "FUNCTION"
C L "TemperatureSensorPackInACL12bit" 32 182 1 "FUNCTION"
C L "TemperatureSensorPackInACL12bit" 32 182 1 "FUNCTION"
C G "" 33 1 1 "*"
C G "" 33 1 1 "*"
C G "" 33 1 1 "*"
C G "" 33 1 1 "*"
C G "" 33 1 1 "*"
C G "" 33 1 1 "*"
C G "" 33 1 1 "*"
C G "" 33 1 1 "*"
C G "" 33 1 1 "*"
D G "AMBIENT_LIGHT_SENSOR" 33 18 "002"
D G "AmbientLightSensorOn" 33 24 "()	output_high(PIN_LIGHT_TSL2550_POWER)"
D G "AmbientLightSensorOff" 33 29 "()	output_low(PIN_LIGHT_TSL2550_POWER)"
C L "AmbientLightSensorInit" 33 32 1 "*"
C L "AmbientLightSensorInit" 33 32 1 "*"
C L "AmbientLightSensorInit" 33 32 1 "*"
F G "AmbientLightSensorInit" 33 40 "int8()"
C L "AmbientLightSensorInit" 33 32 1 "FUNCTION"
C L "AmbientLightSensorInit" 33 32 1 "FUNCTION"
C L "AmbientLightSensorInit" 33 32 1 "FUNCTION"
C L "AmbientLightSensorInit" 33 32 1 "FUNCTION"
C L "AmbientLightCalcSensorValue" 33 51 1 "*"
C L "AmbientLightCalcSensorValue" 33 51 1 "*"
C L "AmbientLightCalcSensorValue" 33 51 1 "*"
C L "AmbientLightCalcSensorValue" 33 51 1 "*"
V L "data" 33 57 "int8"
F G "AmbientLightCalcSensorValue" 33 58 "int16(int8 data)"
V L "c" 33 59 "int8"
V L "sv" 33 59 "int8"
V L "sn" 33 59 "int8"
V L "ldata" 33 60 "int16"
V L "cv" 33 60 "int16" "Calculate C"
C L "AmbientLightCalcSensorValue" 33 51 1 "FUNCTION"
C L "AmbientLightCalcSensorValue" 33 51 1 "FUNCTION"
C L "AmbientLightCalcSensorValue" 33 51 1 "FUNCTION"
C L "AmbientLightCalcSensorValue" 33 51 1 "FUNCTION"
C L "AmbientLightVisibleSensorGet" 33 81 1 "*"
C L "AmbientLightVisibleSensorGet" 33 81 1 "*"
C L "AmbientLightVisibleSensorGet" 33 81 1 "*"
V L "value" 33 86 "*int16"
F G "AmbientLightVisibleSensorGet" 33 87 "int8(*int16 value)"
V L "data" 33 89 "int8" "unsigned long ldata, cv; *"
C L "AmbientLightVisibleSensorGet" 33 81 1 "FUNCTION"
C L "AmbientLightVisibleSensorGet" 33 81 1 "FUNCTION"
C L "AmbientLightVisibleSensorGet" 33 81 1 "FUNCTION"
C L "AmbientLightIRSensorGet" 33 107 1 "*"
C L "AmbientLightIRSensorGet" 33 107 1 "*"
C L "AmbientLightIRSensorGet" 33 107 1 "*"
V L "value" 33 112 "*int16"
F G "AmbientLightIRSensorGet" 33 113 "int8(*int16 value)"
V L "data" 33 115 "int8" "unsigned int c, sv, sn; *"
C L "AmbientLightIRSensorGet" 33 107 1 "FUNCTION"
C L "AmbientLightIRSensorGet" 33 107 1 "FUNCTION"
C L "AmbientLightIRSensorGet" 33 107 1 "FUNCTION"
C L "AmbientLightIRSensorGet" 33 107 1 "FUNCTION"
C L "AmbientLightSensorPrepare" 33 135 1 "*"
C L "AmbientLightSensorPrepare" 33 135 1 "*"
C L "AmbientLightSensorPrepare" 33 135 1 "*"
F G "AmbientLightSensorPrepare" 33 141 "int8()"
C L "AmbientLightVisibleSensorPackInACL" 33 147 1 "*"
C L "AmbientLightVisibleSensorPackInACL" 33 147 1 "*"
C L "AmbientLightVisibleSensorPackInACL" 33 147 1 "*"
C L "AmbientLightVisibleSensorPackInACL" 33 147 1 "*"
C L "AmbientLightVisibleSensorPackInACL" 33 147 1 "*"
C L "AmbientLightVisibleSensorPackInACL" 33 147 1 "*"
C L "AmbientLightVisibleSensorPackInACL" 33 147 2 "*"
C L "AmbientLightVisibleSensorPackInACL" 33 183 1 "*"
C L "AmbientLightVisibleSensorPackInACL" 33 183 1 "*"
C L "AmbientLightVisibleSensorPackInACL" 33 183 1 "*"
C L "AmbientLightVisibleSensorPackInACL" 33 183 1 "*"
C L "AmbientLightVisibleSensorPackInACL" 33 183 1 "*"
V L "value" 33 191 "int16"
F G "AmbientLightVisibleSensorPackInACL" 33 192 "int8(int16 value)"
V L "tmp" 33 194 "int8[2]"
V L "ret" 33 195 "int8"
C L "AmbientLightVisibleSensorPackInACL" 33 183 1 "FUNCTION"
C L "AmbientLightIRSensorPackInACL" 33 206 1 "*"
C L "AmbientLightIRSensorPackInACL" 33 206 1 "*"
C L "AmbientLightIRSensorPackInACL" 33 206 1 "*"
C L "AmbientLightIRSensorPackInACL" 33 206 1 "*"
C L "AmbientLightIRSensorPackInACL" 33 206 1 "*"
V L "value" 33 214 "int16"
F G "AmbientLightIRSensorPackInACL" 33 215 "int8(int16 value)"
V L "tmp" 33 216 "int8[2]"
V L "ret" 33 217 "int8"
C L "AmbientLightIRSensorPackInACL" 33 206 1 "FUNCTION"
C G "" 34 1 1 "*"
C G "" 34 1 1 "*"
C G "" 34 1 1 "*"
C G "" 34 1 1 "*"
C G "" 34 1 1 "*"
C G "" 34 1 1 "*"
C G "" 34 1 1 "*"
C G "" 34 1 1 "*"
C G "" 34 1 1 "*"
C G "" 34 1 1 "*"
C G "" 34 1 1 "*"
C G "" 34 1 1 "*"
D G "VOLTAGE_SENSOR" 34 23 "002"
C L "VoltageSensorInit" 34 25 1 "*"
C L "VoltageSensorInit" 34 29 1 "*"
C L "VoltageSensorInit" 34 29 1 "*"
F G "VoltageSensorInit" 34 35 "int8()" "nothing to be done here, since PCInit() function"
C L "VoltageSensorPackInACL" 34 44 1 "*"
C L "VoltageSensorPackInACL" 34 44 1 "*"
C L "VoltageSensorPackInACL" 34 44 1 "*"
C L "VoltageSensorPackInACL" 34 44 1 "*"
C L "VoltageSensorPackInACL" 34 44 1 "*"
V L "value" 34 52 "int16"
F G "VoltageSensorPackInACL" 34 53 "int8(int16 value)"
C L "VoltageSensorPackInACL" 34 44 1 "FUNCTION"
C L "VoltageSensorPackInACL" 34 44 1 "FUNCTION"
C L "VoltageSensorPackInACL" 34 44 1 "FUNCTION"
C L "VoltageSensorPackInACL" 34 44 1 "FUNCTION"
C L "VoltageSensorPackInACL" 34 44 1 "FUNCTION"
C L "SampledVoltageSensorGet" 34 44 1 "FUNCTION"
C L "SampledVoltageSensorGet" 34 71 1 "*"
C L "SampledVoltageSensorGet" 34 71 1 "*"
C L "SampledVoltageSensorGet" 34 71 1 "*"
V L "value" 34 76 "*int16"
F G "SampledVoltageSensorGet" 34 77 "int8(*int16 value)"
C L "VoltageSensorGet" 34 83 1 "*"
C L "VoltageSensorGet" 34 83 1 "*"
C L "VoltageSensorGet" 34 83 1 "*"
V L "value" 34 88 "*int16"
F G "VoltageSensorGet" 34 89 "int8(*int16 value)"
V L "v" 34 90 "int16"
V L "v2" 34 90 "int16"
V L "ret" 34 91 "int8"
C L "VoltageSensorGet" 34 83 3 "FUNCTION"
C L "VoltageSensorGet" 34 83 1 "FUNCTION"
C L "VoltageSensorGet" 34 83 1 "FUNCTION"
C L "VoltageSensorGet" 34 83 1 "FUNCTION"
C L "VoltageSensorPrepare" 34 108 1 "*"
C L "VoltageSensorPrepare" 34 108 1 "*"
C L "VoltageSensorPrepare" 34 108 1 "*"
F G "VoltageSensorPrepare" 34 114 "int8()" "set channel"
C L "VoltageSensorPrepare" 34 108 1 "FUNCTION"
C L "VoltageSensorPrepare" 34 108 1 "FUNCTION"
C G "" 35 1 1 "*"
C G "" 35 1 1 "*"
C G "" 35 1 1 "*"
C G "" 35 1 1 "*"
C G "" 35 1 1 "*"
C G "" 35 1 1 "*"
C G "" 35 1 1 "*"
C G "" 35 1 1 "*"
C G "" 35 1 1 "*"
C G "" 35 1 1 "*"
C G "" 35 1 1 "*"
C G "" 35 1 1 "*"
C G "" 35 1 1 "*"
C G "" 35 1 1 "*"
C G "" 35 1 1 "*"
C G "" 35 1 1 "*"
C G "" 35 1 1 "*"
C G "" 35 1 1 "*"
C G "" 35 1 1 "*"
C G "" 35 1 1 "*"
C G "" 35 1 1 "*"
C G "" 35 1 1 "*"
D G "ACL_ACK_BUFFER_SIZE" 35 33 "64"
D G "ACL_ACK_TIMEOUT_TOLERANCE" 35 36 "20"
D G "ACL_ACK_TIMEOUT" 35 40 "(X) (4<<((ACL_ACK_TIMEOUT_TOLERANCE-X)/4))"
D G "ACL_ACK_RECEIVE_LIST_TIMEOUT" 35 42 " ( ACL_ACK_TIMEOUT(0) * ACL_ACK_TIMEOUT_TOLERANCE )"
D G "ACL_ACK_HEADER" 35 44 "2"
D G "ACL_ADD_HEADER" 35 45 "8"
D G "ACL_ACK_YET_RECEIVED_LIST_SIZE" 35 47 "3"
D G "DATA_PACK" 35 49 "0"
D G "DATA_ACK" 35 50 "1"
V G "ACL_ACK_timer" 35 55 "int8"
V G "ACL_ACK_timer_tolerance" 35 56 "int8"
V G "ACL_ACK_yet_received_list_timeout" 35 57 "int16"
V G "ACL_ACK_secure_buffer" 35 58 "int8[64]"
V G "ACL_ACK_secure_packet_length" 35 59 "int8"
V G "ACL_ACK_own_seq_number" 35 60 "int8"
V G "ACL_ACK_status" 35 61 "int8"
V G "ACL_ACK_on" 35 62 "int1"
V G "ACL_ACK_packet_checked_in_this_slot" 35 63 "int1"
D G "ACL_ACK_SEND_QUEUED" 35 65 "ACL_ACK_status, 0"
D G "ACL_ACK_SEND_SUCCESS" 35 66 "ACL_ACK_status, 1"
D G "ACL_ACK_SEND_SUCCESS_NOW" 35 67 "ACL_ACK_status, 2"
D G "ACL_ACK_TIMEOUT_QUEUED" 35 68 "ACL_ACK_status, 3"
D G "ACL_ACK_ERROR" 35 69 "ACL_ACK_status, 4"
V L "add1" 35 72 "int8"
V L "add2" 35 73 "int8"
V L "add3" 35 74 "int8"
V L "add4" 35 75 "int8"
V L "add5" 35 76 "int8"
V L "add6" 35 77 "int8"
V L "add7" 35 78 "int8"
V L "add8" 35 79 "int8"
V L "seq_nr" 35 80 "int8"
V G "ACL_ACK_yet_received_list" 35 81 "{int8,int8,int8,int8,int8,int8,int8,int8,int8}[3]"
V G "ACL_ACK_yet_received_list_position" 35 83 "int8"
F G "ACLACKCheckNewPacket" 35 84 "int8()"
F G "ACLACKUpdateTimeouts" 35 85 "int8()"
F G "ACLACKCheckRepeats" 35 86 "int8()"
F G "ACLACKHandleError" 35 87 "int8()"
F G "ACLACKRun" 36 1 "int8()"
F G "ACLACKInit" 36 2 "int8()"
F G "ACLAckedDataIsNew" 36 3 "int8()"
F G "ACLAckedDataIsNewNow" 36 4 "int8()"
F G "ACLSendingBusyAcked" 36 5 "int8()"
V L "add1" 36 6 "int8"
V L "add2" 36 6 "int8"
V L "add3" 36 6 "int8"
V L "add4" 36 6 "int8"
V L "add5" 36 6 "int8"
V L "add6" 36 6 "int8"
V L "add7" 36 6 "int8"
V L "add8" 36 6 "int8"
V L "timeout" 36 6 "int8"
F G "ACLSendPacketAcked" 36 6 "int8(int8 add1,int8 add2,int8 add3,int8 add4,int8 add5,int8 add6,int8 add7,int8 add8,int8 timeout)"
F G "ACLGetSendSuccessAcked" 36 7 "int8()"
F G "ACLGetSendSuccessAckedNow" 36 8 "int8()"
F G "ACLACKCheckInPacket" 35 92 "int8()"
F G "ACLACKSendAck" 35 93 "int8()"
F G "ACLACKHandleAck" 35 94 "int8()"
F G "ACLACKSendPacketAgain" 35 95 "int8()"
F G "ACLACKSendReset" 35 96 "int8()"
F G "ACLACKReceiveReset" 35 97 "int8()"
F G "ACLACKReset" 35 98 "int8()" "#inline"
C L "ACLACKReset" 35 1 3 "FUNCTION"
F G "ACLACKInit" 35 109 "int8()"
F G "ACLAckedDataIsNew" 35 117 "int8()"
F G "ACLAckedDataIsNewNow" 35 134 "int8()"
F G "ACLSendingBusyAcked" 35 150 "int8()"
V L "add1" 35 156 "int8"
V L "add2" 35 156 "int8"
V L "add3" 35 156 "int8"
V L "add4" 35 156 "int8"
V L "add5" 35 156 "int8"
V L "add6" 35 156 "int8"
V L "add7" 35 156 "int8"
V L "add8" 35 156 "int8"
V L "timeout" 35 156 "int8"
F G "ACLSendPacketAcked" 35 157 "int8(int8 add1,int8 add2,int8 add3,int8 add4,int8 add5,int8 add6,int8 add7,int8 add8,int8 timeout)"
C L "ACLSendPacketAcked" 35 1 1 "FUNCTION"
F G "ACLGetSendSuccessAcked" 35 187 "int8(int8 add1,int8 add2,int8 add3,int8 add4,int8 add5,int8 add6,int8 add7,int8 add8,int8 timeout)"
F G "ACLGetSendSuccessAckedNow" 35 198 "int8(int8 add1,int8 add2,int8 add3,int8 add4,int8 add5,int8 add6,int8 add7,int8 add8,int8 timeout)"
F G "ACLACKRun" 35 204 "int8(int8 add1,int8 add2,int8 add3,int8 add4,int8 add5,int8 add6,int8 add7,int8 add8,int8 timeout)"
F G "ACLACKCheckNewPacket" 35 217 "int8(int8 add1,int8 add2,int8 add3,int8 add4,int8 add5,int8 add6,int8 add7,int8 add8,int8 timeout)"
F G "ACLACKUpdateTimeouts" 35 238 "int8(int8 add1,int8 add2,int8 add3,int8 add4,int8 add5,int8 add6,int8 add7,int8 add8,int8 timeout)"
F G "ACLACKCheckRepeats" 35 267 "int8(int8 add1,int8 add2,int8 add3,int8 add4,int8 add5,int8 add6,int8 add7,int8 add8,int8 timeout)"
F G "ACLACKHandleError" 35 279 "int8(int8 add1,int8 add2,int8 add3,int8 add4,int8 add5,int8 add6,int8 add7,int8 add8,int8 timeout)"
F G "ACLACKCheckInPacket" 35 289 "int8(int8 add1,int8 add2,int8 add3,int8 add4,int8 add5,int8 add6,int8 add7,int8 add8,int8 timeout)"
V L "i" 35 290 "int8"
V L "j" 35 290 "int8"
F G "ACLACKSendAck" 35 330 "int8(int8 add3,int8 add4,int8 add5,int8 add6,int8 add7,int8 add8,int8 timeout)"
V L "acm" 35 342 "uint8_t[1]"
V L "cad" 35 343 "uint8_t[1]"
V L "cac" 35 344 "uint8_t[1]"
V L "i" 35 345 "int8"
C L "ACLACKHandleAck" 35 1 10 "FUNCTION"
F G "ACLACKHandleAck" 35 389 "int8(int8 add7,int8 add8,int8 timeout)"
V L "i" 35 390 "int8"
V L "position" 35 391 "int8"
C L "ACLACKHandleAck" 35 1 1 "FUNCTION"
F G "ACLACKSendPacketAgain" 35 414 "int8(int8 timeout)"
F G "ACLACKSendReset" 35 423 "int8(int8 timeout)"
F G "ACLACKReceiveReset" 35 433 "int8(int8 timeout)"
V L "i" 35 434 "int8"
F G "ACLACKReset" 35 445 "int8()"
C G "" 37 1 1 "*"
C G "" 37 1 1 "*"
C G "" 37 1 1 "*"
C G "" 37 1 1 "*"
C G "" 37 1 1 "*"
D G "__RTC_C__" 37 14 "007"
D G "REAL_TIME_CLOCK" 37 16 "" "important for prs"
D G "RTC_SLOTS_TO_WAIT_FOR_TIMESERVER" 37 17 "100"
F G "RTCInit" 37 19 "int8()"
V L "hour" 37 20 "int8"
V L "minute" 37 20 "int8"
V L "second" 37 20 "int8"
V L "millisecond" 37 20 "int16"
F G "RTCSetClock" 37 20 "int8(int8 hour,int8 minute,int8 second,int16 millisecond)"
V L "day" 37 21 "int8"
V L "month" 37 21 "int8"
V L "year" 37 21 "int8"
F G "RTCSetDate" 37 21 "int8(int8 day,int8 month,int8 year)"
V L "hour" 37 22 "*int8"
V L "minute" 37 22 "*int8"
V L "second" 37 22 "*int8"
V L "millisecond" 37 22 "*int16"
F G "RTCGetClock" 37 22 "int8(*int8 hour,*int8 minute,*int8 second,*int16 millisecond)"
V L "day" 37 23 "*int8"
V L "month" 37 23 "*int8"
V L "year" 37 23 "*int8"
F G "RTCGetDate" 37 23 "int8(*int8 day,*int8 month,*int8 year)"
F G "RTCGetTimeFromServer" 37 24 "int8()"
F G "RTCAddTimeStampACL" 37 25 "int8()"
V L "chose_data" 37 26 "int8"
F G "RTCAddTimeStampSpecificACL" 37 26 "int8(int8 chose_data)"
F G "RTCUpdate" 37 28 "int8()"
F G "RTCGetMillisecond" 37 30 "int16()"
F G "RTCGetMonth" 37 31 "int8()"
F G "RTCGetYear" 37 32 "int8()"
V L "millisec" 37 34 "int16"
F G "RTCSetMillisecond" 37 34 "int8(int16 millisec)"
V L "mon" 37 35 "int8"
F G "RTCSetMonth" 37 35 "int8(int8 mon)"
V L "yea" 37 36 "int8"
F G "RTCSetYear" 37 36 "int8(int8 yea)"
F G "RTCIncYear" 37 37 "int8()"
V G "RTC_second" 37 39 "int8"
V G "RTC_minute" 37 40 "int8"
V G "RTC_hour" 37 41 "int8"
V G "RTC_day" 37 42 "int8"
V G "RTC_month_year" 37 43 "int8"
V G "RTC_got_time" 37 44 "int1"
V G "RTC_updated" 37 46 "int1" "* Initializes real time clock."
C L "RTCIncYear" 37 48 1 "*"
F G "RTCInit" 37 53 "int8()"
C L "RTCInit" 37 48 2 "FUNCTION"
V L "hour" 37 64 "int8"
V L "minute" 37 64 "int8"
V L "second" 37 64 "int8"
V L "millisecond" 37 64 "int16"
F G "RTCSetClock" 37 65 "int8(int8 hour,int8 minute,int8 second,int16 millisecond)"
V L "day" 37 72 "int8"
V L "month" 37 72 "int8"
V L "year" 37 72 "int8"
F G "RTCSetDate" 37 73 "int8(int8 day,int8 month,int8 year,int16 millisecond)"
V L "hour" 37 79 "*int8"
V L "minute" 37 79 "*int8"
V L "second" 37 79 "*int8"
V L "millisecond" 37 79 "*int16"
F G "RTCGetClock" 37 80 "int8(*int8 hour,*int8 minute,*int8 second,*int16 millisecond)"
V L "day" 37 87 "*int8"
V L "month" 37 87 "*int8"
V L "year" 37 87 "*int8"
F G "RTCGetDate" 37 88 "int8(*int8 day,*int8 month,*int8 year,*int16 millisecond)"
F G "RTCGetTimeFromServer" 37 95 "int8(*int8 day,*int8 month,*int8 year,*int16 millisecond)"
V L "buff" 37 96 "*int8"
V L "wait" 37 97 "int16"
V L "result" 37 98 "int8"
C L "RTCGetTimeFromServer" 37 48 1 "FUNCTION"
F G "RTCAddTimeStampACL" 37 130 "int8(*int16 millisecond)"
V L "hour" 37 131 "int8"
V L "minute" 37 132 "int8"
V L "second" 37 133 "int8"
V L "millisecond" 37 134 "int16"
V L "day" 37 135 "int8"
V L "month" 37 136 "int8"
V L "year" 37 137 "int8"
V L "chose_data" 37 156 "int8"
F G "RTCAddTimeStampSpecificACL" 37 157 "int8(int8 chose_data)" "chose_data: bit 	0 set: 		year 		required in time stamp."
C L "RTCAddTimeStampSpecificACL" 37 48 6 "FUNCTION"
V L "hour" 37 167 "int8"
V L "minute" 37 168 "int8"
V L "second" 37 169 "int8"
V L "millisecond" 37 170 "int16"
V L "day" 37 171 "int8"
V L "month" 37 172 "int8"
V L "year" 37 173 "int8"
V L "sum" 37 174 "int16"
C L "RTCAddTimeStampSpecificACL" 37 48 1 "FUNCTION"
V L "i" 37 175 "int8"
C L "RTCUpdate" 37 204 1 "*"
C L "RTCUpdate" 37 204 1 "*"
C L "RTCUpdate" 37 204 1 "*"
F G "RTCUpdate" 37 210 "int8()"
V L "buff" 37 211 "*int8"
F G "RTCGetMillisecond" 37 283 "int16()"
V L "image_TMR3L" 37 284 "int8"
V L "result" 37 285 "int16"
C L "RTCGetMillisecond" 37 204 1 "FUNCTION"
F G "RTCGetMonth" 37 294 "int8()"
F G "RTCGetYear" 37 299 "int8()"
V L "millisec" 37 303 "int16"
F G "RTCSetMillisecond" 37 304 "int8(int16 millisec)"
V L "image_TMR3H" 37 305 "int16"
V L "image_TMR3L" 37 306 "int16"
C L "RTCSetMillisecond" 37 204 1 "FUNCTION"
V L "mon" 37 317 "int8"
F G "RTCSetMonth" 37 318 "int8(int8 mon)"
V L "yea" 37 324 "int8"
F G "RTCSetYear" 37 325 "int8(int8 yea)"
F G "RTCIncYear" 37 332 "int8(int8 yea)"
C G "" 38 1 1 "*"
C G "" 38 1 1 "*"
C G "" 38 1 1 "*"
C G "" 38 1 1 "*"
C G "" 38 1 1 "*"
C G "" 38 1 1 "*"
C G "" 38 1 1 "*"
C G "" 38 1 1 "*"
C G "" 38 1 1 "*"
C G "" 38 1 1 "*"
C G "" 38 1 1 "*"
C G "" 38 1 1 "*"
C G "" 38 1 1 "*"
C G "" 38 1 1 "*"
C G "" 38 1 2 "*"
C G "" 39 1 1 "*"
C G "" 39 1 1 "*"
C G "" 39 1 1 "*"
C G "" 39 1 1 "*"
C G "" 39 1 1 "*"
C G "" 39 1 1 "*"
D G "_BITS_IO_H_" 39 12 ""
D G "u_char" 39 15 "unsigned char"
D G "ssize_t" 39 19 "int"
D G "size_t" 39 23 "unsigned int"
D G "LOW_N_BITS" 39 45 "(ab_byte , n) (ab_byte & ((1 << (n)) - 1))"
D G "UP_N_BITS" 39 46 "(ab_byte , n) (ab_byte & ~((1 << (8 - n)) - 1))"
D G "LOW_N_BITS_SHIFT" 39 47 "(ab_byte , n) ((ab_byte & ((1 << (n)) - 1)) << (8 - n))"
D G "UP_N_BITS_SHIFT" 39 48 "(ab_byte , n) (ab_byte & ~((1 << (8 - n)) - 1)) >> (8 - n)"
C G "" 40 1 1 "*"
C G "" 40 1 1 "*"
C G "" 40 1 1 "*"
C G "" 40 1 1 "*"
C G "" 40 1 1 "*"
C G "" 40 1 1 "*"
C G "" 40 1 1 "*"
D G "_STDIO" 41 12 ""
D G "_STRING" 42 12 ""
D G "_STDDEF" 43 13 ""
D G "ptrdiff_t" 43 18 "long"
D G "size_t" 43 21 "int"
D G "wchar_t" 43 22 "char"
D G "NULL" 43 23 "0"
D G "offsetof" 43 25 "(s,f) (offsetofbit(s,f)/8)"
D G "_CTYPE" 44 12 ""
D G "islower" 44 14 "(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz")"
D G "isupper" 44 15 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ")"
D G "isalnum" 44 16 "(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isalpha" 44 17 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isdigit" 44 18 "(x)  isamong(x,"0123456789")"
D G "isspace" 44 19 "(x)  ((x)==' ')"
D G "isxdigit" 44 20 "(x) isamong(x,"0123456789ABCDEFabcdef")"
D G "iscntrl" 44 21 "(x)  ((x)<' ')"
D G "isprint" 44 22 "(x)  ((x)>=' ')"
D G "isgraph" 44 23 "(x)  ((x)>' ')"
D G "ispunct" 44 24 "(x)  (((x)>' ')&&!isalnum(x))"
C L "memmove" 42 19 10 "FUNCTION"
V L "s1" 42 34 "*int8"
V L "s2" 42 34 "*int8"
V L "n" 42 34 "int8"
F G "memmove" 42 35 "*int8(*int8 s1,*int8 s2,int8 n)"
V L "sc1" 42 36 "*int8"
V L "sc2" 42 37 "*int8"
C L "strcopy" 42 19 3 "FUNCTION"
V L "s1" 42 53 "*int8"
V L "s2" 42 53 "*int8"
F G "strcopy" 42 54 "*int8(*int8 s1,*int8 s2)"
V L "s" 42 55 "*int8"
C L "strncpy" 42 19 4 "FUNCTION"
V L "s1" 42 69 "*int8"
V L "s2" 42 69 "*int8"
V L "n" 42 69 "int8"
F G "strncpy" 42 70 "*int8(*int8 s1,*int8 s2,int8 n)"
V L "s" 42 71 "*int8"
C L "strcat" 42 19 3 "FUNCTION"
V L "s1" 42 86 "*int8"
V L "s2" 42 86 "*int8"
F G "strcat" 42 87 "*int8(*int8 s1,*int8 s2)"
V L "s" 42 88 "*int8"
C L "strncat" 42 19 2 "FUNCTION"
V L "s1" 42 104 "*int8"
V L "s2" 42 104 "*int8"
V L "n" 42 104 "int8"
F G "strncat" 42 105 "*int8(*int8 s1,*int8 s2,int8 n)"
V L "s" 42 106 "*int8"
C L "memcmp" 42 19 3 "FUNCTION"
V L "s1" 42 128 "*int8"
V L "s2" 42 128 "*int8"
V L "n" 42 128 "int8"
F G "memcmp" 42 129 "sint8(*int8 s1,*int8 s2,int8 n)"
V L "su1" 42 130 "*int8"
V L "su2" 42 130 "*int8"
C L "strcmp" 42 19 2 "FUNCTION"
V L "s1" 42 142 "*int8"
V L "s2" 42 142 "*int8"
F G "strcmp" 42 143 "sint8(*int8 s1,*int8 s2)"
C L "strcoll" 42 19 2 "FUNCTION"
V L "s1" 42 152 "*int8"
V L "s2" 42 152 "*int8"
F G "strcoll" 42 153 "sint8(*int8 s1,*int8 s2)"
C L "strncmp" 42 19 4 "FUNCTION"
V L "s1" 42 165 "*int8"
V L "s2" 42 165 "*int8"
V L "n" 42 165 "int8"
F G "strncmp" 42 166 "sint8(*int8 s1,*int8 s2,int8 n)"
C L "strxfrm" 42 19 3 "FUNCTION"
V L "s1" 42 177 "*int8"
V L "s2" 42 177 "*int8"
V L "n" 42 177 "int8"
F G "strxfrm" 42 178 "int8(*int8 s1,*int8 s2,int8 n)"
V L "s" 42 179 "*int8"
V L "n1" 42 180 "int8"
C L "memchr" 42 19 3 "FUNCTION"
V L "s" 42 199 "*int8"
V L "c" 42 199 "int8"
V L "n" 42 199 "int8"
F G "memchr" 42 200 "*int8(*int8 s,int8 c,int8 n)"
V L "uc" 42 201 "int8"
V L "su" 42 202 "*int8"
C L "strchr" 42 19 2 "FUNCTION"
V L "s" 42 213 "*int8"
V L "c" 42 213 "int8"
F G "strchr" 42 214 "*int8(*int8 s,int8 c)"
C L "strcspn" 42 19 4 "FUNCTION"
V L "s1" 42 225 "*int8"
V L "s2" 42 225 "*int8"
F G "strcspn" 42 226 "*int8(*int8 s1,*int8 s2)"
V L "sc1" 42 227 "*int8"
V L "sc2" 42 227 "*int8"
C L "strpbrk" 42 19 4 "FUNCTION"
V L "s1" 42 240 "*int8"
V L "s2" 42 240 "*int8"
F G "strpbrk" 42 241 "*int8(*int8 s1,*int8 s2)"
V L "sc1" 42 242 "*int8"
V L "sc2" 42 242 "*int8"
C L "strrchr" 42 19 2 "FUNCTION"
V L "s" 42 255 "*int8"
V L "c" 42 255 "int8"
F G "strrchr" 42 256 "*int8(*int8 s,int8 c)"
V L "p" 42 257 "*int8"
C L "strspn" 42 19 2 "FUNCTION"
V L "s1" 42 270 "*int8"
V L "s2" 42 270 "*int8"
F G "strspn" 42 271 "*int8(*int8 s1,*int8 s2)"
V L "sc1" 42 272 "*int8"
V L "sc2" 42 272 "*int8"
C L "strstr" 42 19 6 "FUNCTION"
V L "s1" 42 289 "*int8"
V L "s2" 42 289 "*int8"
F G "strstr" 42 290 "*int8(*int8 s1,*int8 s2)"
V L "s" 42 291 "*int8"
V L "t" 42 291 "*int8"
C L "strtok" 42 19 13 "FUNCTION"
V L "s1" 42 328 "*int8"
V L "s2" 42 328 "*int8"
F G "strtok" 42 329 "*int8(*int8 s1,*int8 s2)"
V L "beg" 42 330 "*int8"
V L "end" 42 330 "*int8"
V L "save" 42 331 "*int8"
C L "strlen" 42 19 6 "FUNCTION"
V L "s" 42 377 "*int8"
F G "strlen" 42 378 "*int8(*int8 s)"
V L "sc" 42 379 "*int8"
C L "stricmp" 42 19 2 "FUNCTION"
V L "s1" 42 388 "*int8"
V L "s2" 42 388 "*int8"
F G "stricmp" 42 389 "sint8(*int8 s1,*int8 s2)"
C L "strlwr" 42 19 3 "FUNCTION"
V L "s" 42 402 "*int8"
F G "strlwr" 42 403 "*int8(*int8 s)"
V L "p" 42 404 "*int8"
D G "_ERRNO" 45 13 ""
D G "EDOM" 45 15 "1"
D G "ERANGE" 45 16 "2"
V G "errno" 45 18 "int8"
C G "" 46 1 1 "*"
C G "" 46 1 1 "*"
C G "" 46 1 1 "*"
C G "" 46 1 1 "*"
C G "" 46 1 1 "*"
C G "" 46 1 1 "*"
D G "_WRITE_BITS_BUF_H_" 47 2 ""
V L "buf" 47 4 "*int8"
F G "write_init" 47 4 "int8(*int8 buf)"
V L "bits" 47 5 "*int8"
V L "bits_len" 47 5 "int8"
F G "write_bits" 47 5 "int8(*int8 bits,int8 bits_len)"
F G "write_finish" 47 6 "int8()"
V L "pos" 40 19 "int8"
V L "buf" 40 20 "*int8"
V L "lastByte" 40 21 "int8"
V L "currBits" 40 22 "int8"
V G "writer" 40 25 "{int8,*int8,int8,int8}" "* ========================================================================*"
V L "buf" 40 31 "*int8"
F G "write_init" 40 32 "int8(*int8 buf)"
C L "write_bits" 40 39 1 "*"
C L "write_bits" 40 39 1 "*"
V L "bits" 40 43 "*int8"
V L "bits_len" 40 43 "int8"
F G "write_bits" 40 44 "int8(*int8 bits,int8 bits_len)"
V L "i" 40 45 "int8"
V L "bytes" 40 46 "int8" "= bits_len / 8; *"
V L "rest_len" 40 47 "int8" "= bits_len % 8; *"
V L "ret" 40 48 "int8"
C L "write_bits" 40 39 1 "FUNCTION"
V L "a_byte" 40 58 "int8"
V L "cur_byte" 40 62 "int8"
C L "write_bits" 40 39 1 "FUNCTION"
C L "write_bits" 40 39 2 "FUNCTION"
C L "write_bits" 40 39 1 "FUNCTION"
C L "write_bits" 40 39 2 "FUNCTION"
C L "write_finish" 40 133 1 "*"
F G "write_finish" 40 138 "int8()"
V L "ret" 40 139 "int8"
C L "write_true" 40 155 1 "*"
F G "write_true" 40 160 "int8()"
V L "val" 40 161 "int8"
C L "write_false" 40 165 1 "*"
F G "write_false" 40 170 "int8()"
V L "val" 40 171 "int8"
D G "_DECODER_STRUCT_H_" 48 2 ""
V L "TempValue" 48 6 "int8_t"
V L "TempIdx" 48 8 "uint8_t"
V L "ForceValue" 48 14 "uint8_t"
V L "ForceIdx" 48 16 "uint8_t"
V L "LightValue" 48 22 "uint8_t"
V L "LightIdx" 48 24 "uint8_t"
V L "LightValue" 48 30 "uint8_t"
V L "LightIdx" 48 32 "uint8_t"
V L "AcclValue" 48 38 "int16_t"
V L "AcclIdx" 48 40 "uint8_t"
V L "AcclValue" 48 46 "int16_t"
V L "AcclIdx" 48 48 "uint8_t"
V L "AcclValue" 48 54 "int16_t"
V L "AcclIdx" 48 56 "uint8_t"
V L "AcclX_elem" 48 61 "{int16_t,uint8_t}"
V L "AcclX_count" 48 62 "int8"
V L "AcclY_elem" 48 64 "{int16_t,uint8_t}"
V L "AcclY_count" 48 65 "int8"
V L "AcclZ_elem" 48 67 "{int16_t,uint8_t}"
V L "AcclZ_count" 48 68 "int8"
V L "Audio" 48 70 "int8_t"
V L "Audio_count" 48 72 "int8"
V L "Light_elem" 48 74 "{uint8_t,uint8_t}"
V L "Light_count" 48 75 "int8"
V L "AmbientLight_elem" 48 77 "{uint8_t,uint8_t}"
V L "AmbientLight_count" 48 78 "int8"
V L "Force_elem" 48 80 "{uint8_t,uint8_t}"
V L "Force_count" 48 81 "int8"
V L "Temperature_elem" 48 83 "{int8_t,uint8_t}"
V L "Temperature_count" 48 84 "int8"
V L "Voltage" 48 86 "uint16_t"
V L "Voltage_count" 48 88 "int8"
C G "" 49 1 1 "*"
C G "" 49 1 1 "*"
C G "" 49 1 1 "*"
C G "" 49 1 1 "*"
C G "" 49 1 1 "*"
C G "" 49 1 1 "*"
C G "" 49 1 1 "*"
D G "_STDLIB" 50 12 ""
D G "RAND_MAX" 50 19 "32767" "The value of which is the maximum value"
V L "quot" 50 24 "sint8"
V L "rem" 50 25 "sint8"
T G "div_t" 50 26 "{sint8,sint8}"
V L "quot" 50 29 "sint16"
V L "rem" 50 30 "sint16"
T G "ldiv_t" 50 31 "{sint16,sint16}" "(C) Copyright 1996,2003 Custom Computer Services           ////"
C L "atof" 43 3 6 "FUNCTION"
C L "atof" 50 36 2 "FUNCTION"
C L "atof" 50 39 1 "*"
C L "atof" 50 39 1 "*"
V L "s" 50 43 "*int8"
F G "atof" 50 43 "float(*int8 s)" "Standard template: float atoe(char * s)"
C L "atof" 50 45 1 "*"
C L "atof" 50 45 1 "*"
C L "atof" 50 45 1 "*"
V L "s" 50 50 "*int8"
F G "atoe" 50 50 "float(*int8 s)" "Standard template: signed int  atoi(char * s)"
C L "atoe" 50 52 1 "*"
C L "atoe" 50 52 1 "*"
V L "s" 50 56 "*int8"
F G "atoi" 50 56 "sint8(*int8 s)" "Syntax: signed int32  atoi32(char * s)"
C L "atoi" 50 52 2 "FUNCTION"
V L "s" 50 61 "*int8"
F G "atoi32" 50 61 "sint32(*int8 s)" "Syntax: char *  itoa(signed int32 num, int8 base, char * s)"
C L "atoi32" 50 52 2 "FUNCTION"
V L "num" 50 66 "sint32"
V L "base" 50 66 "int8"
V L "s" 50 66 "*int8"
F G "itoa" 50 66 "*int8(sint32 num,int8 base,*int8 s)" "Standard template: signed long  atol(char * s)"
C L "itoa" 50 68 1 "*"
C L "itoa" 50 68 1 "*"
V L "s" 50 72 "*int8"
F G "atol" 50 72 "sint16(*int8 s)" "Standard template: float strtol(char * s,char *endptr)"
C L "atol" 50 74 1 "*"
C L "atol" 50 74 1 "*"
C L "atol" 50 74 1 "*"
V L "s" 50 79 "*int8"
V L "endptr" 50 79 "*int8"
F G "strtod" 50 79 "float(*int8 s,*int8 endptr)" "Standard template: long strtoul(char * s,char *endptr,signed int base)"
C L "strtod" 50 81 1 "*"
C L "strtod" 50 81 1 "*"
C L "strtod" 50 81 1 "*"
C L "strtod" 50 81 1 "*"
V L "s" 50 87 "*int8"
V L "endptr" 50 87 "*int8"
V L "base" 50 87 "sint8"
F G "strtol" 50 87 "sint16(*int8 s,*int8 endptr,sint8 base)" "Standard template: long strtoul(char * s,char *endptr,signed int base)"
C L "strtol" 50 89 1 "*"
C L "strtol" 50 89 1 "*"
C L "strtol" 50 89 1 "*"
C L "strtol" 50 89 1 "*"
V L "s" 50 95 "*int8"
V L "endptr" 50 95 "*int8"
V L "base" 50 95 "sint8"
F G "strtoul" 50 95 "int16(*int8 s,*int8 endptr,sint8 base)" "Pseudo-random sequence generation functions"
C L "strtoul" 50 89 1 "FUNCTION"
C L "strtoul" 50 101 1 "*"
C L "strtoul" 50 101 1 "*"
C L "strtoul" 50 101 1 "*"
C L "strtoul" 50 101 1 "*"
C L "strtoul" 50 101 1 "*"
F G "rand" 50 110 "int16()" "The srand function uses the argument as a seed for a new sequence of"
C L "rand" 50 112 1 "*"
C L "rand" 50 112 1 "*"
C L "rand" 50 112 1 "*"
C L "rand" 50 112 1 "*"
C L "rand" 50 112 1 "*"
C L "rand" 50 112 1 "*"
C L "rand" 50 112 1 "*"
C L "rand" 50 112 1 "*"
C L "rand" 50 112 1 "*"
C L "rand" 50 112 1 "*"
C L "rand" 50 112 1 "*"
C L "rand" 50 112 1 "*"
C L "rand" 50 112 1 "*"
C L "rand" 50 112 1 "*"
C L "rand" 50 112 1 "*"
V L "seed" 50 132 "int32"
F G "srand" 50 132 "int8(int32 seed)" "Memory management functions"
C L "srand" 50 112 3 "FUNCTION"
V L "string" 50 146 "*int8"
F G "system" 50 146 "sint8(*int8 string)" "Searching and sorting utilities"
C L "system" 50 112 1 "FUNCTION"
C L "system" 50 152 1 "*"
C L "system" 50 152 1 "*"
C L "system" 50 152 1 "*"
C L "system" 50 152 1 "*"
C L "system" 50 152 1 "*"
C L "system" 50 152 1 "*"
C L "system" 50 152 1 "*"
C L "system" 50 152 1 "*"
C L "system" 50 152 1 "*"
C L "system" 50 152 1 "*"
C L "system" 50 152 4 "*"
C L "system" 50 170 1 "*"
C L "system" 50 170 1 "*"
C L "system" 50 170 1 "*"
C L "system" 50 170 1 "*"
C L "system" 50 170 1 "*"
C L "system" 50 170 1 "*"
C L "system" 50 170 1 "*"
C L "system" 50 170 1 "*"
D G "labs" 50 190 "abs"
V L "numer" 50 192 "sint8"
V L "denom" 50 192 "sint8"
F G "div" 50 192 "div_t(sint8 numer,sint8 denom)"
V L "numer" 50 193 "sint16"
V L "denom" 50 193 "sint16"
F G "ldiv" 50 193 "ldiv_t(sint16 numer,sint16 denom)" "Multibyte character functions"
C L "ldiv" 50 170 4 "FUNCTION"
C L "ldiv" 43 2 7 "FUNCTION"
C L "ldiv" 42 2 7 "FUNCTION"
V L "numer" 50 215 "sint8"
V L "denom" 50 215 "sint8"
F G "div" 50 216 "div_t(sint8 numer,sint8 denom)"
V L "val" 50 217 "div_t"
V L "numer" 50 223 "sint16"
V L "denom" 50 223 "sint16"
F G "ldiv" 50 224 "ldiv_t(sint16 numer,sint16 denom)"
V L "val" 50 225 "ldiv_t"
V L "s" 50 231 "*int8"
F G "atof" 50 232 "float(*int8 s)"
V L "pow10" 50 233 "float"
V L "result" 50 234 "float"
V L "sign" 50 235 "int8"
V L "c" 50 236 "int8"
V L "ptr" 50 237 "int8"
V L "s" 50 270 "*int8"
F G "atoe" 50 271 "float(*int8 s)"
V L "pow10" 50 272 "float"
V L "result" 50 273 "float"
V L "sign" 50 274 "int8"
V L "expsign" 50 275 "int8"
V L "c" 50 276 "int8"
V L "ptr" 50 277 "int8"
V L "i" 50 278 "int8"
V L "exp" 50 279 "float"
V L "expcnt" 50 280 "int8"
C L "atoe" 50 306 1 "FUNCTION"
V L "s" 50 337 "*int8"
F G "atoi" 50 338 "sint8(*int8 s)"
V L "result" 50 339 "sint8"
V L "sign" 50 340 "int8"
V L "base" 50 340 "int8"
V L "index" 50 340 "int8"
V L "c" 50 341 "int8"
C L "atoi" 50 306 1 "FUNCTION"
C L "atoi" 50 306 1 "FUNCTION"
C L "atoi" 50 306 1 "FUNCTION"
C L "atoi" 50 306 1 "FUNCTION"
C L "atoi" 50 306 1 "FUNCTION"
C L "atoi" 50 306 1 "FUNCTION"
V L "s" 50 406 "*int8"
F G "atol" 50 407 "sint16(*int8 s)"
V L "result" 50 408 "sint16"
V L "sign" 50 409 "int8"
V L "base" 50 409 "int8"
V L "index" 50 409 "int8"
V L "c" 50 410 "int8"
C L "atol" 50 306 1 "FUNCTION"
C L "atol" 50 306 1 "FUNCTION"
C L "atol" 50 306 1 "FUNCTION"
C L "atol" 50 306 1 "FUNCTION"
C L "mult_with10" 50 306 1 "FUNCTION"
V L "num" 50 473 "int32"
F G "mult_with10" 50 474 "sint32(int32 num)"
V L "s" 50 478 "*int8"
F G "atoi32" 50 479 "sint32(*int8 s)"
V L "result" 50 480 "sint32"
V L "sign" 50 481 "int8"
V L "base" 50 481 "int8"
V L "index" 50 481 "int8"
V L "c" 50 482 "int8"
C L "atoi32" 50 306 1 "FUNCTION"
C L "atoi32" 50 306 1 "FUNCTION"
C L "atoi32" 50 306 1 "FUNCTION"
C L "atoi32" 50 306 1 "FUNCTION"
C L "atoi32" 50 306 1 "FUNCTION"
V L "num" 50 543 "sint32"
V L "base" 50 543 "int8"
V L "s" 50 543 "*int8"
F G "itoa" 50 544 "*int8(sint32 num,int8 base,*int8 s)"
V L "temp" 50 545 "int32"
V L "i" 50 546 "int8"
V L "sign" 50 546 "int8"
V L "cnt" 50 546 "int8"
V L "c" 50 547 "int8"
C L "itoa" 50 306 1 "FUNCTION"
C L "itoa" 50 306 1 "FUNCTION"
C L "itoa" 50 306 1 "FUNCTION"
C L "itoa" 50 306 1 "FUNCTION"
C L "itoa" 50 306 1 "FUNCTION"
V L "s" 50 580 "*int8"
V L "endptr" 50 580 "*int8"
F G "strtod" 50 580 "float(*int8 s,*int8 endptr)"
V L "pow10" 50 581 "float"
V L "result" 50 582 "float"
V L "sign" 50 583 "int8"
V L "point" 50 583 "int8"
V L "c" 50 584 "int8"
V L "ptr" 50 585 "int8"
V L "s" 50 634 "*int8"
V L "endptr" 50 634 "*int8"
V L "base" 50 634 "sint8"
F G "strtoul" 50 635 "int16(*int8 s,*int8 endptr,sint8 base)"
V L "sc" 50 636 "*int8"
V L "s1" 50 636 "*int8"
V L "sd" 50 636 "*int8"
V L "x" 50 637 "int16"
V L "sign" 50 638 "int8"
V L "digits" 50 639 "int8[1]"
C L "strtoul" 50 306 1 "FUNCTION"
C L "strtoul" 50 306 1 "FUNCTION"
C L "strtoul" 50 306 1 "FUNCTION"
V L "s" 50 699 "*int8"
V L "endptr" 50 699 "*int8"
V L "base" 50 699 "sint8"
F G "strtol" 50 700 "sint16(*int8 s,*int8 endptr,sint8 base)"
V L "sc" 50 701 "*int8"
V L "s1" 50 701 "*int8"
V L "sd" 50 701 "*int8"
V L "x" 50 702 "sint16"
V L "sign" 50 703 "int8"
V L "digits" 50 704 "int8[1]"
C L "strtol" 50 306 1 "FUNCTION"
C L "strtol" 50 306 1 "FUNCTION"
C L "strtol" 50 306 1 "FUNCTION"
V L "string" 50 757 "*int8"
F G "system" 50 758 "sint8(*int8 string)"
V L "s" 50 762 "*int8"
V L "n" 50 762 "int8"
F G "mblen" 50 763 "int8(*int8 s,int8 n)"
V L "pwc" 50 767 "*int8"
V L "s" 50 767 "*int8"
V L "n" 50 767 "int8"
F G "mbtowc" 50 768 "int8(*int8 pwc,*int8 s,int8 n)"
V L "s" 50 773 "*int8"
V L "wchar" 50 773 "int8"
F G "wctomb" 50 774 "int8(*int8 s,int8 wchar)"
V L "pwcs" 50 779 "*int8"
V L "s" 50 779 "*int8"
V L "n" 50 779 "int8"
F G "mbstowcs" 50 780 "int8(*int8 pwcs,*int8 s,int8 n)"
V L "s" 50 785 "*int8"
V L "pwcs" 50 785 "*int8"
V L "n" 50 785 "int8"
F G "wcstombs" 50 786 "int8(*int8 s,*int8 pwcs,int8 n)"
V G "_Randseed" 50 795 "int32"
F G "rand" 50 798 "int16()"
V L "seed" 50 803 "int32"
F G "srand" 50 804 "int8(int32 seed)"
V L "p1" 50 812 "*int8"
V L "p2" 50 812 "*int8"
T G "*_Cmpfun" 50 812 "sint8(*int8 p1,*int8 p2)"
V L "qdata" 50 814 "*int8"
V L "qitems" 50 814 "int8"
V L "qsize" 50 814 "int8"
V L "cmp" 50 814 "_Cmpfun"
F G "qsort" 50 814 "int8(*int8 qdata,int8 qitems,int8 qsize,_Cmpfun cmp)"
V L "m" 50 815 "int8"
V L "j" 50 815 "int8"
V L "i" 50 815 "int8"
V L "l" 50 815 "int8"
V L "done" 50 816 "int1"
V L "t" 50 817 "int8[16]"
V L "key" 50 842 "*int8"
V L "base" 50 842 "*int8"
V L "num" 50 842 "int8"
V L "width" 50 842 "int8"
V L "cmp" 50 842 "_Cmpfun"
F G "bsearch" 50 843 "*int8(*int8 key,*int8 base,int8 num,int8 width,_Cmpfun cmp)"
V L "p" 50 844 "*int8"
V L "q" 50 844 "*int8"
V L "n" 50 845 "int8"
V L "pivot" 50 846 "int8"
V L "val" 50 847 "sint8"
C L "bsearch" 50 306 1 "FUNCTION"
D G "_DECODE_FUNC_H" 51 2 ""
V L "val" 51 4 "int8_t"
V L "result" 51 4 "*int8"
V L "min" 51 4 "int8"
V L "max" 51 4 "int8"
V L "stepping" 51 4 "int8"
F G "decode_byte" 51 4 "int8(int8_t val,*int8 result,int8 min,int8 max,int8 stepping)"
V L "val" 51 5 "int16_t"
V L "result" 51 5 "*int8"
V L "min" 51 5 "int8"
V L "max" 51 5 "int8"
V L "stepping" 51 5 "int8"
F G "decode_short" 51 5 "int8(int16_t val,*int8 result,int8 min,int8 max,int8 stepping)"
V L "val" 51 6 "int32_t"
V L "result" 51 6 "*int8"
V L "min" 51 6 "int8"
V L "max" 51 6 "int8"
V L "stepping" 51 6 "int8"
F G "decode_int" 51 6 "int8(int32_t val,*int8 result,int8 min,int8 max,int8 stepping)"
V L "val" 51 7 "float"
V L "result" 51 7 "*int8"
V L "min" 51 7 "int8"
V L "max" 51 7 "int8"
V L "stepping" 51 7 "float"
V L "frac" 51 7 "int8"
F G "decode_float" 51 7 "int8(float val,*int8 result,int8 min,int8 max,float stepping,int8 frac)"
V L "val" 51 8 "float"
V L "result" 51 8 "*int8"
V L "min" 51 8 "int8"
V L "max" 51 8 "int8"
V L "stepping" 51 8 "float"
V L "frac" 51 8 "int8"
F G "decode_double" 51 8 "int8(float val,*int8 result,int8 min,int8 max,float stepping,int8 frac)"
V L "val" 51 9 "*int8"
V L "result" 51 9 "*int8"
V L "len" 51 9 "int8"
F G "decode_string" 51 9 "int8(*int8 val,*int8 result,int8 len)"
D G "MAX_UBYTE_VAL" 49 18 " (1 <<  8) - 1"
D G "MAX_USHORT_VAL" 49 19 " (1 << 16) - 1"
D G "MAX_UINT_VAL" 49 20 " (1 << 32) - 1"
V L "val" 49 22 "int8_t"
V L "result" 49 22 "*int8"
V L "min" 49 22 "int8"
V L "max" 49 22 "int8"
V L "stepping" 49 22 "int8"
F G "decode_byte" 49 22 "int8(int8_t val,*int8 result,int8 min,int8 max,int8 stepping)"
V L "val" 49 29 "int16_t"
V L "result" 49 29 "*int8"
V L "min" 49 29 "int8"
V L "max" 49 29 "int8"
V L "stepping" 49 29 "int8"
F G "decode_short" 49 29 "int8(int16_t val,*int8 result,int8 min,int8 max,int8 stepping)"
V L "val" 49 36 "int32_t"
V L "result" 49 36 "*int8"
V L "min" 49 36 "int8"
V L "max" 49 36 "int8"
V L "stepping" 49 36 "int8"
F G "decode_int" 49 36 "int8(int32_t val,*int8 result,int8 min,int8 max,int8 stepping)"
V L "val" 49 44 "float"
V L "result" 49 44 "*int8"
V L "frac_result" 49 44 "*int8"
V L "min" 49 44 "int8"
V L "max" 49 45 "int8"
V L "stepping" 49 45 "float"
V L "frac" 49 45 "int8"
F G "decode_float" 49 45 "int8(float val,*int8 result,*int8 frac_result,int8 min,int8 max,float stepping,int8 frac)"
V L "val" 49 50 "float"
V L "result" 49 50 "*int8"
V L "frac_result" 49 50 "*int8"
V L "min" 49 50 "int8"
V L "max" 49 51 "int8"
V L "stepping" 49 51 "float"
V L "frac" 49 51 "int8"
F G "decode_double" 49 51 "int8(float val,*int8 result,*int8 frac_result,int8 min,int8 max,float stepping,int8 frac)"
V L "val" 49 56 "*int8"
V L "result" 49 56 "*int8"
V L "len" 49 56 "int8"
F G "decode_string" 49 56 "int8(*int8 val,*int8 result,int8 len)"
D G "_DECODER_SET_H" 52 2 ""
F G "get_SensorValues" 52 3 "*SensorValues(*int8 val,*int8 result,int8 len)"
V L "parent" 52 5 "*SensorValues"
F G "SensorValues_getNext_AcclX" 52 5 "*AcclX(*SensorValues parent,int8 len)"
V L "parent" 52 7 "*AcclX"
V L "value" 52 7 "int16_t"
F G "AcclX_set_AcclValue" 52 7 "int8(*AcclX parent,int16_t value)"
V L "parent" 52 9 "*AcclX"
V L "value" 52 9 "uint8_t"
F G "AcclX_set_AcclIdx" 52 9 "int8(*AcclX parent,uint8_t value)"
V L "parent" 52 11 "*SensorValues"
F G "SensorValues_getNext_AcclY" 52 11 "*AcclY(*SensorValues parent)"
V L "parent" 52 13 "*AcclY"
V L "value" 52 13 "int16_t"
F G "AcclY_set_AcclValue" 52 13 "int8(*AcclY parent,int16_t value)"
V L "parent" 52 15 "*AcclY"
V L "value" 52 15 "uint8_t"
F G "AcclY_set_AcclIdx" 52 15 "int8(*AcclY parent,uint8_t value)"
V L "parent" 52 17 "*SensorValues"
F G "SensorValues_getNext_AcclZ" 52 17 "*AcclZ(*SensorValues parent)"
V L "parent" 52 19 "*AcclZ"
V L "value" 52 19 "int16_t"
F G "AcclZ_set_AcclValue" 52 19 "int8(*AcclZ parent,int16_t value)"
V L "parent" 52 21 "*AcclZ"
V L "value" 52 21 "uint8_t"
F G "AcclZ_set_AcclIdx" 52 21 "int8(*AcclZ parent,uint8_t value)"
V L "parent" 52 23 "*SensorValues"
V L "value" 52 23 "int8_t"
F G "SensorValues_set_Audio" 52 23 "int8(*SensorValues parent,int8_t value)"
V L "parent" 52 25 "*SensorValues"
F G "SensorValues_getNext_Light" 52 25 "*Light(*SensorValues parent)"
V L "parent" 52 27 "*Light"
V L "value" 52 27 "uint8_t"
F G "Light_set_LightValue" 52 27 "int8(*Light parent,uint8_t value)"
V L "parent" 52 29 "*Light"
V L "value" 52 29 "uint8_t"
F G "Light_set_LightIdx" 52 29 "int8(*Light parent,uint8_t value)"
V L "parent" 52 32 "*SensorValues"
F G "SensorValues_getNext_AmbientLight" 52 32 "*AmbientLight(*SensorValues parent)"
V L "parent" 52 34 "*AmbientLight"
V L "value" 52 34 "uint8_t"
F G "AmbientLight_set_LightValue" 52 34 "int8(*AmbientLight parent,uint8_t value)"
V L "parent" 52 36 "*AmbientLight"
V L "value" 52 36 "uint8_t"
F G "AmbientLight_set_LightIdx" 52 36 "int8(*AmbientLight parent,uint8_t value)"
V L "parent" 52 38 "*SensorValues"
F G "SensorValues_getNext_Force" 52 38 "*Force(*SensorValues parent)"
V L "parent" 52 40 "*Force"
V L "value" 52 40 "uint8_t"
F G "Force_set_ForceValue" 52 40 "int8(*Force parent,uint8_t value)"
V L "parent" 52 42 "*Force"
V L "value" 52 42 "uint8_t"
F G "Force_set_ForceIdx" 52 42 "int8(*Force parent,uint8_t value)"
V L "parent" 52 45 "*SensorValues"
F G "SensorValues_getNext_Temperature" 52 45 "*Temperature(*SensorValues parent)"
V L "parent" 52 47 "*Temperature"
V L "value" 52 47 "int8_t"
F G "Temperature_set_TempValue" 52 47 "int8(*Temperature parent,int8_t value)"
V L "parent" 52 49 "*Temperature"
V L "value" 52 49 "uint8_t"
F G "Temperature_set_TempIdx" 52 49 "int8(*Temperature parent,uint8_t value)"
V L "parent" 52 51 "*SensorValues"
V L "value" 52 51 "uint16_t"
F G "SensorValues_set_Voltage" 52 51 "int8(*SensorValues parent,uint16_t value)" "(C) Copyright 1996,2003 Custom Computer Services           ////"
C L "SensorValues_set_Voltage" 41 3 6 "FUNCTION"
C L "SensorValues_set_Voltage" 50 2 7 "FUNCTION"
C L "SensorValues_set_Voltage" 42 2 7 "FUNCTION"
V G "SensorValues_struct" 53 8 "{{int16_t,uint8_t},int8,{int16_t,uint8_t},int8,{int16_t,uint8_t},int8,int8_t,int8,{uint8_t,uint8_t},int8,{uint8_t,uint8_t},int8,{uint8_t,uint8_t},int8,{int8_t,uint8_t},int8,uint16_t,int8}"
F G "get_SensorValues" 53 10 "*SensorValues()"
V L "parent" 53 14 "*SensorValues"
F G "SensorValues_get_AcclX" 53 14 "*AcclX(*SensorValues parent)"
V L "parent" 53 19 "*AcclX"
V L "value" 53 19 "int16_t"
F G "AcclX_set_AcclValue" 53 19 "int8(*AcclX parent,int16_t value)"
V L "parent" 53 25 "*AcclX"
V L "value" 53 25 "uint8_t"
F G "AcclX_set_AcclIdx" 53 25 "int8(*AcclX parent,uint8_t value)"
V L "parent" 53 31 "*SensorValues"
F G "SensorValues_get_AcclY" 53 31 "*AcclY(*SensorValues parent,uint8_t value)"
V L "parent" 53 36 "*AcclY"
V L "value" 53 36 "int16_t"
F G "AcclY_set_AcclValue" 53 36 "int8(*AcclY parent,int16_t value)"
V L "parent" 53 42 "*AcclY"
V L "value" 53 42 "uint8_t"
F G "AcclY_set_AcclIdx" 53 42 "int8(*AcclY parent,uint8_t value)"
V L "parent" 53 48 "*SensorValues"
F G "SensorValues_get_AcclZ" 53 48 "*AcclZ(*SensorValues parent,uint8_t value)"
V L "parent" 53 53 "*AcclZ"
V L "value" 53 53 "int16_t"
F G "AcclZ_set_AcclValue" 53 53 "int8(*AcclZ parent,int16_t value)"
V L "parent" 53 59 "*AcclZ"
V L "value" 53 59 "uint8_t"
F G "AcclZ_set_AcclIdx" 53 59 "int8(*AcclZ parent,uint8_t value)"
V L "parent" 53 65 "*SensorValues"
V L "value" 53 65 "int8_t"
F G "SensorValues_set_Audio" 53 65 "int8(*SensorValues parent,int8_t value)"
V L "parent" 53 73 "*SensorValues"
F G "SensorValues_get_Light" 53 73 "*Light(*SensorValues parent,int8_t value)"
V L "parent" 53 78 "*Light"
V L "value" 53 78 "uint8_t"
F G "Light_set_LightValue" 53 78 "int8(*Light parent,uint8_t value)"
V L "parent" 53 84 "*Light"
V L "value" 53 84 "uint8_t"
F G "Light_set_LightIdx" 53 84 "int8(*Light parent,uint8_t value)"
V L "parent" 53 90 "*SensorValues"
F G "SensorValues_get_AmbientLight" 53 90 "*AmbientLight(*SensorValues parent,uint8_t value)"
V L "parent" 53 95 "*AmbientLight"
V L "value" 53 95 "uint8_t"
F G "AmbientLight_set_LightValue" 53 95 "int8(*AmbientLight parent,uint8_t value)"
V L "parent" 53 101 "*AmbientLight"
V L "value" 53 101 "uint8_t"
F G "AmbientLight_set_LightIdx" 53 101 "int8(*AmbientLight parent,uint8_t value)"
V L "parent" 53 107 "*SensorValues"
F G "SensorValues_get_Force" 53 107 "*Force(*SensorValues parent,uint8_t value)"
V L "parent" 53 112 "*Force"
V L "value" 53 112 "uint8_t"
F G "Force_set_ForceValue" 53 112 "int8(*Force parent,uint8_t value)"
V L "parent" 53 118 "*Force"
V L "value" 53 118 "uint8_t"
F G "Force_set_ForceIdx" 53 118 "int8(*Force parent,uint8_t value)"
V L "parent" 53 124 "*SensorValues"
F G "SensorValues_get_Temperature" 53 124 "*Temperature(*SensorValues parent,uint8_t value)"
V L "parent" 53 129 "*Temperature"
V L "value" 53 129 "int8_t"
F G "Temperature_set_TempValue" 53 129 "int8(*Temperature parent,int8_t value)"
V L "parent" 53 135 "*Temperature"
V L "value" 53 135 "uint8_t"
F G "Temperature_set_TempIdx" 53 135 "int8(*Temperature parent,uint8_t value)"
V L "parent" 53 141 "*SensorValues"
V L "value" 53 141 "uint16_t"
F G "SensorValues_set_Voltage" 53 141 "int8(*SensorValues parent,uint16_t value)"
D G "_DECODER_SEND_H_" 56 2 ""
V L "send_buffer" 56 4 "*int8"
V L "max_size" 56 4 "int8"
F G "send_data" 56 4 "int8(*int8 send_buffer,int8 max_size)" "(C) Copyright 1996,2003 Custom Computer Services           ////"
C L "send_data" 41 3 6 "FUNCTION"
C L "send_data" 50 2 7 "FUNCTION"
C L "send_data" 42 2 7 "FUNCTION"
C L "send_data" 39 1 1 "*"
C L "send_data" 39 1 1 "*"
C L "send_data" 39 1 1 "*"
C L "send_data" 39 1 1 "*"
C L "send_data" 39 1 1 "*"
C L "send_data" 39 1 1 "*"
C L "send_data" 39 1 1 "*"
V L "send_buffer" 57 9 "*int8"
V L "max_size" 57 9 "int8"
F G "send_data" 57 9 "int8(*int8 send_buffer,int8 max_size)"
V L "bytes_to_send" 57 10 "int8"
V L "AcclX_it" 57 11 "int8"
V L "AcclY_it" 57 12 "int8"
V L "AcclZ_it" 57 13 "int8"
V L "Audio_it" 57 14 "int8"
V L "Light_it" 57 15 "int8"
V L "AmbientLight_it" 57 16 "int8"
V L "Force_it" 57 17 "int8"
V L "Temperature_it" 57 18 "int8"
V L "Voltage_it" 57 19 "int8"
V L "SensorValues_elem" 57 21 "*SensorValues"
D G "PRS_SENSORS_MAX" 38 37 "8" "space needed in PRS_buffer / space needed in ACL_buffer  (in bytes)"
D G "PRS_ACCL" 38 39 "0" "6 / 12"
D G "PRS_ACCL_Z" 38 40 "1" "3 / 6"
D G "PRS_AUDIO" 38 41 "2" "3 / 6"
D G "PRS_LIGHT" 38 42 "3" "3 / 6"
D G "PRS_AMBIENTLIGHT" 38 43 "4" "3 / 6"
D G "PRS_FORCE" 38 44 "5" "2 / 5"
D G "PRS_TEMP" 38 45 "6" "2 / 5"
D G "PRS_VOLTAGE" 38 46 "7" "2 / 5"
D G "PRS_SENSOR_VALUES_MAX" 38 48 "24" "space needed in PRS_buffer for all used sensors."
D G "PRS_SEND_TIMEOUT_MAX" 38 50 "5" "number of bit to set, i. e. 32 slots."
D G "PRS_SLEEP_WANTED" 38 52 "1" "allow sleep here."
D G "PRS_SLOTS_FOR_ONE_SLEEP" 38 53 "202" "sleep-time ca. 2630 - 2640 ms = 202 slots."
D G "PRS_SLOTS_SLEEP_SAFE" 38 54 "13" "13 slots for safe wake-up."
D G "PRS_RATE_SLEEP_POSSIBLE" 38 55 "8" "every 256 slots, as 128 < 202 + 13"
D G "PRS_CONTROL_MESSAGES_MAX" 38 56 "200" "number of slots it is not allowed to sleep after having received a control message. otap."
D G "PRS_ACCL_DEFAULT" 38 58 "6" "rates from 0 to 15, means 'send every slot' to 'send every 32768.'; rate 255 means 'don't send'."
D G "PRS_ACCL_Z_DEFAULT" 38 59 "6"
D G "PRS_AUDIO_DEFAULT" 38 60 "6"
D G "PRS_AMBIENTLIGHT_DEFAULT" 38 61 "255"
D G "PRS_LIGHT_DEFAULT" 38 62 "6"
D G "PRS_FORCE_DEFAULT" 38 63 "255"
D G "PRS_TEMP_DEFAULT" 38 64 "6"
D G "PRS_VOLTAGE_DEFAULT" 38 65 "6"
D G "PRS_BITMASK_ACCL_AMBIENT_TEMP" 38 67 "0b01010011"
D G "PRS_BITMASK_AUDIO_FORCE" 38 68 "0b00100100"
D G "PRS_BITMASK_LIGHT" 38 69 "0b00001000"
V G "PRS_sensors_included" 38 73 "int8"
V G "PRS_sensors_wanted" 38 74 "int8"
V G "PRS_sensor_rates" 38 75 "int8[8]"
V G "PRS_slot_counter" 38 76 "int16"
V G "PRS_send_timeout" 38 77 "int16"
V G "PRS_last_slot_sent" 38 78 "int16"
V G "PRS_try_sleep" 38 79 "int8"
V G "PRS_control_messages_counter" 38 80 "int8" "functions."
F G "PRSInit" 38 83 "int8()"
F G "PRSRun" 38 84 "int8()"
F G "PRSSendSensorValues" 38 85 "int8()"
F G "PRSGoToSleep" 38 86 "int8()"
V L "sensor" 38 87 "int8"
F G "PRSAddSensorValueToSend" 38 87 "int8(int8 sensor)"
F G "PRSSensorsOnSelected" 38 88 "int8()"
F G "PRSSensorsOffSelected" 38 89 "int8()"
F G "PRSSensorsOffAll" 38 90 "int8()"
V L "pos" 38 91 "*int8"
F G "PRSGetAccl" 38 91 "int8(*int8 pos)"
F G "PRSSendAccl" 38 92 "int8()"
V L "pos" 38 93 "*int8"
F G "PRSGetAcclZ" 38 93 "int8(*int8 pos)"
F G "PRSSendAcclZ" 38 94 "int8()"
V L "pos" 38 95 "*int8"
F G "PRSGetAudio" 38 95 "int8(*int8 pos)"
F G "PRSSendAudio" 38 96 "int8()"
V L "pos" 38 97 "*int8"
F G "PRSGetLight" 38 97 "int8(*int8 pos)"
F G "PRSSendLight" 38 98 "int8()"
V L "pos" 38 99 "*int8"
F G "PRSGetAmbientlight" 38 99 "int8(*int8 pos)"
F G "PRSSendAmbientlight" 38 100 "int8()"
V L "pos" 38 101 "*int8"
F G "PRSGetForce" 38 101 "int8(*int8 pos)"
F G "PRSSendForce" 38 102 "int8()"
V L "pos" 38 103 "*int8"
F G "PRSGetTemp" 38 103 "int8(*int8 pos)"
F G "PRSSendTemp" 38 104 "int8()"
V L "pos" 38 105 "*int8"
F G "PRSGetVoltage" 38 105 "int8(*int8 pos)"
F G "PRSSendVoltage" 38 106 "int8()"
V L "timeout" 38 107 "int8"
F G "sendPacket" 38 107 "int8(int8 timeout)" "dy *"
V G "sensorVals" 38 110 "*SensorValues"
F G "PRSInit" 38 113 "int8()"
V L "i" 38 114 "int8"
V L "dummy1" 38 115 "int8"
V L "dummy2" 38 116 "int8"
C L "PRSInit" 38 36 1 "FUNCTION"
C L "PRSInit" 38 36 8 "FUNCTION"
C L "PRSInit" 38 36 3 "FUNCTION"
F G "PRSRun" 38 245 "int8()" "unsigned int length; *"
C L "PRSRun" 38 36 4 "FUNCTION"
C L "PRSRun" 38 36 28 "FUNCTION"
F G "PRSSendSensorValues" 38 314 "int8()"
V L "i" 38 315 "int8"
V L "timeout" 38 316 "int8"
V L "sensor_mask" 38 317 "int8"
V L "slot_counter_changes" 38 318 "int16"
V L "dummy" 38 319 "int8"
V L "timeout" 38 355 "int8"
F G "sendPacket" 38 356 "int8(int8 timeout)"
V L "data_len" 38 357 "int8"
C L "sendPacket" 38 36 1 "FUNCTION"
C L "sendPacket" 38 36 1 "FUNCTION"
F G "PRSGoToSleep" 38 374 "int8()"
V L "min" 38 375 "int8"
V L "diff_sensor_send" 38 376 "int16"
V L "i" 38 377 "int8"
V L "slot_counter" 38 378 "int16"
V L "dummy1" 38 379 "int8" "measuring sleep time."
C L "PRSGoToSleep" 38 36 8 "FUNCTION"
C L "PRSGoToSleep" 38 36 1 "FUNCTION"
C L "PRSGoToSleep" 38 36 2 "FUNCTION"
C L "PRSGoToSleep" 38 36 2 "FUNCTION"
C L "PRSGoToSleep" 38 36 15 "FUNCTION"
V L "sensor" 38 459 "int8"
F G "PRSAddSensorValueToSend" 38 460 "int8(int8 sensor)"
F G "PRSSensorsOnSelected" 38 495 "int8(int8 sensor)"
V L "dummy" 38 496 "int8"
F G "PRSSensorsOffSelected" 38 509 "int8()"
F G "PRSSensorsOffAll" 38 516 "int8()" "unsigned int dummy; *"
V L "pos" 38 529 "*int8"
F G "PRSGetAccl" 38 530 "int8(*int8 pos)"
V L "dummy1" 38 531 "int16"
V L "dummy2" 38 532 "sint16"
F G "PRSSendAccl" 38 557 "int8()" "dy *"
V L "pos" 38 560 "uint32_t"
V L "value" 38 561 "sint16"
V L "acclX" 38 562 "*AcclX"
V L "acclY" 38 563 "*AcclY"
V L "pos" 38 583 "*int8"
F G "PRSGetAcclZ" 38 584 "int8(*int8 pos)"
V L "dummy1" 38 585 "int16"
V L "dummy2" 38 586 "sint16"
F G "PRSSendAcclZ" 38 601 "int8()" "dy *"
V L "value" 38 603 "sint16"
V L "acclZ" 38 604 "*AcclZ"
V L "pos" 38 605 "int16"
V L "pos" 38 620 "*int8"
F G "PRSGetAudio" 38 621 "int8(*int8 pos)"
V L "dummy1" 38 622 "int8"
F G "PRSSendAudio" 38 631 "int8()" "dy *"
V L "pos" 38 633 "int8"
V L "pos" 38 645 "*int8"
F G "PRSGetLight" 38 646 "int8(*int8 pos)"
V L "dummy1" 38 647 "int8"
F G "PRSSendLight" 38 656 "int8()" "dy *"
V L "light" 38 658 "*Light"
V L "pos" 38 659 "int8"
V L "pos" 38 674 "*int8"
F G "PRSGetAmbientlight" 38 675 "int8(*int8 pos)"
V L "dummy1" 38 676 "int16"
V L "dummy2" 38 677 "int16"
C L "PRSGetAmbientlight" 38 36 2 "FUNCTION"
F G "PRSSendAmbientlight" 38 695 "int8()" "dy*"
V L "t" 38 697 "int16"
V L "aLight" 38 698 "*AmbientLight"
V L "pos" 38 699 "uint32_t"
C L "PRSSendAmbientlight" 38 36 1 "FUNCTION"
C L "PRSSendAmbientlight" 38 36 4 "FUNCTION"
V L "pos" 38 727 "*int8"
F G "PRSGetForce" 38 728 "int8(*int8 pos)"
V L "dummy1" 38 729 "int8"
F G "PRSSendForce" 38 738 "int8()" "dy *"
V L "force" 38 740 "*Force"
V L "pos" 38 741 "int8"
V L "pos" 38 754 "*int8"
F G "PRSGetTemp" 38 755 "int8(*int8 pos)"
V L "dummy1" 38 756 "sint8"
F G "PRSSendTemp" 38 765 "int8()" "dy *"
V L "temp" 38 767 "*Temperature"
V L "pos" 38 768 "sint8"
V L "pos" 38 781 "*int8"
F G "PRSGetVoltage" 38 782 "int8(*int8 pos)"
V L "dummy1" 38 783 "int16"
F G "PRSSendVoltage" 38 793 "int8()" "dy *"
V L "dummy" 38 795 "int16"
V L "pos" 38 796 "int16"
C L "SlotEndCallBack" 1 78 2 "FUNCTION"
F G "SlotEndCallBack" 1 82 "int8()" "RTCUpdate();"
C L "SlotEndCallBack" 1 78 2 "FUNCTION"
F G "main" 1 91 "int8()" "unsigned int stund;        *"
C L "main" 1 78 9 "FUNCTION"
C L "main" 1 78 1 "FUNCTION"
C L "main" 1 78 1 "FUNCTION"
C L "main" 1 78 3 "FUNCTION"
C L "main" 1 78 3 "FUNCTION"
