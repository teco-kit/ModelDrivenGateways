/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package Automata.provider;

import Automata.util.AutomataAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class AutomataItemProviderAdapterFactory extends AutomataAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public AutomataItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link Automata.StateMachine} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StateMachineItemProvider stateMachineItemProvider;

	/**
	 * This creates an adapter for a {@link Automata.StateMachine}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStateMachineAdapter() {
		if (stateMachineItemProvider == null) {
			stateMachineItemProvider = new StateMachineItemProvider(this);
		}

		return stateMachineItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Automata.SimpleState} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SimpleStateItemProvider simpleStateItemProvider;

	/**
	 * This creates an adapter for a {@link Automata.SimpleState}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSimpleStateAdapter() {
		if (simpleStateItemProvider == null) {
			simpleStateItemProvider = new SimpleStateItemProvider(this);
		}

		return simpleStateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Automata.StartState} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StartStateItemProvider startStateItemProvider;

	/**
	 * This creates an adapter for a {@link Automata.StartState}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStartStateAdapter() {
		if (startStateItemProvider == null) {
			startStateItemProvider = new StartStateItemProvider(this);
		}

		return startStateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Automata.StopState} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StopStateItemProvider stopStateItemProvider;

	/**
	 * This creates an adapter for a {@link Automata.StopState}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStopStateAdapter() {
		if (stopStateItemProvider == null) {
			stopStateItemProvider = new StopStateItemProvider(this);
		}

		return stopStateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Automata.complexType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected complexTypeItemProvider complexTypeItemProvider;

	/**
	 * This creates an adapter for a {@link Automata.complexType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createcomplexTypeAdapter() {
		if (complexTypeItemProvider == null) {
			complexTypeItemProvider = new complexTypeItemProvider(this);
		}

		return complexTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Automata.TByte} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TByteItemProvider tByteItemProvider;

	/**
	 * This creates an adapter for a {@link Automata.TByte}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTByteAdapter() {
		if (tByteItemProvider == null) {
			tByteItemProvider = new TByteItemProvider(this);
		}

		return tByteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Automata.TChar} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TCharItemProvider tCharItemProvider;

	/**
	 * This creates an adapter for a {@link Automata.TChar}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTCharAdapter() {
		if (tCharItemProvider == null) {
			tCharItemProvider = new TCharItemProvider(this);
		}

		return tCharItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Automata.TShort} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TShortItemProvider tShortItemProvider;

	/**
	 * This creates an adapter for a {@link Automata.TShort}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTShortAdapter() {
		if (tShortItemProvider == null) {
			tShortItemProvider = new TShortItemProvider(this);
		}

		return tShortItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Automata.TInt} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TIntItemProvider tIntItemProvider;

	/**
	 * This creates an adapter for a {@link Automata.TInt}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTIntAdapter() {
		if (tIntItemProvider == null) {
			tIntItemProvider = new TIntItemProvider(this);
		}

		return tIntItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Automata.TLong} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TLongItemProvider tLongItemProvider;

	/**
	 * This creates an adapter for a {@link Automata.TLong}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTLongAdapter() {
		if (tLongItemProvider == null) {
			tLongItemProvider = new TLongItemProvider(this);
		}

		return tLongItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Automata.TFloat} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TFloatItemProvider tFloatItemProvider;

	/**
	 * This creates an adapter for a {@link Automata.TFloat}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTFloatAdapter() {
		if (tFloatItemProvider == null) {
			tFloatItemProvider = new TFloatItemProvider(this);
		}

		return tFloatItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Automata.TDouble} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TDoubleItemProvider tDoubleItemProvider;

	/**
	 * This creates an adapter for a {@link Automata.TDouble}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTDoubleAdapter() {
		if (tDoubleItemProvider == null) {
			tDoubleItemProvider = new TDoubleItemProvider(this);
		}

		return tDoubleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link Automata.TString} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TStringItemProvider tStringItemProvider;

	/**
	 * This creates an adapter for a {@link Automata.TString}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTStringAdapter() {
		if (tStringItemProvider == null) {
			tStringItemProvider = new TStringItemProvider(this);
		}

		return tStringItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (stateMachineItemProvider != null) stateMachineItemProvider.dispose();
		if (simpleStateItemProvider != null) simpleStateItemProvider.dispose();
		if (startStateItemProvider != null) startStateItemProvider.dispose();
		if (stopStateItemProvider != null) stopStateItemProvider.dispose();
		if (complexTypeItemProvider != null) complexTypeItemProvider.dispose();
		if (tByteItemProvider != null) tByteItemProvider.dispose();
		if (tCharItemProvider != null) tCharItemProvider.dispose();
		if (tShortItemProvider != null) tShortItemProvider.dispose();
		if (tIntItemProvider != null) tIntItemProvider.dispose();
		if (tLongItemProvider != null) tLongItemProvider.dispose();
		if (tFloatItemProvider != null) tFloatItemProvider.dispose();
		if (tDoubleItemProvider != null) tDoubleItemProvider.dispose();
		if (tStringItemProvider != null) tStringItemProvider.dispose();
	}

}
