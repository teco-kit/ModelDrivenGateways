«IMPORT Automata»
«IMPORT edu::teco::automata::generator::templates»
«EXTENSION edu::teco::automata::generator::templates::util»
«EXTENSION edu::teco::automata::generator::templates::AcceptorUtil»

«DEFINE root FOR Automata::StateMachine»
   «initQueries()»
   «FILE "c/encoder_automata.c"»
/* Generated file */  
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <limits.h>
#include <errno.h>

#include "../bitsio/bits_io.h"
#include "read_str_func.h"

static int   out;
static int   label = 0;
static void *reader;

void encoder_automata_init(int _out, void * _reader)
{
   out    = _out;
   reader = _reader;
   label  = 0;
}

void encoder_automata_run() 
{
   int   ret       = 0;
   char *str       = NULL;
   while (1)
   {
   switch (label)
   {
   «clear()»
   «resetCase()»
   «FOREACH states AS st»
      «EXPAND encoderRoot::initNeeded FOR st»
   «ENDFOREACH»
   «clear()»
   «resetCase()»
   «FOREACH states AS st ITERATOR i-»
      «EXPAND encoderRoot::state(i.counter0) FOR st-»
   «ENDFOREACH-»
   }
   }
}
   «ENDFILE»
«ENDDEFINE»

«AROUND edu::teco::automata::generator::templates::encoderRoot::constLoop(Integer count) 
 FOR SimpleState»
   /* constLoop «getCurrPath() + name» */
   while (1)
   {
      static int lowB«count» = «lowerBound»;
      if (lowB«count» <= 0)
         breatk;
      lowB«count»--;
    «targetDef.proceed()»
«ENDAROUND»

«AROUND edu::teco::automata::generator::templates::encoderRoot::constLoopEnd(String endName) 
FOR State»
   } /* «endName» */
«ENDAROUND»

«AROUND edu::teco::automata::generator::templates::encoderRoot::loop(Integer count) 
FOR SimpleState»
   /* loop «getCurrPath() + name» */
   while(read_bit(reader))
   { /* depth «depth» */
   «targetDef.proceed()»
«ENDAROUND»

«AROUND edu::teco::automata::generator::templates::encoderRoot::loopEnd(String endName) 
FOR State»
   } /* «endName» */
«ENDAROUND»

«AROUND edu::teco::automata::generator::templates::encoderRoot::complexLoop(Integer count, Integer label) FOR SimpleState»
   if(read_bit(reader))
   { /* depth «depth»*/
   «targetDef.proceed()»
   }
   else
   {
      label = «getEndCase(name)» ;
      continue;
   } /* «name» */
«ENDAROUND»

«AROUND edu::teco::automata::generator::templates::encoderRoot::complexConstLoop(Integer count, Integer label) FOR SimpleState» 
   if(read_bit(reader))
   { /* depth «depth»*/
   «targetDef.proceed()»
   }
   else
   {
      label = «getEndCase(name)»;
      continue;
   } /* «name» */
«ENDAROUND»

«AROUND edu::teco::automata::generator::templates::encoderRoot::stateNameBegin 
FOR SimpleState»
   «IF kind != "attribute"-»
      «IF out.get(0).metaType.name == "Automata::SimpleState"-»
         «IF ((Automata::SimpleState)out.get(0)).kind != "attribute"-»
      write(out, "<«name»>\n", «name.length + "<>\n".length»);
         «ELSE-»
      write(out, "<«name»", «name.length + "<".length»);
         «ENDIF-»
      «ELSE-»
      write(out, "<«name»>\n", «name.length + "<>\n".length»);
      «ENDIF-»
   «ELSE-»
      write(out, " «name»=\"", «name.length + "=\"".length»);
   «ENDIF-»
«ENDAROUND»

«AROUND edu::teco::automata::generator::templates::encoderRoot::stateNameEnd 
FOR SimpleState»
   «IF kind != "attribute"-»
   write(out, "</«name»>\n", «name.length + "</>\n".length»);
   «ELSE-»
      write(out, "\"", «"\"".length»);
      «IF out.get(0).metaType.name == "Automata::SimpleState"-»
         «IF ((Automata::SimpleState)out.get(0)).kind != "attribute"-»
         write(out, ">\n", «">\n".length»);
         «ENDIF-»
      «ENDIF-»
   «ENDIF-»
«ENDAROUND»

«AROUND edu::teco::automata::generator::templates::encoderRoot::statePapaNameEnd 
FOR State»
   «IF getPapaKind() != "attribute"-»
   write(out, "</«getPapaName()»>\n", «getPapaName().length + "</>\n".length»);
   «ELSE-»
   «ENDIF-»
«ENDAROUND»

«AROUND edu::teco::automata::generator::templates::encoderRoot::stateType 
FOR SimpleState»
   «EXPAND readFunction»
   if (ret < 0)
   {
      fprintf(stderr, "Error reading input data. Errno: %s\n",
              strerror(errno));
      return;
   }
   write(out, str, strlen(str));
   «IF kind != "attribute"-»
   write(out, "\n", 1);
   «ENDIF-»
   free(str);
«ENDAROUND»

«DEFINE readFunction FOR SimpleState»
«LET getTypeMap(type.metaType.name).toLowerCase() AS tName»
ret = str_read_«getTypeMap(type.metaType.name).toLowerCase()»(&str
«IF tName == "string"-»
   , «((Automata::TString)type).length»
«ELSEIF tName == "int" || tName == "short" || tName == "byte" -»
   «LET ((Automata::TInt)type) AS type-»
      «IF type.min != type.max-»
         , «bitsLen(type.min, type.max)-»
      «ELSE-»
         , 0
      «ENDIF-»
      «IF ( (type.min == 0)                                && 
           ((type.max == twoPow(8)-1  && tName == "byte")  || 
           (type.max == twoPow(16)-1  && tName == "short") || 
           (type.max == twoPow(32)-1  && tName == "int")))-»
        , 1
      «ELSE-»
        , 0
      «ENDIF-»
   «ENDLET-»
«ELSEIF tName == "double"-»
   «LET ((Automata::TDouble)type) AS type-»
      «IF type.min != type.max-»
         , «bitsLen(type.min, type.max)-»
      «ELSE-»
         , 0
      «ENDIF-»
      «IF type.fractionDigits > 0-»
         , «type.fractionDigits», «fracBitsLen(type.fractionDigits)-»
      «ELSE-»
         , 0, 0
      «ENDIF-»
   «ENDLET-»
«ENDIF-»
, reader);
«ENDLET»
«ENDDEFINE»
