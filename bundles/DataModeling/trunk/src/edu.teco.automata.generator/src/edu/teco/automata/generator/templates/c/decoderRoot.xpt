«IMPORT Automata»
«EXTENSION edu::teco::automata::generator::templates::util»

«DEFINE root FOR StateMachine»
   «FILE "c/decoder_automata.c"»
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <limits.h>
#include <sys/types.h>
#include <stdint.h>

#include "../bitsio/bits_io.h"
#include "write_str_func.h"
#include "decoder_automata.h"

typedef struct {
int idx;
int elemCount;
} IdxMemo;
static int            elemCount = 0;
static int            idx = 1;
static IdxMemo *stack = NULL;
#define STD_STACK_SIZE 5
static int            curr_size = STD_STACK_SIZE;
static int            curr_idx = -1;
static int            fd = -1;

void automata_init ( int _fd )  
{
   stack  = (IdxMemo *)malloc(curr_size*sizeof(IdxMemo));
   (void)memset(stack, 0, curr_size*sizeof(IdxMemo));
   fd = _fd;
   write_init(fd);
}

void automata_finish( void )
{
   write_finish();
   
   if (stack != NULL)
   {
      free(stack);
      stack = NULL;
   }
}

       
int getElementDecoder(char * xmlElement, struct STR_WRITER_STRUCT * writer_struct) 
{
   while (1) 
   {
      switch (idx) 
      {
         «FOREACH states AS st ITERATOR i-»
         «EXPAND state(i.counter0) FOR st-»
         «ENDFOREACH-»
      default:
         if (idx < «states.size»)
            idx++;
         else 
            idx = 1;
         elemCount = 0;
         fprintf(stderr, "Unknown id");
      }
   }
}

   «ENDFILE»
«ENDDEFINE»

«DEFINE state(Integer count) FOR SimpleState-»
   case «count»: /* «name» */
      if (strcmp("«name»", xmlElement) != 0)
      {
         idx++;
         «IF type.metaType.name == complexTypeName()-» 
            «IF (upperBound != 1 && upperBound != 0) || 
                (upperBound == 1 && lowerBound == 0)-»
            «FOREACH out AS tr ITERATOR it-»
               «IF it.counter0 > 0-»
               else
               «ENDIF-»
               if (strcmp("«tr.name»", xmlElement) == 0)
               {
                  «IF upperBound > 0-»
                     if (elemCount > «upperBound»)
                       fprintf(stderr, "Error. Wrong count of element " 
                                       "«name» upB «upperBound»"
                                       " lowB «lowerBound»");
                  «ENDIF-»
                  if (++curr_idx >= curr_size)
                  {
                     curr_size += STD_STACK_SIZE;
                     stack      = realloc(stack, (curr_size)*sizeof(IdxMemo));
                  }
                  stack[curr_idx].idx       = «count»;
                  stack[curr_idx].elemCount = elemCount;
                  elemCount = 0;
                  continue;
               } 
            «ENDFOREACH-»
              else {
               «EXPAND nextSiblingState(count, depth) FOR this-»
               «IF lowerBound != upperBound-»
               write_false();
               «ENDIF-»
               elemCount = 0;
               continue;
              }
           «ENDIF-»
         «ENDIF-»

         
         «IF lowerBound != upperBound-»
            write_false();
         «ENDIF-»

         «IF lowerBound != 0-»
            if (  «IF upperBound > 0-»
                 elemCount > «upperBound» ||
            «ENDIF»  elemCount < «lowerBound» )
               fprintf(stderr, "Error. Wrong count of element " 
                               "«name» upB «upperBound»"
                               " lowB «lowerBound»");
         «ENDIF-»
            elemCount = 0;
         «IF out.get(0).metaType.name == "Automata::SimpleState"-»
            «IF ((SimpleState)out.get(0)).depth < depth-»  
               if (curr_idx > -1)
               { 
                  idx       = stack[curr_idx].idx;
                  elemCount = stack[curr_idx].elemCount;
                  curr_idx--;
                  continue;
               }
               
            «ENDIF-»
         «ELSE-»
             if (curr_idx > -1)
             { 
                idx       = stack[curr_idx].idx;
                elemCount = stack[curr_idx].elemCount;
                curr_idx--;
                continue;
             }
         «ENDIF-»
            

      } else {
         elemCount++;
         «IF lowerBound != upperBound-»
            write_true();
         «ENDIF-»
         «IF getTypeMap(type.metaType.name).toLowerCase() == "complextype"-»
         return 0;
         «ELSE-»
         «EXPAND getType»
         return 1;
         «ENDIF-»
         
      }
«ENDDEFINE»

«DEFINE state(Integer count) FOR StartState»
«ENDDEFINE»

«DEFINE nextSiblingState(Integer count, Integer papaDepth) FOR SimpleState-»
   «IF out.get(0).metaType.name == "Automata::SimpleState"-»
      «IF ((SimpleState)out.get(0)).depth <= papaDepth-»
         idx = «count + 1»;
      «ELSE-»
         «EXPAND nextSiblingState(count+1, papaDepth) FOR (SimpleState)out.get(0)-»
      «ENDIF-»
   «ELSE-»
      idx++;
   «ENDIF-»
«ENDDEFINE»

«DEFINE getType FOR SimpleState»
«LET getTypeMap(type.metaType.name).toLowerCase() AS tName»
writer_struct->func = str_write_«tName»;
«IF tName == "string"»
   «IF ((Automata::TString)type).length > 0»
   writer_struct->args.len = «((Automata::TString)type).length*8»;
   «ENDIF»
«ELSEIF tName == "int"»
   «IF ((Automata::TInt)type).min != ((Automata::TInt)type).max-»  
   writer_struct->args.min = «((Automata::TInt)type).min»;
   writer_struct->args.max = «((Automata::TInt)type).max»;
   writer_struct->args.len = «bitsLen(((Automata::TInt)type).min,
                                      ((Automata::TInt)type).max)»;
   «ENDIF»
   «IF ((Automata::TInt)type).stepping > 0-»  
      writer_struct->args.stepping = «((Automata::TInt)type).stepping»;
   «ENDIF»
«ELSEIF tName == "double"»
   «IF ((Automata::TDouble)type).min != ((Automata::TDouble)type).max-»  
   writer_struct->args.min = «((Automata::TDouble)type).min»;
   writer_struct->args.max = «((Automata::TDouble)type).max»;
   writer_struct->args.len = «bitsLen(((Automata::TDouble)type).min,
                                      ((Automata::TDouble)type).max)»;
   «ENDIF» 
   «IF ((Automata::TDouble)type).fractionDigits > 0-»
   writer_struct->args.frac = «((Automata::TDouble)type).fractionDigits»;
   writer_struct->args.frac_len = «fracBitsLen(((Automata::TDouble)type).fractionDigits)»;
   «ENDIF»
   «IF ((Automata::TDouble)type).stepping > 0-»                                        
   writer_struct->args.stepping = «((Automata::TDouble)type).stepping»;
   «ENDIF»
«ENDIF»
«ENDLET»
«ENDDEFINE»

«DEFINE state(Integer count) FOR StopState»
«ENDDEFINE»

«DEFINE state(Integer count) FOR State»
«REM»Should not be executed«ENDREM»
«ENDDEFINE»
