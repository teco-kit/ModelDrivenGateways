«IMPORT Automata»
«IMPORT ecore»
«EXTENSION edu::teco::automata::generator::templates::c::binEncoder»

«DEFINE ctype FOR DataType»«metaType.name»/*unknown*/«ERROR "type"+metaType.name+"unknown"»«ENDDEFINE»
«DEFINE scanstr FOR DataType»/*unknown type:«metaType.name»*/«ERROR "type"+metaType.name+"unknown"»«ENDDEFINE»
«DEFINE printstr FOR DataType»/*unknown type:«metaType.name»*/«ERROR "type"+metaType.name+"unknown"»«ENDDEFINE»
«DEFINE ctype FOR IntType»/*unknown type:«metaType.name»*/«ERROR "type"+metaType.name+"unknown"»«ENDDEFINE»
«DEFINE scanstr FOR IntType»/*unknown type:«metaType.name»*/«ERROR "type"+metaType.name+"unknown"»«ENDDEFINE»
«DEFINE printstr FOR IntType»/*unknown type:«metaType.name»*/«ERROR "type"+metaType.name+"unknown"»«ENDDEFINE»


«DEFINE ctype FOR TInt»int32_t«ENDDEFINE»
«DEFINE ctype FOR TShort»int16_t«ENDDEFINE»
«DEFINE ctype FOR TByte»int8_t«ENDDEFINE»

«DEFINE scanstr FOR TInt»
"%«IF signed()»ld«ELSE»lu«ENDIF»"
«ENDDEFINE»

«DEFINE printstr FOR TInt»
"%«IF signed()»l«ELSE»lu«ENDIF»"
«ENDDEFINE»

«DEFINE scanstr FOR TShort»
"%«IF signed()»hd«ELSE»hu«ENDIF»"
«ENDDEFINE»

«DEFINE printstr FOR TTimestamp»
"%Y-%m-%dT%H:%M:%S"
«ENDDEFINE»

 «DEFINE printstr FOR TShort»
"%«IF signed()»d«ELSE»u«ENDIF»"
«ENDDEFINE»

«DEFINE scanstr FOR TByte»
"%«IF signed()»hhd«ELSE»hhu«ENDIF-»"
«ENDDEFINE»

«DEFINE printstr FOR TByte»
"%«IF signed()»d«ELSE»u«ENDIF-»"
«ENDDEFINE»


«DEFINE encodeInt(String c) FOR IntType»
((«c») - («getMin()»))/«getStepping()»
«ENDDEFINE»

«DEFINE decodeInt(String c) FOR IntType»
«IF signed()»(«EXPAND ctype»)«ENDIF»(((«c»)*«getStepping()») + («getMin()»))
«ENDDEFINE»


«DEFINE strWriteInt(String in) FOR IntType»
{	
	«signed()?"":"u"»«EXPAND ctype» c;
	const char* str=«in»;
	if (sscanf(str, «EXPAND scanstr-», &c) != 1)
	{
		fprintf(stderr, "Error parsing char value\n");
		fprintf(stderr, "Input string: %s", str);
		ret=-1;
	}
	
	{
	 u«EXPAND ctype» d = «EXPAND encodeInt("c") -»;
	 ret=write_bits(writer,(u_char *)&d, «bitsLen()»);
	}

}
«ENDDEFINE»


«DEFINE writeInt(String in) FOR IntType»
{
 u«EXPAND ctype» d;
 d = «EXPAND encodeInt(in) -»;
 ret=write_bits(writer,(u_char *)&d, «bitsLen()»);
}
«ENDDEFINE»

«DEFINE strReadInt(String out) FOR IntType»
{
u«EXPAND ctype» c;
ret= read_bits(reader, (u_char *)&c, «bitsLen()»);
if(ret>=0) //todo check for exact
	{
  		ret=asprintf(«out», «EXPAND printstr», «EXPAND decodeInt("c")»); //TODO: check overflows
	}
else
	{
 		ret=-1;
 	}
}
«ENDDEFINE»

«DEFINE readInt(String out) FOR IntType»
{
u«EXPAND ctype» c;
read_bits(reader,(u_char *)&c,«bitsLen()-»);
*(«IF !signed()»u«ENDIF-»«EXPAND ctype»*) «out» = «EXPAND decodeInt("c")»;
}
«ENDDEFINE»

«DEFINE strWrite(String in) FOR TTimestamp»
{	
  struct timeval t;
  const char *str=«in»;
  
  ret=soap_s2dateTime(soap,str,&(t.tv_sec));
  if(ret!=0)
  {
  	fprintf(stderr, "Error parsing time value\n");
	fprintf(stderr, "Input string: %s", str);
    ret=-1;
  }
  else
  {
     «EXPAND write("t")»;
  }
}
«ENDDEFINE»

«DEFINE strRead(String out) FOR TTimestamp»
{
  struct timeval t;
  struct tm res;
  char out[64];
  
  «EXPAND read("&t")»;
  
  ret=strftime(out, sizeof(out), «EXPAND printstr»,localtime_r(&t.tv_sec,&res));
  
  if(ret>0)
  {
     ret=asprintf(«out», "%s.%06uZ",out,(uint32_t)((((uint64_t)t.tv_usec)*1000000)>>16));
  }
  else
  {
     ret=-1;
  }
}
«ENDDEFINE»

«DEFINE write(String in) FOR TTimestamp»
{
      ret=write_bits(writer,(u_char *)&(«in»).tv_sec,32);
     «IF bitsLen()>32»
      {
        uint16_t usec;
        usec=(«in»).tv_usec>>«(16-(bitsLen()-32))-»;
        ret+=write_bits(writer,(u_char *)&usec,«bitsLen()-32-»);
       }
     «ENDIF»
}
«ENDDEFINE»

«DEFINE read(String out) FOR TTimestamp»
{
  read_bits(reader,(u_char *)&(«out»)->tv_sec,32);
  «IF bitsLen()>32» 
  {
  uint16_t usec=0;
  read_bits(reader,(u_char *)&usec,«bitsLen()-32-»);
  («out»)->tv_usec=(uint32_t)usec<<«(16-(bitsLen()-32))-»;
  }
  «ENDIF»
}
«ENDDEFINE»

«DEFINE strWrite(String in) FOR DataType»
«IF IntType.isInstance(this)»
«EXPAND strWriteInt(in) FOR this.toIntType()»
«ELSE»
«ERROR "DataType "+metaType.name+" not supported"»
«ENDIF»
«ENDDEFINE»

«DEFINE strRead(String out) FOR DataType»
«IF IntType.isInstance(this)»
«EXPAND strReadInt(out) FOR this.toIntType()»
«ELSE»
«ERROR "DataType "+metaType.name+" not supported"»
«ENDIF»
«ENDDEFINE»

«DEFINE write(String in) FOR DataType»
«IF IntType.isInstance(this)»
«EXPAND writeInt(in) FOR this.toIntType()»
«ELSE»
«ERROR "DataType "+metaType.name+" not supported"»
«ENDIF»
«ENDDEFINE»

«DEFINE read(String out) FOR DataType»
«IF IntType.isInstance(this)»
«EXPAND readInt(out) FOR this.toIntType()»
«ELSE»
«ERROR "DataType "+metaType.name+" not supported"»
«ENDIF»
«ENDDEFINE»

