«IMPORT Automata»
«EXTENSION edu::teco::automata::generator::templates::util»

«DEFINE root FOR StateMachine»
   «FILE "DecoderAutomata.java"»
      package edu.teco.automata.generator.gen;
      
      import java.io.IOException;
      import java.util.Stack;
      
      import edu.teco.automata.generator.types.TypeStringIntf;
      import edu.teco.automata.generator.types.TypesString;
      import edu.teco.automata.generator.core.BitsIO;
      
      public class DecoderAutomata {
         private int              elemCount = 0;
         private int              idx       = 1;
         private BitsIO           io;
         private Stack<IdxMemo>   stack     = null;

         public DecoderAutomata ( BitsIO io )  {
            this.io = io;
            stack = new Stack<IdxMemo>();
         }
         
         public TypeStringIntf element(String xmlElement) 
         throws IOException {
            while (true) {
               switch (idx) {
               «FOREACH states AS st ITERATOR i»
                  «EXPAND state(i.counter0) FOR st»
               «ENDFOREACH»
               default:
                  if (idx < «states.size»)
                     idx++;
                  else 
                     idx = 1;
                  elemCount = 0;
                  System.err.println("Unknown id");
               }
            }
         }
         private class IdxMemo {
            public int idx;
            public int elemCount;
            public IdxMemo(int idx, int elemCount) {
               this.idx       = idx;
               this.elemCount = elemCount;
            }
         }
      }
   «ENDFILE»
«ENDDEFINE»

«DEFINE state(Integer count) FOR SimpleState»
   case «count»: // «name»
      if ("«name»" != xmlElement)
      {
         idx++;
         «IF type.metaType.name == complexTypeName()-»
            «IF (upperBound != 1 && upperBound != 0) || 
                (upperBound == 1 && lowerBound == 0)-»
            «FOREACH out AS tr ITERATOR it»
               «IF it.counter0 > 0»
               else
               «ENDIF»
               if ("«tr.name»" == xmlElement)
               {
                  «IF upperBound > 0»
                     if (elemCount > «upperBound»)
                        System.err.println("Error. Wrong count of element " + 
                                           "«name»" + " upB " +  "«upperBound»"
                                         + " lowB " + "«lowerBound»");
                  «ENDIF»
                  stack.push(new IdxMemo(«count», elemCount));
                  elemCount = 0;
                  continue;
               } 
            «ENDFOREACH»
              else {
               «EXPAND nextSiblingState(count, depth) FOR this»
               «IF lowerBound != upperBound-»
               io.write_false();
               «ENDIF-»
               elemCount = 0;
               continue;
              }
            «ENDIF»
         «ENDIF»

         «IF lowerBound != 0»
            if (  «IF upperBound > 0»
                 elemCount > «upperBound» ||
            «ENDIF»  elemCount < «lowerBound» )
               System.err.println("Error. Wrong count of element " + 
                                         "«name»" + " upB " +  "«upperBound»"
                                         + " lowB " + "«lowerBound» ");
         «ENDIF»
         
         «IF type.metaType.name == complexTypeName()-»
           «IF (upperBound == 1 || upperBound == 0) && 
                (upperBound != 1 || lowerBound != 0)-»
                «IF lowerBound != upperBound-»
                io.write_false();
                «ENDIF-»
                elemCount = 0;
           «ENDIF»
         «ELSE-»
           elemCount = 0;
           «IF lowerBound != upperBound»
           io.write_false();
           «ENDIF»
         «ENDIF»
         
         «IF out.get(0).metaType.name == "Automata::SimpleState"-»
            «IF ((SimpleState)out.get(0)).depth < depth»  
               if (!stack.isEmpty())
               {
                  IdxMemo memo = stack.pop(); 
                  idx       = memo.idx;
                  elemCount = memo.elemCount;
                  continue;
               }
               
            «ENDIF»
         «ELSE»
               if (!stack.isEmpty())
               {
                  IdxMemo memo = stack.pop(); 
                  idx       = memo.idx;
                  elemCount = memo.elemCount;
                  continue;
               }
         «ENDIF»
            

      } else {
         elemCount++;
         «IF lowerBound != upperBound»
            io.write_true();
         «ENDIF»
         return new TypesString.«getTypeMap(type.metaType.name)»();
      }
«ENDDEFINE»

«DEFINE state(Integer count) FOR StartState»
«ENDDEFINE»

«DEFINE nextSiblingState(Integer count, Integer ParentDepth) FOR SimpleState»
   «IF out.get(0).metaType.name == "Automata::SimpleState"-»
      «IF ((SimpleState)out.get(0)).depth <= ParentDepth»
         idx = «count + 1»;
      «ELSE»
         «EXPAND nextSiblingState(count+1, ParentDepth) FOR (SimpleState)out.get(0)»
      «ENDIF»
   «ELSE»
      idx++;
   «ENDIF»
«ENDDEFINE»

«DEFINE state(Integer count) FOR StopState»
«ENDDEFINE»

«DEFINE state(Integer count) FOR State»
«REM»Should not be executed«ENDREM»
«ENDDEFINE»
