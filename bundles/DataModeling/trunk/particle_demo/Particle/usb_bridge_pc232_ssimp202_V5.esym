D G "BOARD" 0 1 "pc232"
D G "SENSORBOARD" 0 2 "ssimp202"
D G "MAC" 0 3 "5"
C G "" 1 1 1 "*"
C G "" 1 1 1 "*"
C G "" 1 1 1 "*"
C G "" 1 1 1 "*"
C G "" 1 1 1 "*"
C G "" 1 1 1 "*"
C G "" 1 1 1 "*"
C G "" 1 1 1 "*"
C G "" 1 1 1 "*"
D G "this" 1 18 "(F) F"
D G "byte" 1 24 "BYTE"
D G "boolean" 1 25 "BOOLEAN"
D G "true" 1 26 "TRUE"
D G "false" 1 27 "FALSE"
D G "global" 1 28 "GLOBAL"
D G "INC" 1 30 "(X) #X"
D G "ACLAnyDataIsNew" 1 31 "ACLDataIsNew"
C G "" 2 1 1 "*"
C G "" 2 1 1 "*"
C G "" 2 1 1 "*"
C G "" 2 1 1 "*"
C G "" 2 1 1 "*"
C G "" 2 1 1 "*"
C G "" 2 1 1 "*"
C G "" 2 1 1 "*"
C G "" 2 1 1 "*"
C G "" 2 1 1 "*"
C G "" 2 1 1 "*"
C G "" 2 1 1 "*"
C G "" 2 1 1 "*"
C G "" 2 1 1 "*"
C G "" 2 1 1 "*"
C G "" 2 1 1 "*"
C G "" 2 1 1 "*"
C G "" 2 1 1 "*"
C G "" 2 1 1 "*"
C G "" 2 1 1 "*"
C G "" 2 1 1 "*"
C G "" 2 1 1 "*"
C G "" 2 1 1 "*"
C G "" 2 1 1 "*"
C G "" 2 1 1 "*"
C G "" 2 1 1 "*"
C G "" 2 1 1 "*"
C G "" 2 35 1 "*"
C G "" 2 35 1 "*"
C G "" 2 35 1 "*"
C G "" 2 35 1 "*"
C G "" 2 35 1 "*"
C G "" 2 35 1 "*"
C G "" 2 35 1 "*"
C G "" 2 35 1 "*"
C G "" 2 35 1 "*"
C G "" 2 35 1 "*"
C G "" 2 35 1 "*"
C G "" 2 35 1 "*"
C G "" 2 35 1 "*"
C G "" 2 35 1 "*"
C G "" 2 35 1 "*"
C G "" 2 35 1 "*"
C G "" 2 35 1 "*"
C G "" 2 35 1 "*"
C G "" 2 35 1 "*"
C G "" 2 35 1 "*"
C G "" 2 35 1 "*"
C G "" 2 35 1 "*"
C G "" 2 35 1 "*"
C G "" 2 35 1 "*"
C G "" 2 35 1 "*"
C G "" 2 35 1 "*"
C G "" 2 35 1 "*"
C G "" 2 35 1 "*"
C G "" 2 35 1 "*"
C G "" 2 35 1 "*"
D G "__ACLTYPES_H__" 2 85 "003"
D G "ACL_TYPE_ARG" 2 87 "(A) A>>8,A&0xff"
D G "ACL_TYPE_ALPHA" 2 89 "(A,B,C) ((A-0x33)+((B-0x33)*40)+((C-0x33)*1600))"
D G "ACL_TYPE_ALPHA_HI" 2 91 "(A,B,C) (ACL_TYPE_ALPHA(A,B,C)>>8)"
D G "ACL_TYPE_ALPHA_LO" 2 92 "(A,B,C) (ACL_TYPE_ALPHA(A,B,C)&0xff)"
D G "ACL_TYPE_ALPHA_ARG" 2 95 "(A,B,C) ACL_TYPE_ALPHA_HI(A,B,C),ACL_TYPE_ALPHA_LO(A,B,C)"
D G "ACL_TYPE_SGX_HI" 2 121 "234"
D G "ACL_TYPE_SGX_LO" 2 122 "128"
D G "ACL_TYPE_SGY_HI" 2 124 "240"
D G "ACL_TYPE_SGY_LO" 2 125 "192"
D G "ACL_TYPE_SGZ_HI" 2 127 "247"
D G "ACL_TYPE_SGZ_LO" 2 128 "0"
D G "ACL_TYPE_SLI_HI" 2 137 "141"
D G "ACL_TYPE_SLI_LO" 2 138 "136"
D G "ACL_TYPE_STE_HI" 2 146 "117"
D G "ACL_TYPE_STE_LO" 2 147 "200"
D G "ACL_TYPE_SFC_HI" 2 155 "103"
D G "ACL_TYPE_SFC_LO" 2 156 "24"
D G "ACL_TYPE_SAU_HI" 2 164 "214"
D G "ACL_TYPE_SAU_LO" 2 165 "208"
D G "ACL_TYPE_SSW_HI" 2 174 "230"
D G "ACL_TYPE_SSW_LO" 2 175 "32"
D G "ACL_TYPE_SVC_HI" 2 180 "105"
D G "ACL_TYPE_SVC_LO" 2 181 "152"
D G "ACL_TYPE_SJS_HI" 2 186 "203"
D G "ACL_TYPE_SJS_LO" 2 187 "184"
D G "ACL_TYPE_SIS_HI" 2 190 "203"
D G "ACL_TYPE_SIS_LO" 2 191 "144"
D G "ACL_TYPE_ACM_HI" 2 202 "165"
D G "ACL_TYPE_ACM_LO" 2 203 "14"
D G "ACL_TYPE_AMC_HI" 2 209 "104"
D G "ACL_TYPE_AMC_LO" 2 210 "30"
D G "ACL_TYPE_ASM_HI" 2 216 "167"
D G "ACL_TYPE_ASM_LO" 2 217 "142"
D G "ACL_TYPE_ACH_HI" 2 223 "133"
D G "ACL_TYPE_ACH_LO" 2 224 "206"
D G "ACL_TYPE_ADE_HI" 2 230 "115"
D G "ACL_TYPE_ADE_LO" 2 231 "54"
D G "ACL_TYPE_ADP_HI" 2 237 "183"
D G "ACL_TYPE_ADP_LO" 2 238 "246"
D G "ACL_TYPE_AFR_HI" 2 244 "196"
D G "ACL_TYPE_AFR_LO" 2 245 "198"
D G "ACL_TYPE_AMM_HI" 2 250 "166"
D G "ACL_TYPE_AMM_LO" 2 251 "158"
D G "ACL_TYPE_ADO_HI" 2 257 "177"
D G "ACL_TYPE_ADO_LO" 2 258 "182"
D G "ACL_TYPE_ABA_HI" 2 264 "89"
D G "ACL_TYPE_ABA_LO" 2 265 "230"
D G "ACL_TYPE_ALB_HI" 2 272 "97"
D G "ACL_TYPE_ALB_LO" 2 273 "182"
D G "ACL_TYPE_ACL_HI" 2 279 "158"
D G "ACL_TYPE_ACL_LO" 2 280 "206"
D G "ACL_TYPE_ASH_HI" 2 287 "136"
D G "ACL_TYPE_ASH_LO" 2 288 "78"
D G "ACL_TYPE_ARE_HI" 2 294 "117"
D G "ACL_TYPE_ARE_LO" 2 295 "102"
D G "ACL_TYPE_AAL_HI" 2 301 "158		" "artefact alchemist"
D G "ACL_TYPE_AAL_LO" 2 302 "126"
D G "ACL_TYPE_APS_HI" 2 307 "204"
D G "ACL_TYPE_APS_LO" 2 308 "150"
D G "ACL_TYPE_RDA_HI" 2 318 "90"
D G "ACL_TYPE_RDA_LO" 2 319 "71"
D G "ACL_TYPE_RDX_HI" 2 326 "234"
D G "ACL_TYPE_RDX_LO" 2 327 "7"
D G "ACL_TYPE_CAN_HI" 2 343 "171"
D G "ACL_TYPE_CAN_LO" 2 344 "0"
D G "ACL_TYPE_CHE_HI" 2 351 "115"
D G "ACL_TYPE_CHE_LO" 2 352 "216"
D G "ACL_TYPE_CEH_HI" 2 358 "134"
D G "ACL_TYPE_CEH_LO" 2 359 "32"
D G "ACL_TYPE_CSR_HI" 2 365 "198"
D G "ACL_TYPE_CSR_LO" 2 366 "208"
D G "ACL_TYPE_CPR_HI" 2 373 "198"
D G "ACL_TYPE_CPR_LO" 2 374 "88"
D G "ACL_TYPE_CRT_HI" 2 382 "211"
D G "ACL_TYPE_CRT_LO" 2 383 "40"
D G "ACL_TYPE_CRR_HI" 2 390 "198"
D G "ACL_TYPE_CRR_LO" 2 391 "168"
D G "ACL_TYPE_CFS_HI" 2 398 "203"
D G "ACL_TYPE_CFS_LO" 2 399 "8"
D G "ACL_TYPE_CSF_HI" 2 406 "123"
D G "ACL_TYPE_CSF_LO" 2 407 "208"
D G "ACL_TYPE_CID_HI" 2 413 "109"
D G "ACL_TYPE_CID_LO" 2 414 "192"
D G "ACL_TYPE_CST_HI" 2 420 "211"
D G "ACL_TYPE_CST_LO" 2 421 "80"
D G "ACL_TYPE_CAD_HI" 2 427 "108		" "adress control sequence"
D G "ACL_TYPE_CAD_LO" 2 428 "128"
D G "ACL_TYPE_CAC_HI" 2 436 "102"
D G "ACL_TYPE_CAC_LO" 2 437 "64"
D G "ACL_TYPE_CTR_HI" 2 443 "198"
D G "ACL_TYPE_CTR_LO" 2 444 "248"
D G "ACL_TYPE_CTA_HI" 2 457 "92"
D G "ACL_TYPE_CTA_LO" 2 458 "184"
D G "ACL_TYPE_CTS_HI" 2 472 "205"
D G "ACL_TYPE_CTS_LO" 2 473 "56"
D G "ACL_TYPE_CET_HI" 2 482 "209"
D G "ACL_TYPE_CET_LO" 2 483 "32"
D G "ACL_TYPE_CRS_HI" 2 502 "204"
D G "ACL_TYPE_CRS_LO" 2 503 "232"
D G "ACL_TYPE_CLE_HI" 2 520 "116"
D G "ACL_TYPE_CLE_LO" 2 521 "120"
D G "ACL_TYPE_CJC_HI" 2 545 "103"
D G "ACL_TYPE_CJC_LO" 2 546 "168"
D G "ACL_TYPE_CJR_HI" 2 560 "197"
D G "ACL_TYPE_CJR_LO" 2 561 "104"
D G "ACL_TYPE_CJA_HI" 2 571 "91"
D G "ACL_TYPE_CJA_LO" 2 572 "40"
D G "ACL_TYPE_CPI_HI" 2 579 "142"
D G "ACL_TYPE_CPI_LO" 2 580 "24"
D G "ACL_TYPE_CIC_HI" 2 591 "103"
D G "ACL_TYPE_CIC_LO" 2 592 "128"
D G "ACL_TYPE_CIR_HI" 2 602 "197"
D G "ACL_TYPE_CIR_LO" 2 603 "64"
D G "ACL_TYPE_CIA_HI" 2 610 "91"
D G "ACL_TYPE_CIA_LO" 2 611 "0"
d G "PIN_A0" 3 22 "31744"
d G "PIN_A1" 3 23 "31745"
d G "PIN_A2" 3 24 "31746"
d G "PIN_A3" 3 25 "31747"
d G "PIN_A4" 3 26 "31748"
d G "PIN_A5" 3 27 "31749"
d G "PIN_B0" 3 29 "31752"
d G "PIN_B1" 3 30 "31753"
d G "PIN_B2" 3 31 "31754"
d G "PIN_B3" 3 32 "31755"
d G "PIN_B4" 3 33 "31756"
d G "PIN_B5" 3 34 "31757"
d G "PIN_B6" 3 35 "31758"
d G "PIN_B7" 3 36 "31759"
d G "PIN_C0" 3 38 "31760"
d G "PIN_C1" 3 39 "31761"
d G "PIN_C2" 3 40 "31762"
d G "PIN_C3" 3 41 "31763"
d G "PIN_C4" 3 42 "31764"
d G "PIN_C5" 3 43 "31765"
d G "PIN_C6" 3 44 "31766"
d G "PIN_C7" 3 45 "31767"
d G "PIN_D0" 3 47 "31768"
d G "PIN_D1" 3 48 "31769"
d G "PIN_D2" 3 49 "31770"
d G "PIN_D3" 3 50 "31771"
d G "PIN_D4" 3 51 "31772"
d G "PIN_D5" 3 52 "31773"
d G "PIN_D6" 3 53 "31774"
d G "PIN_D7" 3 54 "31775"
d G "PIN_E0" 3 56 "31776"
d G "PIN_E1" 3 57 "31777"
d G "PIN_E2" 3 58 "31778"
d G "PIN_E3" 3 59 "31779"
d G "PIN_E4" 3 60 "31780"
d G "PIN_E5" 3 61 "31781"
d G "PIN_E6" 3 62 "31782"
d G "PIN_E7" 3 63 "31783"
d G "PIN_F0" 3 65 "31784"
d G "PIN_F1" 3 66 "31785"
d G "PIN_F2" 3 67 "31786"
d G "PIN_F3" 3 68 "31787"
d G "PIN_F4" 3 69 "31788"
d G "PIN_F5" 3 70 "31789"
d G "PIN_F6" 3 71 "31790"
d G "PIN_F7" 3 72 "31791"
d G "PIN_G0" 3 74 "31792"
d G "PIN_G1" 3 75 "31793"
d G "PIN_G2" 3 76 "31794"
d G "PIN_G3" 3 77 "31795"
d G "PIN_G4" 3 78 "31796"
d G "FALSE" 3 81 "0"
d G "TRUE" 3 82 "1"
d G "BYTE" 3 84 "int"
d G "BOOLEAN" 3 85 "short int"
d G "getc" 3 87 "getch"
d G "fgetc" 3 88 "getch"
d G "getchar" 3 89 "getch"
d G "putc" 3 90 "putchar"
d G "fputc" 3 91 "putchar"
d G "fgets" 3 92 "gets"
d G "fputs" 3 93 "puts"
d G "WDT_TIMEOUT" 3 99 "4"
d G "MCLR_FROM_SLEEP" 3 100 "8"
d G "NORMAL_POWER_UP" 3 101 "12"
d G "BROWNOUT_RESTART" 3 102 "14"
d G "RTCC_INTERNAL" 3 109 "0"
d G "RTCC_EXT_L_TO_H" 3 110 "32"
d G "RTCC_EXT_H_TO_L" 3 111 "48"
d G "RTCC_DIV_1" 3 113 "8"
d G "RTCC_DIV_2" 3 114 "0"
d G "RTCC_DIV_4" 3 115 "1"
d G "RTCC_DIV_8" 3 116 "2"
d G "RTCC_DIV_16" 3 117 "3"
d G "RTCC_DIV_32" 3 118 "4"
d G "RTCC_DIV_64" 3 119 "5"
d G "RTCC_DIV_128" 3 120 "6"
d G "RTCC_DIV_256" 3 121 "7"
d G "RTCC_OFF" 3 123 "0x80"
d G "RTCC_8_BIT" 3 125 "0x40"
d G "WDT_ON" 3 135 "0x100"
d G "WDT_OFF" 3 136 "0"
d G "T1_DISABLED" 3 142 "0"
d G "T1_INTERNAL" 3 143 "0x85"
d G "T1_EXTERNAL" 3 144 "0x87"
d G "T1_EXTERNAL_SYNC" 3 145 "0x83"
d G "T1_CLK_OUT" 3 147 "8"
d G "T1_DIV_BY_1" 3 149 "0"
d G "T1_DIV_BY_2" 3 150 "0x10"
d G "T1_DIV_BY_4" 3 151 "0x20"
d G "T1_DIV_BY_8" 3 152 "0x30"
d G "T2_DISABLED" 3 157 "0"
d G "T2_DIV_BY_1" 3 158 "4"
d G "T2_DIV_BY_4" 3 159 "5"
d G "T2_DIV_BY_16" 3 160 "6"
d G "T3_DISABLED" 3 166 "0"
d G "T3_INTERNAL" 3 167 "0x85"
d G "T3_EXTERNAL" 3 168 "0x87"
d G "T3_EXTERNAL_SYNC" 3 169 "0x83"
d G "T3_DIV_BY_1" 3 171 "0"
d G "T3_DIV_BY_2" 3 172 "0x10"
d G "T3_DIV_BY_4" 3 173 "0x20"
d G "T3_DIV_BY_8" 3 174 "0x30"
d G "T4_DISABLED" 3 179 "0"
d G "T4_DIV_BY_1" 3 180 "4"
d G "T4_DIV_BY_4" 3 181 "5"
d G "T4_DIV_BY_16" 3 182 "6"
d G "CCP_OFF" 3 188 "0"
d G "CCP_CAPTURE_FE" 3 189 "4"
d G "CCP_CAPTURE_RE" 3 190 "5"
d G "CCP_CAPTURE_DIV_4" 3 191 "6"
d G "CCP_CAPTURE_DIV_16" 3 192 "7"
d G "CCP_COMPARE_SET_ON_MATCH" 3 193 "8"
d G "CCP_COMPARE_CLR_ON_MATCH" 3 194 "9"
d G "CCP_COMPARE_INT" 3 195 "0xA"
d G "CCP_COMPARE_INT_AND_TOGGLE" 3 196 "0x2"
d G "CCP_COMPARE_RESET_TIMER" 3 197 "0xB"
d G "CCP_PWM" 3 198 "0xC"
d G "CCP_PWM_PLUS_1" 3 199 "0x1c"
d G "CCP_PWM_PLUS_2" 3 200 "0x2c"
d G "CCP_PWM_PLUS_3" 3 201 "0x3c"
d G "CCP_USE_TIMER3" 3 202 "0x100"
v G "CCP_1" 3 203 "int16"
v G "CCP_2" 3 207 "int16"
v G "CCP_3" 3 211 "int16"
v G "CCP_4" 3 215 "int16"
v G "CCP_5" 3 219 "int16"
d G "T3_CCP1_TO_5" 3 225 "0x48"
d G "T3_CCP2_TO_5" 3 226 "0x8"
d G "T3_CCP3_TO_5" 3 227 "0x40"
d G "PSP_ENABLED" 3 234 "0x10"
d G "PSP_DISABLED" 3 235 "0"
d G "SPI_MASTER" 3 242 "0x20"
d G "SPI_SLAVE" 3 243 "0x24"
d G "SPI_L_TO_H" 3 244 "0"
d G "SPI_H_TO_L" 3 245 "0x10"
d G "SPI_CLK_DIV_4" 3 246 "0"
d G "SPI_CLK_DIV_16" 3 247 "1"
d G "SPI_CLK_DIV_64" 3 248 "2"
d G "SPI_CLK_T2" 3 249 "3"
d G "SPI_SS_DISABLED" 3 250 "1"
d G "SPI_SAMPLE_AT_END" 3 252 "0x8000"
d G "SPI_XMIT_L_TO_H" 3 253 "0x4000"
d G "A0_A3_A1_A3" 3 258 "0xfff04"
d G "A0_A3_A1_A2_OUT_ON_A4_A5" 3 259 "0xfcf03"
d G "A0_A3_A1_A3_OUT_ON_A4_A5" 3 260 "0xbcf05"
d G "NC_NC_NC_NC" 3 261 "0x0ff07"
d G "A0_A3_A1_A2" 3 262 "0xfff02"
d G "A0_A3_NC_NC_OUT_ON_A4" 3 263 "0x9ef01"
d G "A0_VR_A1_VR" 3 264 "0x3ff06"
d G "A3_VR_A2_VR" 3 265 "0xcff0e"
d G "NO_ANALOGS" 3 274 "0x0F" "None"
d G "ALL_ANALOG" 3 275 "0x00" "A0 A1 A2 A3 A5 F0 F1 F2 F3 F4 F5 F6"
d G "ANALOG_AN0_TO_AN10" 3 276 "0x04" "A0 A1 A2 A3 A5 F0 F1 F2 F3 F4 F5"
d G "ANALOG_AN0_TO_AN9" 3 277 "0x05" "A0 A1 A2 A3 A5 F0 F1 F2 F3 F4"
d G "ANALOG_AN0_TO_AN8" 3 278 "0x06" "A0 A1 A2 A3 A5 F0 F1 F2 F3"
d G "ANALOG_AN0_TO_AN7" 3 279 "0x07" "A0 A1 A2 A3 A5 F0 F1 F2"
d G "ANALOG_AN0_TO_AN6" 3 280 "0x08" "A0 A1 A2 A3 A5 F0 F1"
d G "ANALOG_AN0_TO_AN5" 3 281 "0x09" "A0 A1 A2 A3 A5 F0"
d G "ANALOG_AN0_TO_AN4" 3 282 "0x0A" "A0 A1 A2 A3 A5"
d G "ANALOG_AN0_TO_AN3" 3 283 "0x0B" "A0 A1 A2 A3"
d G "ANALOG_AN0_TO_AN2" 3 284 "0x0C" "A0 A1 A2"
d G "ANALOG_AN0_TO_AN1" 3 285 "0x0D" "A0 A1"
d G "ANALOG_AN0" 3 286 "0x0E" "A0"
d G "VSS_VDD" 3 288 "0x00" "Range 0-Vdd"
d G "VREF_VREF" 3 289 "0x30" "Range VrefL-VrefH"
d G "VREF_VDD" 3 290 "0x20" "Range VrefL-Vdd"
d G "VSS_VREF" 3 291 "0x10" "Range 0-VrefH"
d G "ADC_OFF" 3 294 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 3 295 "0x100"
d G "ADC_CLOCK_DIV_4" 3 296 "0x104"
d G "ADC_CLOCK_DIV_8" 3 297 "0x101"
d G "ADC_CLOCK_DIV_16" 3 298 "0x105"
d G "ADC_CLOCK_DIV_32" 3 299 "0x102"
d G "ADC_CLOCK_DIV_64" 3 300 "0x106"
d G "ADC_CLOCK_INTERNAL" 3 301 "0x107" "Internal 2-6us"
d G "ADC_START_AND_READ" 3 304 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 3 305 "1"
d G "ADC_READ_ONLY" 3 306 "6"
d G "L_TO_H" 3 313 "0x40"
d G "H_TO_L" 3 314 "0"
d G "GLOBAL" 3 316 "0xF2C0"
d G "INT_RTCC" 3 317 "0xF220"
d G "INT_TIMER0" 3 318 "0xF220"
d G "INT_TIMER1" 3 319 "0x9D01"
d G "INT_TIMER2" 3 320 "0x9D02"
d G "INT_TIMER3" 3 321 "0xA002"
d G "INT_EXT" 3 322 "0xF210"
d G "INT_EXT1" 3 323 "0xF008"
d G "INT_EXT2" 3 324 "0xF010"
d G "INT_EXT3" 3 325 "0xF020"
d G "INT_RB" 3 326 "0xF208"
d G "INT_AD" 3 327 "0x9D40"
d G "INT_RDA" 3 328 "0x9D20"
d G "INT_TBE" 3 329 "0x9D10"
d G "INT_SSP" 3 330 "0x9D08"
d G "INT_CCP1" 3 331 "0x9D04"
d G "INT_CCP2" 3 332 "0xA001"
d G "INT_BUSCOL" 3 333 "0xA008"
d G "INT_LOWVOLT" 3 334 "0xA004"
d G "INT_COMP" 3 335 "0xA040"
d G "INT_EEPROM" 3 336 "0xA010"
d G "INT_RDA2" 3 337 "0xA320"
d G "INT_TBE2" 3 338 "0xA310"
d G "INT_TIMER4" 3 339 "0xA308"
d G "INT_CCP3" 3 340 "0xA301"
d G "INT_CCP4" 3 341 "0xA302"
d G "INT_CCP5" 3 342 "0xA304"
D G "PROCESSOR_TYPE" 4 10 "186720"
D G "RD" 4 151 "0"
D G "WR" 4 152 "1"
D G "WREN" 4 153 "2"
D G "WRERR" 4 154 "3"
D G "FREE" 4 155 "4"
D G "CFGS" 4 156 "6"
D G "EEPGD" 4 157 "7"
D G "EEIF" 4 160 "4"
D G "ADCH_PIN_A0" 4 163 "0b00000000"
D G "ADCH_PIN_A1" 4 164 "0b00000001"
D G "ADCH_PIN_A2" 4 165 "0b00000010"
D G "ADCH_PIN_A3" 4 166 "0b00000011"
D G "ADCH_PIN_A5" 4 167 "0b00000100"
D G "ADCH_PIN_F0" 4 168 "0b00000101"
C G "" 5 1 1 "*"
C G "" 5 1 1 "*"
D G "__PC232_H__" 5 14 "000"
D G "BOARD_ID_HIGH" 5 21 "2		" "boardtype is particle (1), board_id_high is 1<<1, see docu particle ids"
D G "BOARD_ID_LOW" 5 22 "232		" "boardversion"
D G "PIN_RF_CTR0" 5 26 "PIN_F5"
D G "TRIS_RF_CTR0" 5 27 "PIC_TRISF,5"
D G "PIN_RF_CTR1" 5 28 "PIN_G4"
D G "TRIS_RF_CTR1" 5 29 "PIC_TRISG,4"
D G "PIN_RF_TX" 5 30 "PIN_C5			" "SPI Out"
D G "TRIS_RF_TX" 5 31 "PIC_TRISC,5"
D G "PIN_RF_RX" 5 32 "PIN_G2			" "Data Line of Usart in Synchronous Mode"
D G "TRIS_RF_RX" 5 33 "PIC_TRISG,2"
D G "PIN_RF_POWER" 5 34 "PIN_D2"
D G "TRIS_RF_POWER" 5 35 "PIC_TRISD,2"
D G "PIN_RF_SENSITIVE" 5 36 "PIN_D1"
D G "TRIS_RF_SENSITIVE" 5 37 "PIC_TRISD,1"
D G "PIN_POTI_POWER" 5 41 "PIN_G3"
D G "TRIS_POTI_POWER" 5 42 "PIN_TRISG,3"
D G "PIN_POTI_UD" 5 43 "PIN_E0"
D G "TRIS_POTI_UD" 5 44 "PIC_TRISE,0"
D G "PIN_POTI_INC" 5 45 "PIN_G0"
D G "TRIS_POTI_INC" 5 46 "PIC_TRISG,0"
D G "LED_PC_RED" 5 50 "PIN_C2"
D G "LED_PC_BLUE" 5 51 "PIN_F6"
D G "RED" 5 52 "LED_PC_RED			" "for convenience"
D G "BLUE" 5 53 "LED_PC_BLUE"
D G "PIN_I2C_PC_SDA" 5 57 "PIN_C5"
D G "TRIS_I2C_PC_SDA" 5 58 "PIC_TRISC,5"
D G "PIN_I2C_PC_SCL" 5 59 "PIN_C3"
D G "TRIS_I2C_PC_SCL" 5 60 "PIC_TRISC,3"
D G "PIN_I2C_PC_POWER" 5 61 "PIN_D7"
D G "TRIS_I2C_PC_POWER" 5 62 "PIC_TRISD,7"
D G "XROM_ID" 5 64 "0"
D G "PIN_VOLTAGE" 5 67 "PIN_A0"
D G "ADCH_VOLTAGE" 5 68 "ADCH_PIN_A0"
D G "TRIS_RSSI_POWER" 5 71 "PIC_TRISF,4"
D G "PIN_RSSI_POWER" 5 72 "PIN_F4"
D G "TRIS_RSSI_IN" 5 73 "PIC_TRISA,1"
D G "PIN_RSSI_IN" 5 74 "PIN_A1"
D G "ADCH_RSSI" 5 75 "ADCH_PIN_A1"
D G "PIN_RSSI_RES" 5 77 "PIN_F3"
D G "TRIS_RSSI_RES" 5 78 "PIC_TRISF, 3"
D G "PIN_RSSI_CAP" 5 79 "PIN_E1"
D G "TRIS_RSSI_CAP" 5 80 "PIC_TRISE, 1"
D G "PIN_RSSI_VDD" 5 81 "PIN_F7"
D G "TRIS_RSSI_VDD" 5 82 "PIC_TRISF, 7"
D G "PIN_FLASH_POWER" 5 86 "PIN_D7"
D G "TRIS_FLASH_POWER" 5 87 "PIC_TRISD,7"
D G "PIN_FLASH_CS" 5 88 "PIN_D3"
D G "TRIS_FLASH_CS" 5 89 "PIC_TRISD,3"
D G "PIN_FLASH_SI" 5 93 "PIN_C5"
D G "TRIS_FLASH_SI" 5 94 "PIC_TRISC,5"
D G "PIN_FLASH_SO" 5 95 "PIN_C4"
D G "TRIS_FLASH_SO" 5 96 "PIC_TRISC,4"
D G "PIC_FLASH_SCK" 5 97 "PIN_C3"
D G "TRIS_FLASH_SCK" 5 98 "PIC_TRISC,3"
D G "TRIS_BUZZER" 5 102 "PIC_TRISE,3"
D G "PIN_BUZZER" 5 103 "PIN_E3"
D G "TRIS_ID_CHIP_DATA" 5 107 "PIC_TRISE,7"
D G "PIN_ID_CHIP_DATA" 5 108 "PIN_E7"
D G "PIN_ID_CHIP_POWER" 5 109 "PIN_E6"
D G "TRIS_ID_CHIP_POWER" 5 110 "PIC_TRISE,6"
D G "TRIS_BALL_INNER" 5 114 "PIC_TRISD,0"
D G "PIN_BALL_INNER" 5 115 "PIN_D0"
D G "PIN_BALL_OUTER" 5 116 "PIN_B0"
D G "TRIS_BALL_OUTER" 5 117 "PIC_TRISB,0"
D G "PIN_CONN_01" 5 121 "" "VCC"
D G "PIN_CONN_02" 5 122 "PIN_B0"
D G "PIN_CONN_03" 5 123 "PIN_B1"
D G "PIN_CONN_04" 5 124 "PIN_B2"
D G "PIN_CONN_05" 5 125 "PIN_B3"
D G "PIN_CONN_06" 5 126 "PIN_B4"
D G "PIN_CONN_07" 5 127 "PIN_B5"
D G "PIN_CONN_08" 5 128 "PIN_B6"
D G "PIN_CONN_09" 5 129 "PIN_B7"
D G "PIN_CONN_10" 5 130 "" "MCLR"
D G "PIN_CONN_11" 5 131 "PIN_A2"
D G "PIN_CONN_12" 5 132 "PIN_A3"
D G "PIN_CONN_13" 5 133 "PIN_F0"
D G "PIN_CONN_14" 5 134 "PIN_A5"
D G "PIN_CONN_15" 5 135 "PIN_E4"
D G "PIN_CONN_16" 5 136 "PIN_E5"
D G "PIN_CONN_17" 5 137 "PIN_D4"
D G "PIN_CONN_18" 5 138 "PIN_D5"
D G "PIN_CONN_19" 5 139 "PIN_C6"
D G "PIN_CONN_20" 5 140 "PIN_C7"
D G "PIN_CONN_21" 5 141 "" "GND"
D G "TRIS_CONN_01" 5 143 "" "VCC"
D G "TRIS_CONN_02" 5 144 "PIC_TRISB,0"
D G "TRIS_CONN_03" 5 145 "PIC_TRISB,1"
D G "TRIS_CONN_04" 5 146 "PIC_TRISB,2"
D G "TRIS_CONN_05" 5 147 "PIC_TRISB,3"
D G "TRIS_CONN_06" 5 148 "PIC_TRISB,4"
D G "TRIS_CONN_07" 5 149 "PIC_TRISB,5"
D G "TRIS_CONN_08" 5 150 "PIC_TRISB,6"
D G "TRIS_CONN_09" 5 151 "PIC_TRISB,7"
D G "TRIS_CONN_10" 5 152 "" "MCLR"
D G "TRIS_CONN_11" 5 153 "PIC_TRISA,2"
D G "TRIS_CONN_12" 5 154 "PIC_TRISA,3"
D G "TRIS_CONN_13" 5 155 "PIC_TRISF,0"
D G "TRIS_CONN_14" 5 156 "PIC_TRISA,5"
D G "TRIS_CONN_15" 5 157 "PIC_TRISE,4"
D G "TRIS_CONN_16" 5 158 "PIC_TRISE,5"
D G "TRIS_CONN_17" 5 159 "PIC_TRISD,4"
D G "TRIS_CONN_18" 5 160 "PIC_TRISD,5"
D G "TRIS_CONN_19" 5 161 "PIC_TRISC,6"
D G "TRIS_CONN_20" 5 162 "PIC_TRISC,7"
D G "TRIS_CONN_21" 5 163 "" "GND"
D G "ADCH_CONN_11" 5 165 "ADCH_PIN_A2"
D G "ADCH_CONN_12" 5 166 "ADCH_PIN_A3"
D G "ADCH_CONN_13" 5 167 "ADCH_PIN_F0"
D G "ADCH_CONN_14" 5 168 "ADCH_PIN_A5"
D G "TRIS_RPC_HANDSHAKE_SERVER" 5 172 "TRIS_CONN_04"
D G "PIN_RPC_HANDSHAKE_SERVER" 5 173 "PIN_CONN_04"
D G "RF_TXSTA" 5 176 "PIC_TXSTA2"
D G "RF_SPBRG" 5 177 "PIC_SPBRG2"
D G "RF_RCREG" 5 178 "PIC_RCREG2"
D G "RF_RCSTA" 5 179 "PIC_RCSTA2"
D G "RF_UART_SREN" 5 180 "PIC_RCSTA2,5"
D G "RF_UART_CREN" 5 181 "PIC_RCSTA2,4"
D G "RF_UART_RCIF" 5 182 "PIC_PIR3,5"
D G "RF_UART_SPEN" 5 183 "PIC_RCSTA2,7"
D G "RF_SSPBUF" 5 185 "PIC_SSPBUF"
D G "RF_SSPSTAT_BF" 5 186 "PIC_SSPSTAT,0"
D G "RF_TIMER1_IF" 5 187 "PIC_PIR1,0"
D G "RF_TIMER1_CON" 5 188 "PIC_T1CON"
D G "RF_TIMER2_TMR2IF" 5 189 "PIC_PIR1,1"
D G "RF_TIMER1H" 5 191 "PIC_TMR1H"
D G "RF_TIMER1L" 5 192 "PIC_TMR1L"
D G "RF_TIMER2" 5 193 "PIC_TMR2"
D G "RF_SSPCON_SSPEN" 5 195 "PIC_SSPCON1,5"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 1 "*"
C G "" 6 1 2 "*"
C G "" 6 35 1 "*"
C G "" 6 35 1 "*"
C G "" 6 35 1 "*"
C G "" 6 35 1 "*"
C G "" 6 35 1 "*"
C G "" 6 35 1 "*"
D G "__WDT18FXX20_H__" 6 49 "003"
C L "WDTConfig" 6 51 1 "*"
C L "WDTConfig" 6 51 1 "*"
C L "WDTConfig" 6 51 1 "*"
C L "WDTConfig" 6 51 1 "*"
C L "WDTConfig" 6 51 1 "*"
C L "WDTConfig" 6 51 1 "*"
C L "WDTConfig" 6 51 1 "*"
C L "WDTConfig" 6 51 1 "*"
C L "WDTConfig" 6 51 1 "*"
C L "WDTConfig" 6 51 1 "*"
C L "WDTConfig" 6 51 1 "*"
C L "WDTConfig" 6 51 1 "*"
V L "timeout" 6 66 "int8"
F G "WDTConfig" 6 66 "int8(int8 timeout)" "* Enables the software watchdog timer."
F G "WDTEnable" 6 71 "int8()" "* Disables the software watchdog timer."
F G "WDTDisable" 6 76 "int8()" "* Tests, whether software watchdog timer is enabled (returns 1) or disabled (returns 0)"
F G "WDTTest" 6 81 "int8()" "* Reads the actual value of the software-watchdog-timer"
C L "WDTTest" 6 83 1 "*"
F G "WDTReadValue" 6 87 "int8()" "* Processor file for 18f6720."
C L "WDTReadValue" 7 1 1 "*"
C L "WDTReadValue" 7 1 1 "*"
C L "WDTReadValue" 7 1 1 "*"
C L "WDTReadValue" 7 1 1 "*"
C L "WDTReadValue" 7 1 1 "*"
C L "WDTReadValue" 7 1 1 "*"
C L "WDTReadValue" 7 1 1 "*"
C L "WDTReadValue" 7 1 1 "*"
D G "__18f6720_C__" 7 19 "008"
D G "SAVETIMINGS" 7 23 ""
C L "WDTReadValue" 7 1 4 "FUNCTION"
V L "address" 7 31 "int8"
V L "data" 7 31 "int8"
F G "WriteIntEeprom" 7 31 "int8(int8 address,int8 data)"
V L "address" 7 32 "int8"
F G "ReadIntEeprom" 7 32 "int8(int8 address)"
V L "Minizekunden" 7 34 "int16"
F G "DelayMs" 7 34 "int8(int16 Minizekunden)"
V L "muesekunden" 7 36 "int8"
F G "DelayUs" 7 36 "int8(int8 muesekunden)"
V L "muesekunden" 7 38 "int16"
F G "DelayUsLong" 7 38 "int8(int16 muesekunden)" "to make DelayUs as independent as possible from ccs compiler........"
D G "hi" 7 47 "(x)  (*(&x+1))"
D G "lo" 7 48 "(x)  (*(&x))"
D G "EEPROM_ADDRESS_ID" 7 49 "0		" "start addresss for ID in internal EEPROM"
D G "PIN_0_ON" 7 65 "#asm   bsf PIC_PORTB,0 #endasm"
D G "PIN_0_OFF" 7 66 "#asm   bcf PIC_PORTB,0 #endasm"
D G "PIN_1_ON" 7 67 "#asm   bsf PIC_PORTB,1 #endasm"
D G "PIN_1_OFF" 7 68 "#asm   bcf PIC_PORTB,1 #endasm"
D G "PIN_2_ON" 7 69 "#asm   bsf PIC_PORTB,2 #endasm"
D G "PIN_2_OFF" 7 70 "#asm   bcf PIC_PORTB,2 #endasm"
D G "PIN_3_ON" 7 71 "#asm   bsf PIC_PORTB,3 #endasm"
D G "PIN_3_OFF" 7 72 "#asm   bcf PIC_PORTB,3 #endasm"
D G "PIN_4_ON" 7 73 "#asm   bsf PIC_PORTB,4 #endasm"
D G "PIN_4_OFF" 7 74 "#asm   bcf PIC_PORTB,4 #endasm"
D G "PIN_5_ON" 7 75 "#asm   bsf PIC_PORTB,5 #endasm"
D G "PIN_5_OFF" 7 76 "#asm   bcf PIC_PORTB,5 #endasm"
D G "PIN_6_ON" 7 77 "#asm   bsf PIC_PORTB,6 #endasm"
D G "PIN_6_OFF" 7 78 "#asm   bcf PIC_PORTB,6 #endasm"
D G "PIN_7_ON" 7 79 "#asm   bsf PIC_PORTB,7 #endasm"
D G "PIN_7_OFF" 7 80 "#asm   bcf PIC_PORTB,7 #endasm"
V L "Minizekunden" 7 84 "int16" "ZEKUNDEN ZZZZEKUNDEN"
F G "DelayMs" 7 85 "int8(int16 Minizekunden)"
C L "DelayUs" 7 1 1 "FUNCTION"
V L "muesekunden" 7 98 "int8"
F G "DelayUs" 7 99 "int8(int8 muesekunden)"
C L "DelayUsLong" 7 1 1 "FUNCTION"
V L "muesekunden" 7 120 "int16"
F G "DelayUsLong" 7 121 "int8(int16 muesekunden)"
V L "address" 7 141 "int8"
V L "data" 7 141 "int8"
F G "WriteIntEeprom" 7 142 "int8(int8 address,int8 data)"
C L "WriteIntEeprom" 7 1 1 "FUNCTION"
C L "WriteIntEeprom" 7 1 1 "FUNCTION"
C L "WriteIntEeprom" 7 1 1 "FUNCTION"
C L "WriteIntEeprom" 7 1 1 "FUNCTION"
C L "WriteIntEeprom" 7 1 1 "FUNCTION"
C L "WriteIntEeprom" 7 1 1 "FUNCTION"
C L "WriteIntEeprom" 7 1 1 "FUNCTION"
C L "WriteIntEeprom" 7 1 1 "FUNCTION"
C L "WriteIntEeprom" 7 1 1 "FUNCTION"
C L "WriteIntEeprom" 7 1 1 "FUNCTION"
C L "WriteIntEeprom" 7 1 1 "FUNCTION"
V L "address" 7 161 "int8"
F G "ReadIntEeprom" 7 162 "int8(int8 address,int8 data)"
C L "ReadIntEeprom" 7 1 1 "FUNCTION"
C L "ReadIntEeprom" 7 1 1 "FUNCTION"
C L "ReadIntEeprom" 7 1 1 "FUNCTION"
C L "ReadIntEeprom" 7 1 1 "FUNCTION"
C L "ReadIntEeprom" 7 1 1 "FUNCTION"
C L "ADCEnable" 7 173 1 "*"
F G "ADCEnable" 7 176 "int8(int8 address,int8 data)" "* Checks whether the given channel is already set for"
C L "ADCEnable" 7 178 1 "*"
C L "ADCEnable" 7 178 1 "*"
C L "ADCEnable" 7 178 1 "*"
V L "channel" 7 184 "int8"
F G "ADCIsChSet" 7 184 "int8(int8 channel)" "* Sets a given channel for A/D conversion"
C L "ADCIsChSet" 7 186 1 "*"
V L "channel" 7 190 "int8"
F G "ADCSetCh" 7 190 "int8(int8 channel)" "* Sets the sampling speed for A/D conversion"
C L "ADCSetCh" 7 192 1 "*"
C L "ADCSetCh" 7 192 1 "*"
C L "ADCSetCh" 7 192 1 "*"
V L "speed" 7 199 "int8"
F G "ADCSetClock" 7 199 "int8(int8 speed)" "* Reads a sampled value from the A/D converter. Only one byte."
C L "ADCSetClock" 7 201 1 "*"
F G "ADCRead8" 7 205 "int8()" "* Reads a sampled value from the A/D converter. Full 10bit of the ADC"
C L "ADCRead8" 7 207 1 "*"
F G "ADCRead10" 7 211 "int16()" "* Initialises the A/D converter"
C L "ADCRead10" 7 216 1 "*"
F G "ADCInit" 7 220 "int8()" "* Disables the A/D converter"
F G "ADCDisable" 7 225 "int8()"
F G "ADCDisable" 7 229 "int8()"
C L "ADCDisable" 7 216 1 "FUNCTION"
F G "ADCInit" 7 234 "int8()"
C L "ADCInit" 7 216 1 "FUNCTION"
C L "ADCInit" 7 216 1 "FUNCTION"
C L "ADCInit" 7 216 1 "FUNCTION"
V L "conf" 7 240 "analog_config"
F G "ADCConfig" 7 241 "int8(analog_config conf)"
F G "ADCEnable" 7 272 "int8()"
C L "ADCEnable" 7 216 1 "FUNCTION"
V L "channel" 7 277 "int8"
F G "ADCIsChSet" 7 278 "int8(int8 channel)"
V L "actual" 7 279 "int8"
V L "channel" 7 286 "int8"
F G "ADCSetCh" 7 287 "int8(int8 channel)"
C L "ADCSetCh" 7 216 1 "FUNCTION"
V L "speed" 7 296 "int8"
F G "ADCSetClock" 7 297 "int8(int8 speed)"
C L "ADCSetClock" 7 216 1 "FUNCTION"
F G "ADCRead8" 7 303 "int8(int8 speed)"
V L "value" 7 304 "int8"
C L "ADCRead8" 7 216 1 "FUNCTION"
C L "ADCRead8" 7 216 1 "FUNCTION"
C L "ADCRead8" 7 216 1 "FUNCTION"
F G "ADCRead10" 7 315 "int16()"
V L "value" 7 316 "int16"
V L "temp" 7 317 "int8"
C L "ADCRead10" 7 216 1 "FUNCTION"
C L "ADCRead10" 7 216 1 "FUNCTION"
C L "ADCRead10" 7 216 1 "FUNCTION"
F G "ADCInProgress" 7 333 "int8()"
V L "wait_time" 7 345 "int16"
F G "Uart1WaitForRx" 7 345 "int8(int16 wait_time)"
F G "Uart1Enable" 7 346 "int8()"
F G "Uart1Disable" 7 347 "int8()"
V L "speed" 7 348 "int8"
V L "sync_mode" 7 348 "int8"
V L "bits" 7 348 "int8"
F G "Uart1Init" 7 348 "int8(int8 speed,int8 sync_mode,int8 bits)"
F G "Uart1CheckError" 7 349 "int8()"
F G "Uart1FlushReceive" 7 350 "int8()"
F G "Uart1WaitForTxEnd" 7 351 "int8()"
F G "Uart1DataIsThere" 7 352 "int8()"
V L "data" 7 353 "int8"
F G "Uart1SendByte" 7 353 "int8(int8 data)"
F G "Uart1GetByte" 7 354 "int8()" "void RPCSerialSendByte(int data)"
V L "data" 7 359 "int8"
F G "Uart1SendByte" 7 360 "int8(int8 data)"
C L "Uart1SendByte" 7 216 1 "FUNCTION"
F G "Uart1GetByte" 7 366 "int8(int8 data)"
C L "Uart1DataIsThere" 7 216 1 "FUNCTION"
F G "Uart1DataIsThere" 7 373 "int8(int8 data)"
F G "Uart1TxBusy" 7 378 "int8(int8 data)"
C L "Uart1WaitForTxEnd" 7 216 1 "FUNCTION"
F G "Uart1WaitForTxEnd" 7 384 "int8()"
C L "Uart1FlushReceive" 7 216 2 "FUNCTION"
F G "Uart1FlushReceive" 7 393 "int8()"
V L "nirvana" 7 394 "int8"
C L "Uart1CheckError" 7 216 1 "FUNCTION"
F G "Uart1CheckError" 7 404 "int8()"
V L "error" 7 405 "int8"
V L "buff" 7 406 "int8"
C L "Uart1CheckError" 7 216 1 "FUNCTION"
C L "Uart1CheckError" 7 216 1 "FUNCTION"
C L "Uart1Init" 7 216 2 "FUNCTION"
V L "speed" 7 430 "int8"
V L "sync_mode" 7 430 "int8"
V L "bits" 7 430 "int8"
F G "Uart1Init" 7 431 "int8(int8 speed,int8 sync_mode,int8 bits)"
C L "Uart1Init" 7 216 1 "FUNCTION"
C L "Uart1Init" 7 216 1 "FUNCTION"
C L "Uart1Init" 7 216 1 "FUNCTION"
C L "Uart1Init" 7 216 1 "FUNCTION"
C L "Uart1Init" 7 216 1 "FUNCTION"
C L "Uart1Init" 7 216 1 "FUNCTION"
C L "Uart1Init" 7 216 1 "FUNCTION"
C L "Uart1Init" 7 216 1 "FUNCTION"
C L "Uart1Init" 7 216 1 "FUNCTION"
C L "Uart1Init" 7 216 1 "FUNCTION"
C L "Uart1Init" 7 216 1 "FUNCTION"
C L "Uart1Init" 7 216 1 "FUNCTION"
C L "Uart1Init" 7 216 1 "FUNCTION"
C L "Uart1Disable" 7 216 1 "FUNCTION"
F G "Uart1Disable" 7 479 "int8(int8 speed,int8 sync_mode,int8 bits)"
C L "Uart1Disable" 7 216 1 "FUNCTION"
C L "Uart1Disable" 7 216 1 "FUNCTION"
C L "Uart1Disable" 7 216 1 "FUNCTION"
C L "Uart1Disable" 7 216 1 "FUNCTION"
C L "Uart1Disable" 7 216 1 "FUNCTION"
C L "Uart1Enable" 7 216 1 "FUNCTION"
F G "Uart1Enable" 7 491 "int8(int8 speed,int8 sync_mode,int8 bits)"
C L "Uart1Enable" 7 216 1 "FUNCTION"
C L "Uart1Enable" 7 216 1 "FUNCTION"
C L "Uart1Enable" 7 216 1 "FUNCTION"
C L "Uart1WaitForRx" 7 216 2 "FUNCTION"
V L "wait_time" 7 504 "int16"
F G "Uart1WaitForRx" 7 505 "int8(int16 wait_time,int8 sync_mode,int8 bits)"
C L "Uart1WaitForRx" 7 216 1 "FUNCTION"
C L "Timer3Init" 7 216 1 "FUNCTION"
V L "conf" 7 518 "timer_config"
F G "Timer3Init" 7 519 "int8(timer_config conf,int8 sync_mode,int8 bits)"
C L "Timer3Init" 7 216 1 "FUNCTION"
C L "Timer3Init" 7 216 2 "FUNCTION"
F G "Timer3GetHi" 7 531 "int8(int8 bits)"
F G "Timer3GetLo" 7 535 "int8()"
V L "val" 7 538 "int8"
F G "Timer3SetHi" 7 539 "int8(int8 val)"
V L "val" 7 542 "int8"
F G "Timer3SetLo" 7 543 "int8(int8 val)"
V L "mode" 7 559 "int8"
F G "SPISetMode" 7 560 "int8(int8 mode)" "first set the pins correctly"
C L "SPISetMode" 7 216 1 "FUNCTION"
C L "SPISetMode" 7 216 1 "FUNCTION"
C L "SPISetMode" 7 216 1 "FUNCTION"
C L "SPISetMode" 7 216 1 "FUNCTION"
V L "mode" 7 582 "int8"
F G "SPIInit" 7 583 "int8(int8 mode)" "first set the pins correctly"
C L "SPIInit" 7 216 1 "FUNCTION"
C L "SPIInit" 7 216 1 "FUNCTION"
C L "SPIInit" 7 216 1 "FUNCTION"
C L "SPIShift" 7 216 1 "FUNCTION"
V L "out" 7 599 "int8"
F G "SPIShift" 7 600 "int8(int8 out)"
V L "in" 7 601 "int8"
V L "dummy" 7 601 "int8"
C L "SPIShift" 7 216 1 "FUNCTION"
D G "ntohl" 7 621 "(x)  	((uint32_t)((((uint32_t)(x) & 0x000000ffU) << 24) |  		   (((uint32_t)(x) & 0x0000ff00U) <<  8) |  		   (((uint32_t)(x) & 0x00ff0000U) >>  8) |  		   (((uint32_t)(x) & 0xff000000U) >> 24)))"
D G "ntohs" 7 627 "(x)  	((uint16_t)((((uint16_t)(x) & 0x00ff) << 8) |  		   (((uint16_t)(x) & 0xff00) >> 8)))"
D G "htons" 7 633 "(x) ntohs(x)"
D G "htonl" 7 634 "(x) ntohl(x)"
C G "" 8 1 1 "*"
C G "" 8 1 1 "*"
C G "" 8 1 1 "*"
C G "" 8 1 1 "*"
C G "" 8 1 1 "*"
C G "" 8 1 1 "*"
C G "" 8 1 1 "*"
C G "" 8 1 1 "*"
C G "" 8 1 1 "*"
C G "" 8 1 1 "*"
C G "" 8 1 1 "*"
C G "" 8 1 1 "*"
C G "" 8 1 1 "*"
C G "" 8 1 1 "*"
C G "" 8 1 1 "*"
C G "" 8 1 1 "*"
C G "" 8 1 1 "*"
C G "" 8 1 1 "*"
C G "" 8 1 1 "*"
C G "" 8 1 1 "*"
C G "" 8 1 1 "*"
C G "" 8 1 1 "*"
C G "" 8 1 1 "*"
C G "" 8 1 1 "*"
C G "" 8 1 1 "*"
C G "" 8 1 1 "*"
C G "" 8 1 2 "*"
C G "" 8 35 1 "*"
C G "" 8 35 1 "*"
C G "" 8 35 1 "*"
C G "" 8 35 1 "*"
C G "" 8 35 1 "*"
C G "" 8 35 1 "*"
C G "" 8 35 1 "*"
C G "" 8 35 1 "*"
C G "" 8 35 1 "*"
C G "" 8 35 1 "*"
C G "" 8 35 1 "*"
C G "" 8 35 1 "*"
C G "" 8 35 1 "*"
C G "" 8 35 1 "*"
C G "" 8 35 1 "*"
C G "" 8 35 1 "*"
C G "" 8 35 1 "*"
C G "" 8 35 1 "*"
C G "" 8 35 1 "*"
C G "" 8 35 1 "*"
C G "" 8 35 1 "*"
D G "__WDT18FXX20_C__" 8 67 "003"
D G "VALID_PROCESSOR" 8 72 "1"
D G "WDT_DEFAULT" 8 77 "0	" "for values > 7. values see below."
V L "timeout" 8 82 "int8"
F G "WDTConfig" 8 82 "int8(int8 timeout)" "same code for 18f6620 and 18f6720"
V L "wdtrate" 8 85 "int8"
V L "global_interrupt_flag" 8 86 "int8"
C L "WDTConfig" 8 35 1 "FUNCTION"
C L "WDTConfig" 8 35 1 "FUNCTION"
C L "WDTConfig" 8 35 1 "FUNCTION"
C L "WDTConfig" 8 35 1 "FUNCTION"
C L "WDTConfig" 8 35 1 "FUNCTION"
C L "WDTConfig" 8 35 3 "FUNCTION"
C L "WDTConfig" 8 35 1 "FUNCTION"
C L "WDTConfig" 8 35 1 "FUNCTION"
C L "WDTConfig" 8 35 1 "FUNCTION"
C L "WDTConfig" 8 35 1 "FUNCTION"
C L "WDTConfig" 8 35 1 "FUNCTION"
C L "WDTConfig" 8 35 1 "FUNCTION"
C L "WDTConfig" 8 35 1 "FUNCTION"
C L "WDTConfig" 8 35 1 "FUNCTION"
C L "WDTConfig" 8 35 1 "FUNCTION"
C L "WDTConfig" 8 35 1 "FUNCTION"
F G "WDTEnable" 8 139 "int8()"
F G "WDTDisable" 8 143 "int8()"
F G "WDTTest" 8 147 "int8()"
V L "test" 8 148 "int8"
F G "WDTReadValue" 8 154 "int8()"
V L "value" 8 155 "int8"
C L "WDTReadValue" 8 35 1 "FUNCTION"
C L "WDTReadValue" 8 35 1 "FUNCTION"
C G "" 9 1 1 "*"
C G "" 9 1 1 "*"
C G "" 9 1 1 "*"
C G "" 9 1 1 "*"
D G "__BALLSWITCH_C__" 9 12 "002"
C L "BallswitchInit" 9 1 1 "FUNCTION"
F G "BallswitchInit" 9 20 "int8()" "outer on input, inner all high"
C L "BallswitchDisable" 9 1 1 "FUNCTION"
F G "BallswitchDisable" 9 33 "int8()"
C L "BallswitchGet" 9 1 1 "FUNCTION"
F G "BallswitchGet" 9 44 "int8()"
C G "" 10 1 1 "*"
C G "" 10 1 1 "*"
C G "" 10 1 1 "*"
C G "" 10 1 1 "*"
C G "" 10 1 1 "*"
C G "" 10 1 1 "*"
C G "" 10 1 1 "*"
C G "" 10 1 1 "*"
C G "" 10 1 1 "*"
C G "" 10 1 1 "*"
C G "" 10 1 1 "*"
C G "" 10 1 1 "*"
C G "" 10 1 1 "*"
C G "" 10 1 1 "*"
C G "" 10 1 1 "*"
C G "" 10 1 2 "*"
D G "__DS2431_C__" 10 28 "008"
D G "ID_CHIP_COMM_READ_ROM" 10 32 "0x33"
D G "ID_CHIP_COMM_SKIP_ROM" 10 33 "0xCC"
D G "ID_CHIP_COMM_READ_MEMORY" 10 34 "0xF0"
D G "ID_CHIP_COMM_WRITE_SCRATCHPAD" 10 35 "0x0F"
D G "ID_CHIP_COMM_COPY_SCRATCHPAD" 10 36 "0x55"
D G "ID_CHIP_ADDRESS_HI" 10 38 "0x00"
D G "ID_CHIP_ES_BYTE" 10 39 "0x07"
D G "ID_CHIP_PRODUCTION_ID_ADDRESS" 10 41 "0"
C L "IDChipInit" 10 1 1 "FUNCTION"
F G "IDChipInit" 10 45 "int8()"
F G "IDChipOn" 10 46 "int8()"
F G "IDChipOff" 10 47 "int8()"
V L "data" 10 50 "*int8"
F G "IDChipGetId" 10 50 "int8(*int8 data)"
V L "data" 10 51 "*int8"
F G "IDChipCheckCRCID" 10 51 "int8(*int8 data)"
V L "address" 10 52 "int8"
V L "number_bytes" 10 52 "int8"
V L "buff" 10 52 "*int8"
F G "IDChipReadEeprom" 10 52 "int8(int8 address,int8 number_bytes,*int8 buff)"
V L "address" 10 53 "int8"
V L "buff" 10 53 "*int8"
F G "IDChipWriteEeprom" 10 53 "int8(int8 address,*int8 buff)"
V L "crc" 10 54 "*int8"
V L "address" 10 54 "int8"
V L "buff" 10 54 "*int8"
F G "IDChipCheckCRCScratchpad" 10 54 "int8(*int8 crc,int8 address,*int8 buff)"
V L "production_id_hi" 10 55 "int8"
V L "production_id_lo" 10 55 "int8"
F G "IDChipWriteProductionID" 10 55 "int8(int8 production_id_hi,int8 production_id_lo)"
F G "OneWireHigh" 10 58 "int8()"
F G "OneWireLow" 10 60 "int8()"
F G "OneWireInit" 10 61 "int8()"
F G "OneWireRead" 10 64 "int8()"
F G "OneWirePresencePulse" 10 65 "int8()"
V L "data" 10 66 "int8"
F G "OneWireWriteByte" 10 66 "int8(int8 data)"
F G "OneWireReadByte" 10 67 "int8()" "tables"
V G "CRC8_TABLE" 10 71 "int8[256]"
V G "CRC16_TABLE_LO" 10 91 "int8[256]"
V G "CRC16_TABLE_HI" 10 127 "int8[256]"
F G "IDChipInit" 10 165 "int8()"
F G "IDChipOn" 10 173 "int8()"
F G "IDChipOff" 10 179 "int8()"
C L "IDChipGetId" 10 1 2 "FUNCTION"
V L "buff" 10 187 "*int8"
F G "IDChipGetId" 10 188 "int8(*int8 buff)"
V L "res" 10 189 "int8"
V L "i" 10 190 "int8"
V L "data_reserved" 10 191 "int8[8]"
V L "data" 10 192 "*int8"
V L "data" 10 252 "*int8"
F G "IDChipCheckCRCID" 10 253 "int8(*int8 data)"
V L "crc" 10 254 "int8"
V L "i" 10 255 "int8"
C L "IDChipReadEeprom" 10 1 2 "FUNCTION"
V L "address" 10 270 "int8"
V L "number_bytes" 10 270 "int8"
V L "buff" 10 270 "*int8"
F G "IDChipReadEeprom" 10 271 "int8(int8 address,int8 number_bytes,*int8 buff)"
V L "res" 10 272 "int8"
V L "i" 10 273 "int8"
C L "IDChipWriteEeprom" 10 1 3 "FUNCTION"
V L "address" 10 300 "int8"
V L "buff" 10 300 "*int8"
F G "IDChipWriteEeprom" 10 301 "int8(int8 address,*int8 buff)"
V L "res" 10 302 "int8"
V L "crc" 10 303 "int8[2]"
V L "dummy" 10 304 "int8"
C L "IDChipWriteEeprom" 10 1 2 "FUNCTION"
C L "IDChipWriteEeprom" 10 1 1 "FUNCTION"
C L "IDChipCheckCRCScratchpad" 10 1 1 "FUNCTION"
V L "crc" 10 360 "*int8"
V L "address" 10 360 "int8"
V L "buff" 10 360 "*int8"
F G "IDChipCheckCRCScratchpad" 10 361 "int8(*int8 crc,int8 address,*int8 buff)"
V L "crc_hi" 10 362 "int8"
V L "crc_lo" 10 363 "int8"
V L "dummy" 10 364 "int8"
V L "i" 10 365 "int8"
C L "IDChipCheckCRCScratchpad" 10 1 2 "FUNCTION"
C L "IDChipCheckCRCScratchpad" 10 1 2 "FUNCTION"
C L "IDChipCheckCRCScratchpad" 10 1 2 "FUNCTION"
C L "IDChipCheckCRCScratchpad" 10 1 2 "FUNCTION"
C L "IDChipWriteProductionID" 10 1 1 "FUNCTION"
V L "production_id_hi" 10 405 "int8"
V L "production_id_lo" 10 405 "int8"
F G "IDChipWriteProductionID" 10 406 "int8(int8 production_id_hi,int8 production_id_lo)"
V L "buff" 10 407 "int8[8]"
V L "buff_p" 10 408 "*int8"
V L "i" 10 409 "int8"
D G "PIN_ONE_WIRE" 10 423 "PIN_ID_CHIP_DATA"
D G "TRIS_ONE_WIRE" 10 424 "TRIS_ID_CHIP_DATA"
F G "OneWireHigh" 10 429 "int8()"
F G "OneWireLow" 10 436 "int8()"
C L "OneWireLow" 10 1 1 "FUNCTION"
C L "OneWireLow" 10 1 1 "FUNCTION"
F G "OneWireRead" 10 444 "int8()"
C L "OneWirePresencePulse" 10 1 1 "FUNCTION"
F G "OneWirePresencePulse" 10 452 "int8()"
V L "buff" 10 453 "int8"
C L "OneWirePresencePulse" 10 1 1 "FUNCTION"
C L "OneWireWriteByte" 10 1 1 "FUNCTION"
V L "data" 10 470 "int8"
F G "OneWireWriteByte" 10 471 "int8(int8 data)"
V L "i" 10 472 "int8"
C L "OneWireReadByte" 10 1 1 "FUNCTION"
F G "OneWireReadByte" 10 494 "int8()"
V L "i" 10 495 "int8"
V L "result" 10 495 "int8"
C L "OneWireReadByte" 10 1 1 "FUNCTION"
C G "" 11 1 1 "*"
C G "" 11 1 1 "*"
D G "__FLASH_C__" 11 15 "001"
D G "FLASH_DONT_CARE" 11 29 "0x00"
D G "FLASH_BUFFER_1_WRITE" 11 32 "0x84"
D G "FLASH_BUFFER_2_WRITE" 11 33 "0x87"
D G "FLASH_BUFFER_1_READ" 11 34 "0x54"
D G "FLASH_BUFFER_2_READ" 11 35 "0x56"
D G "FLASH_STATUS_READ" 11 37 "0x57"
D G "FLASH_FLASH_CONTINUOUS_READ" 11 38 "0x68"
D G "FLASH_PAGE_READ" 11 39 "0x52		" "doesn't stop automatically, starts again from beginning of page..."
D G "FLASH_BUFFER_1_TO_PAGE_ERASE_PROGRAM" 11 40 "0x83"
D G "FLASH_BUFFER_2_TO_PAGE_ERASE_PROGRAM" 11 42 "0x86"
D G "FLASH_BUFFER_1_TO_PAGE_PROGRAM" 11 43 "0x88		" "has to be erased before."
D G "FLASH_BUFFER_2_TO_PAGE_PROGRAM" 11 44 "0x89		" "has to be erased before."
D G "FLASH_PAGE_ERASE" 11 45 "0x81"
D G "FLASH_BLOCK_ERASE" 11 46 "0x50		" "erases 8 pages, addresses from 0 to 255."
D G "FLASH_PAGE_PROGRAM_THRU_BUFFER_1" 11 48 "0x82"
D G "FLASH_PAGE_PROGRAM_THRU_BUFFER_2" 11 49 "0x85"
D G "FLASH_PAGE_TO_BUFFER_1_TRANSFER" 11 51 "0x53"
D G "FLASH_PAGE_TO_BUFFER_2_TRANSFER" 11 52 "0x55"
D G "FLASH_PAGE_TO_BUFFER_1_COMPARE" 11 53 "0x53"
D G "FLASH_PAGE_TO_BUFFER_2_COMPARE" 11 54 "0x55" "??? opcode"
D G "FLASH_PAGE_REWRITE_THRU_BUFFER_1" 11 55 "0x58"
D G "FLASH_PAGE_REWRITE_THRU_BUFFER_2" 11 56 "0x59"
D G "FLASH_ID_ADDRESS" 11 61 "540408		" "start address for ID in external flash: last page, first byte"
V G "flash_old_write_address" 11 68 "int32"
V G "flash_write_done" 11 69 "int1"
V G "flash_active_write_buffer" 11 70 "int8"
F G "FlashEnable" 11 76 "int8()"
F G "FlashDisable" 11 83 "int8()"
F G "FlashOff" 11 89 "int8()"
C L "FlashOff" 11 8 1 "FUNCTION"
F G "FlashOn" 11 94 "int8()"
C L "FlashOn" 11 8 1 "FUNCTION"
F G "FlashInit" 11 101 "int8()" "set the states correctly"
C L "FlashInit" 11 8 1 "FUNCTION"
C L "FlashInit" 11 8 1 "FUNCTION"
C L "FlashInit" 11 8 1 "FUNCTION"
V L "pos" 11 121 "int16"
V L "data" 11 121 "*int8"
V L "len" 11 121 "int16"
F G "FlashReadSequenceFromBuffer1" 11 122 "int8(int16 pos,*int8 data,int16 len)"
V L "buff" 11 123 "int8"
V L "i" 11 124 "int16"
C L "FlashReadSequenceFromBuffer1" 11 8 1 "FUNCTION"
V L "pos" 11 145 "int16"
V L "data" 11 145 "*int8"
V L "len" 11 145 "int16"
F G "FlashReadSequenceFromBuffer2" 11 146 "int8(int16 pos,*int8 data,int16 len)"
V L "buff" 11 147 "int8"
V L "i" 11 148 "int16"
C L "FlashReadSequenceFromBuffer2" 11 8 1 "FUNCTION"
V L "pos" 11 168 "int16"
F G "FlashReadFromBuffer1" 11 169 "int8(int16 pos)"
V L "buff" 11 170 "int8"
C L "FlashReadFromBuffer1" 11 8 1 "FUNCTION"
C L "FlashWriteToBuffer1" 11 8 1 "FUNCTION"
V L "addr" 11 188 "int16"
V L "b" 11 188 "int8"
F G "FlashWriteToBuffer1" 11 189 "int8(int16 addr,int8 b)"
V L "buff" 11 190 "int8"
C L "FlashWriteToBuffer2" 11 8 1 "FUNCTION"
V L "addr" 11 206 "int16"
V L "b" 11 206 "int8"
F G "FlashWriteToBuffer2" 11 207 "int8(int16 addr,int8 b)"
V L "buff" 11 208 "int8"
F G "FlashReady" 11 228 "int8()"
V L "status" 11 229 "int8"
F G "FlashWaitForReady" 11 240 "int8()"
C L "FlashWaitForReady" 11 8 1 "FUNCTION"
C L "FlashInSamePageOld" 11 8 1 "FUNCTION"
V L "addr1" 11 245 "int32"
V L "addr2" 11 245 "int32"
F G "FlashInSamePageOld" 11 246 "int8(int32 addr1,int32 addr2)"
V L "addr1" 11 261 "int32"
V L "addr2" 11 261 "int32"
F G "FlashInSamePage" 11 262 "int8(int32 addr1,int32 addr2)"
V L "flash_address" 11 275 "int32"
F G "FlashSendAddress" 11 276 "int8(int32 flash_address)"
V L "pagenr" 11 277 "int16"
V L "bytenr" 11 278 "int16"
C L "FlashSendAddress" 11 8 4 "FUNCTION"
C L "FlashSendAddress" 11 8 3 "FUNCTION"
V L "flash_addr" 11 305 "int32"
F G "FlashGetBytePos_old" 11 306 "int16(int32 flash_addr)"
V L "pagenr" 11 307 "int16"
V L "bytenr" 11 308 "int16"
V L "flash_addr" 11 315 "int32"
F G "FlashGetBytePos" 11 316 "int16(int32 flash_addr)"
C L "FlashSetReadPointer" 11 8 2 "FUNCTION"
V L "flash_start_address" 11 323 "int32"
F G "FlashSetReadPointer" 11 324 "int8(int32 flash_start_address)"
C L "FlashStoreBuffer1" 11 8 1 "FUNCTION"
V L "flash_address" 11 338 "int32"
F G "FlashStoreBuffer1" 11 339 "int8(int32 flash_address)"
C L "FlashStoreBuffer1" 11 8 1 "FUNCTION"
C L "FlashStoreBuffer2" 11 8 1 "FUNCTION"
V L "flash_address" 11 349 "int32"
F G "FlashStoreBuffer2" 11 350 "int8(int32 flash_address)"
C L "FlashStoreBuffer2" 11 8 1 "FUNCTION"
C L "FlashLoadToBuffer1" 11 8 1 "FUNCTION"
V L "flash_address" 11 359 "int32"
F G "FlashLoadToBuffer1" 11 360 "int8(int32 flash_address)"
C L "FlashLoadToBuffer1" 11 8 1 "FUNCTION"
C L "FlashLoadToBuffer2" 11 8 1 "FUNCTION"
V L "flash_address" 11 369 "int32"
F G "FlashLoadToBuffer2" 11 370 "int8(int32 flash_address)"
C L "FlashLoadToBuffer2" 11 8 1 "FUNCTION"
C L "FlashFlush" 11 8 1 "FUNCTION"
F G "FlashFlush" 11 381 "int8()"
V L "old_addr" 11 407 "int32"
V L "new_addr" 11 407 "int32"
F G "FlashChangeWritePage" 11 408 "int8(int32 old_addr,int32 new_addr)" "the active page has changed and the content of RAM has not yet been saved"
C L "FlashChangeWritePage" 11 8 1 "FUNCTION"
C L "FlashChangeWritePage" 11 8 1 "FUNCTION"
C L "FlashChangeWritePage" 11 8 1 "FUNCTION"
C L "FlashWriteSequence" 11 8 3 "FUNCTION"
V L "flash_start_address" 11 446 "int32"
V L "data" 11 446 "*int8"
V L "count" 11 446 "int16"
F G "FlashWriteSequence" 11 447 "int8(int32 flash_start_address,*int8 data,int16 count)"
V L "i" 11 448 "int16"
V L "buffer_pos" 11 448 "int16"
V L "write_address" 11 449 "int32"
C L "FlashWriteSequence" 11 8 1 "FUNCTION"
C L "FlashWriteSequence" 11 8 1 "FUNCTION"
C L "FlashWriteSequence" 11 8 1 "FUNCTION"
C L "FlashWriteSequence" 11 8 1 "FUNCTION"
V L "flash_start_address" 11 508 "int32"
V L "data" 11 508 "*int8"
V L "count" 11 508 "int16"
F G "FlashReadContinuous" 11 509 "int8(int32 flash_start_address,*int8 data,int16 count)"
V L "pos" 11 511 "int16"
V L "flash_start_address" 11 532 "int32"
V L "data" 11 532 "*int8"
V L "count" 11 532 "int16"
F G "FlashReadSequence" 11 533 "int8(int32 flash_start_address,*int8 data,int16 count)"
V L "pos" 11 534 "int16"
V L "saveCount" 11 534 "int16"
V L "flashReadBeforeRAMCount" 11 534 "int16" "A write before a read may create a true dependency and therefore result"
C L "FlashReadSequence" 11 8 10 "FUNCTION"
C L "FlashReadSequence" 11 8 2 "FUNCTION"
C L "FlashReadSequence" 11 8 1 "FUNCTION"
C L "FlashReadSequence" 11 8 1 "FUNCTION"
C L "FlashReadSequence" 11 8 1 "FUNCTION"
C L "FlashReadSequence" 11 8 1 "FUNCTION"
C L "FlashReadSequence" 11 8 1 "FUNCTION"
C L "FlashReadSequence" 11 8 1 "FUNCTION"
C L "FlashReadSequence" 11 8 1 "FUNCTION"
C L "FlashReadSequence" 11 8 3 "FUNCTION"
C L "FlashReadSequence" 11 8 2 "FUNCTION"
C L "FlashReadSequence" 11 8 1 "FUNCTION"
C L "FlashReadSequence" 11 8 1 "FUNCTION"
C L "FlashReadSequence" 11 8 1 "FUNCTION"
C L "FlashReadSequence" 11 8 1 "FUNCTION"
C L "FlashReadSequence" 11 8 1 "FUNCTION"
C L "FlashReadSequence" 11 8 1 "FUNCTION"
C L "FlashReadSequence" 11 8 1 "FUNCTION"
C L "FlashReadSequence" 11 8 1 "FUNCTION"
C G "" 12 1 1 "*"
C G "" 12 1 1 "*"
C G "" 12 1 1 "*"
C G "" 12 1 1 "*"
C G "" 12 1 1 "*"
D G "TONE_C3" 12 18 "130"
D G "TONE_D3" 12 19 "146"
D G "TONE_E3" 12 20 "164"
D G "TONE_F3" 12 21 "174"
D G "TONE_G3" 12 22 "196"
D G "TONE_A3" 12 23 "220"
D G "TONE_H3" 12 24 "246"
D G "TONE_C4" 12 26 "261"
D G "TONE_D4" 12 27 "293"
D G "TONE_E4" 12 28 "329"
D G "TONE_F4" 12 29 "349"
D G "TONE_G4" 12 30 "392"
D G "TONE_A4" 12 31 "440"
D G "TONE_H4" 12 32 "493"
D G "TONE_C5" 12 34 "523"
D G "TONE_D5" 12 35 "587"
D G "TONE_E5" 12 36 "659"
D G "TONE_F5" 12 37 "698"
D G "TONE_G5" 12 38 "783"
D G "TONE_A5" 12 39 "880"
D G "TONE_H5" 12 40 "987"
D G "TONE_C6" 12 42 "1046"
D G "TONE_D6" 12 43 "1174"
D G "TONE_E6" 12 44 "1318"
D G "TONE_F6" 12 45 "1396"
D G "TONE_G6" 12 46 "1567"
D G "TONE_A6" 12 47 "1760"
D G "TONE_H6" 12 48 "1975"
D G "TONE_C7" 12 50 "2093"
D G "TONE_D7" 12 51 "2349"
D G "TONE_E7" 12 52 "2637"
D G "TONE_F7" 12 53 "2793"
D G "TONE_G7" 12 54 "3135"
D G "TONE_A7" 12 55 "3520"
D G "TONE_H7" 12 56 "3951"
D G "TONE_C8" 12 58 "4186"
D G "TONE_D8" 12 59 "4700"
D G "TONE_E8" 12 60 "5280"
D G "TONE_F8" 12 61 "5586"
D G "TONE_G8" 12 62 "6270"
D G "TONE_A8" 12 63 "7040"
D G "TONE_H8" 12 64 "7900"
D G "TONE_C9" 12 66 "8370"
C G "" 12 68 1 "*"
V G "sound_volume" 12 75 "int8"
F G "BuzzerOff" 12 78 "int8()"
V L "vol" 12 83 "int8"
F G "BuzzerSetVolume" 12 84 "int8(int8 vol)"
F G "BuzzerGetVolume" 12 90 "int8()"
C L "BuzzerInit" 12 95 1 "*"
F G "BuzzerInit" 12 99 "int8()"
C L "BuzzerInit" 12 95 1 "FUNCTION"
C L "BuzzerInit" 12 95 1 "FUNCTION"
C L "BuzzerInit" 12 95 1 "FUNCTION"
C L "BuzzerTone" 12 95 1 "FUNCTION"
V L "frequency" 12 108 "int16"
V L "duration" 12 108 "int16"
F G "BuzzerTone" 12 109 "int8(int16 frequency,int16 duration)"
V L "i" 12 110 "int16"
V L "T" 12 110 "int16"
V L "cycles" 12 110 "int16"
V L "f" 12 111 "float"
V L "d" 12 111 "float"
V L "tt" 12 111 "float"
C L "BuzzerTone" 12 95 1 "FUNCTION"
F G "BuzzerSweepUp" 12 133 "int8()"
V L "T" 12 134 "int16"
F G "BuzzerSweepDown" 12 147 "int8()"
V L "T" 12 148 "int16"
V L "song" 12 160 "int8"
F G "BuzzerPlayASong" 12 161 "int8(int8 song)"
C L "BuzzerPlayASong" 12 95 1 "FUNCTION"
C L "BuzzerPlayASong" 12 95 1 "FUNCTION"
C L "BuzzerPlayASong" 12 95 1 "FUNCTION"
C L "BuzzerPlayASong" 12 95 1 "FUNCTION"
C L "BuzzerPlayASong" 12 95 1 "FUNCTION"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
D G "__PC232_C__" 13 11 "000"
F G "RFSetModeSleep" 13 15 "int8()"
F G "RFPowerModuleOn" 13 17 "int8()"
C L "RFPowerModuleOn" 13 26 2 "*"
V G "selftest_active" 13 31 "int1"
F G "PCInit" 13 35 "int8()"
V L "p_id" 13 36 "*int8"
F G "PCGetID" 13 36 "int8(*int8 p_id)"
V L "choice" 13 37 "port_settings"
F G "PCSetDigitalPorts" 13 37 "int8(port_settings choice)"
F G "PCSelfTestBoardIsThere" 13 38 "int8()"
V L "result" 13 39 "*int8"
F G "PCSelfTest" 13 39 "int8(*int8 result)"
F G "PCLedRedOn" 13 45 "int8()"
F G "PCLedBlueOn" 13 50 "int8()"
F G "PCLedRedOff" 13 55 "int8()"
F G "PCLedBlueOff" 13 60 "int8()"
C L "PCInit" 13 66 1 "*"
C L "PCInit" 13 66 1 "*"
C L "PCInit" 13 66 1 "*"
F G "PCInit" 13 71 "int8()" "* Sets the analog pins."
C L "PCInit" 13 73 1 "*"
C L "PCInit" 13 73 1 "*"
C L "PCInit" 13 73 1 "*"
C L "PCInit" 13 73 1 "*"
C L "PCInit" 13 73 1 "*"
C L "PCInit" 13 73 1 "*"
C L "PCInit" 13 73 1 "*"
V L "config" 13 85 "analog_settings"
F G "PCSetAnalogPorts" 13 85 "int8(analog_settings config)" "* Sets a given pin to a given digital state."
C L "PCSetAnalogPorts" 13 87 1 "*"
C L "PCSetAnalogPorts" 13 87 1 "*"
C L "PCSetAnalogPorts" 13 87 1 "*"
C L "PCSetAnalogPorts" 13 87 2 "*"
F G "PCInit" 13 99 "int8()"
C L "PCInit" 13 87 1 "FUNCTION"
C L "PCInit" 13 87 1 "FUNCTION"
C L "PCInit" 13 87 3 "FUNCTION"
V L "choice" 13 131 "port_settings"
F G "PCSetDigitalPorts" 13 132 "int8(port_settings choice)"
C L "PCSetDigitalPorts" 13 87 4 "FUNCTION"
C L "PCSetDigitalPorts" 13 87 4 "FUNCTION"
C L "PCSetDigitalPorts" 13 87 4 "FUNCTION"
C L "PCSelfTestBoardIsThere" 13 87 1 "FUNCTION"
F G "PCSelfTestBoardIsThere" 13 189 "int8(port_settings choice)"
V L "remember_TRISD" 13 190 "int8"
V L "remember_TRISB" 13 191 "int8"
V L "remember_PORTB" 13 192 "int8"
V L "remember_PORTD" 13 193 "int8"
V L "isthere" 13 195 "int1"
C L "PCSelfTestBoardIsThere" 13 87 1 "FUNCTION"
C L "PCSelfTestBoardIsThere" 13 87 1 "FUNCTION"
C L "PCSelfTestBoardIsThere" 13 87 1 "FUNCTION"
C L "PCSelfTestBoardIsThere" 13 87 1 "FUNCTION"
C L "PCSelfTestBoardIsThere" 13 87 1 "FUNCTION"
C L "PCSelfTest" 13 87 2 "FUNCTION"
V L "result" 13 243 "*int8"
F G "PCSelfTest" 13 244 "int8(*int8 result)"
V L "buff" 13 246 "int8"
V L "nirvana" 13 246 "int8"
C L "PCSelfTest" 13 87 1 "FUNCTION"
C L "PCSelfTest" 13 87 6 "FUNCTION"
C L "PCSelfTest" 13 87 1 "FUNCTION"
C L "PCSelfTest" 13 87 2 "FUNCTION"
C L "PCSelfTest" 13 87 2 "FUNCTION"
C L "PCSelfTest" 13 87 1 "FUNCTION"
C L "PCSelfTest" 13 87 1 "FUNCTION"
C L "PCSelfTest" 13 87 1 "FUNCTION"
C L "PCSelfTest" 13 87 1 "FUNCTION"
C L "PCSelfTest" 13 87 1 "FUNCTION"
C L "PCSelfTest" 13 87 1 "FUNCTION"
C L "PCSelfTest" 13 87 1 "FUNCTION"
C L "PCSelfTest" 13 87 1 "FUNCTION"
C L "PCSelfTest" 13 87 1 "FUNCTION"
C L "PCSelfTest" 13 87 1 "FUNCTION"
C L "PCSelfTest" 13 87 1 "FUNCTION"
C L "PCSelfTest" 13 87 1 "FUNCTION"
C L "PCSelfTest" 13 87 1 "FUNCTION"
C L "PCSelfTest" 13 87 2 "FUNCTION"
C L "PCSelfTest" 13 87 2 "FUNCTION"
C L "PCSelfTest" 13 87 1 "FUNCTION"
C L "PCSelfTest" 13 87 2 "FUNCTION"
C L "PCSelfTest" 13 87 1 "FUNCTION"
C L "PCSelfTest" 13 87 3 "FUNCTION"
C L "PCSelfTest" 13 87 1 "FUNCTION"
C L "PCSelfTest" 13 87 4 "FUNCTION"
C L "PCSelfTest" 13 87 2 "FUNCTION"
C L "PCSelfTest" 13 87 1 "FUNCTION"
C L "PCSelfTest" 13 87 3 "FUNCTION"
C L "PCSelfTest" 13 87 2 "FUNCTION"
C L "PCSelfTest" 13 87 2 "FUNCTION"
C L "PCSelfTest" 13 87 1 "FUNCTION"
C L "PCSelfTest" 13 87 1 "FUNCTION"
C L "PCSelfTest" 13 87 1 "FUNCTION"
C L "PCSelfTest" 13 87 3 "FUNCTION"
V L "config" 13 454 "analog_settings"
F G "PCSetAnalogPorts" 13 455 "int8(analog_settings config)"
V L "temp" 13 456 "int8" "delete bits 0-3"
C L "PCSetAnalogPorts" 13 87 1 "FUNCTION"
C L "PCSetAnalogPorts" 13 87 1 "FUNCTION"
C L "PCSetAnalogPorts" 13 87 1 "FUNCTION"
C L "PCSetAnalogPorts" 13 87 1 "FUNCTION"
C L "PCSetAnalogPorts" 13 87 1 "FUNCTION"
C L "PCSetAnalogPorts" 13 87 1 "FUNCTION"
C L "RPCServerSerialWaitForRx" 13 87 1 "FUNCTION"
V L "wait_time" 13 491 "int16"
F G "RPCServerSerialWaitForRx" 13 492 "int8(int16 wait_time)"
F G "RPCServerSerialEnable" 13 497 "int8()"
F G "RPCServerSerialDisable" 13 501 "int8()"
V L "speed" 13 504 "int8"
V L "sync_mode" 13 504 "int8"
V L "bits" 13 504 "int8"
F G "RPCServerSerialInit" 13 505 "int8(int8 speed,int8 sync_mode,int8 bits)"
F G "RPCServerSerialCheckError" 13 509 "int8()"
F G "RPCServerSerialFlushReceive" 13 513 "int8()"
F G "RPCServerSerialWaitForTxEnd" 13 517 "int8()"
F G "RPCServerSerialDataIsThere" 13 521 "int8()"
V L "data" 13 524 "int8"
F G "RPCServerSerialSendByte" 13 525 "int8(int8 data)"
F G "RPCServerSerialGetByte" 13 529 "int8()"
V L "conf" 13 535 "timer_config"
F G "ClockTimerInit" 13 536 "int8(timer_config conf)"
F G "ClockTimerGetHi" 13 541 "int8()"
F G "ClockTimerGetLo" 13 545 "int8()"
V L "val" 13 549 "int8"
F G "ClockTimerSetHi" 13 550 "int8(int8 val)"
V L "val" 13 553 "int8"
F G "ClockTimerSetLo" 13 554 "int8(int8 val)"
C L "RFPowerModuleOn" 13 559 1 "*"
F G "RFPowerModuleOn" 13 566 "int8()"
C L "RFPowerModuleOn" 13 559 1 "FUNCTION"
F G "RFPowerModuleOff" 13 573 "int8()"
C L "RFPowerModuleOff" 13 559 1 "FUNCTION"
V L "p_id" 13 580 "*int8"
F G "PCGetID" 13 581 "int8(*int8 p_id)"
V L "res" 13 582 "int8"
C L "PCGetID" 13 559 1 "FUNCTION"
C L "LLStart" 15 3 1 "FUNCTION"
F G "LLStart" 15 4 "int8()"
F G "LLStop" 15 5 "int8()"
V L "slot_limit" 15 6 "int8"
F G "LLSendPacket" 15 6 "int8(int8 slot_limit)"
F G "LLSendingBusy" 15 7 "int8()"
F G "LLGetSendSuccess" 15 8 "int8()"
F G "LLIsActive" 15 9 "int8()"
F G "LLLockReceiveBuffer" 15 10 "int8()"
F G "LLReleaseReceiveBuffer" 15 11 "int8()"
F G "LLReceiveBufferLocked" 15 12 "int8()"
F G "LLSlotEnd" 15 13 "int8()"
F G "LLSetDataToOld" 15 14 "int8()"
F G "LLSetDataToNew" 15 15 "int8()"
F G "LLInit" 15 16 "int8()"
F G "LLGetFieldStrength" 15 17 "int8()"
V L "value" 15 18 "int8"
F G "LLSetFieldStrength" 15 18 "int8(int8 value)"
V L "header_data" 15 19 "*int8"
V L "payload_data" 15 19 "*int8"
V L "payload_size" 15 19 "int8"
F G "LLCalcCRC16" 15 19 "int16(*int8 header_data,*int8 payload_data,int8 payload_size)" ",int payload_size);"
F G "LLAbortSending" 15 20 "int8()"
F G "LLGetRemainingPayloadSpace" 15 21 "int8()"
F G "LLSetSendingSuccess" 15 22 "int8()"
F G "LLDataIsNew" 15 23 "int8()"
F G "LLSentPacketInThisSlot" 15 24 "int8()"
F G "LLGetIDFromHardware" 15 25 "int8()" "takes id either from internal or external eeprom"
D G "__STDINT_H__" 17 2 ""
T G "uint8_t" 17 4 "int8"
T G "int8_t" 17 5 "sint8"
T G "uint16_t" 17 7 "int16"
T G "int16_t" 17 8 "sint16"
T G "uint32_t" 17 10 "int32"
T G "int32_t" 17 11 "sint32"
T G "int1_t" 17 13 "int1" "ACL"
V L "LL_type_h" 16 5 "int8"
V L "LL_type_l" 16 5 "int8"
F G "ACLSubscribe" 16 5 "int8(int8 LL_type_h,int8 LL_type_l)" "adds a type to the subscription list"
V L "LL_type_h" 16 6 "int8"
V L "LL_type_l" 16 6 "int8"
F G "ACLUnsubscribe" 16 6 "int8(int8 LL_type_h,int8 LL_type_l)" "deletes a type out of the subscription list"
F G "ACLFlushSubscriptions" 16 7 "int8()" "deletes all subscription (not the default ones)"
F G "ACLSubscribeDefault" 16 8 "int8()" "subscribes to the default types (control msgs..)"
V L "type_h" 16 9 "int8"
V L "type_l" 16 9 "int8"
F G "ACLVerifySubscription" 16 9 "int8(int8 type_h,int8 type_l)" "checks if a subscription is there"
F G "ACLInit" 16 10 "int8()" "start ACL and lower layers, resets the whole stack"
C L "ACLInit" 16 11 1 "FUNCTION"
F G "ACLProcessControlMessages" 16 12 "int8()" "internal: is called if control msg is there"
V L "power" 16 13 "int8"
F G "ACLSetFieldStrength" 16 13 "int8(int8 power)" "sets the field strength of transmitter signals"
F G "ACLSendingBusy" 16 15 "int8()" "returns true if LL has Packet in send queue"
F G "ACLGetSendSuccess" 16 17 "int8()" "returns the result of last Packet transmission"
V L "slot_timeout" 16 18 "int8"
F G "ACLSendPacket" 16 18 "int8(int8 slot_timeout)" "starts packet transmission, return values!"
V L "type_h" 16 19 "int8"
V L "type_l" 16 19 "int8"
F G "ACLAddNewType" 16 19 "int8(int8 type_h,int8 type_l)" "adds a type into the ACL send buffer, return values!"
V L "data" 16 20 "int8"
F G "ACLAddData" 16 20 "int8(int8 data)" "adds one byte data into the ACL send buffer, return values!"
V L "data" 16 21 "*int8"
V L "len" 16 21 "int8"
F G "ACLAddDataN" 16 21 "int8(*int8 data,int8 len)" "adds one byte data into the ACL send buffer, return values!"
F G "ACLAbortSending" 16 22 "int8()" "stops a running transmission"
F G "ACLSubscribeAll" 16 23 "int8()" "subscribes to any possible type (all packets are received)"
V L "buffer" 16 24 "*int8"
F G "ACLMatchesMyIP" 16 24 "int8(*int8 buffer)" "checks, if buffer holds my IP"
V L "id1" 16 27 "*uint8_t"
V L "id2" 16 27 "*uint8_t"
F G "ACLIdEquals" 16 27 "int8(*uint8_t id1,*uint8_t id2)"
F G "ACLGetLocalId" 16 29 "*int8()"
V L "type_h" 16 30 "int8"
V L "type_l" 16 30 "int8"
F G "ACLGetReceivedData" 16 30 "*int8(int8 type_h,int8 type_l)" "returns the ACL payload data of the given type in the last received packet"
F G "ACLGetReceivedPayloadLength" 16 31 "int8()" "returns the number of bytes received"
V L "ignore" 16 32 "int8"
V L "pass" 16 32 "int8"
F G "ACLSetControlMessagesBehaviour" 16 32 "int8(int8 ignore,int8 pass)" "if ignore==true: don't react on any control msg; if pass==true: give control msgs to ACL as received payload packets"
V L "type_h" 16 33 "int8"
V L "type_l" 16 33 "int8"
F G "ACLGetReceivedDataLength" 16 33 "sint8(int8 type_h,int8 type_l)" "returns number of bytes received of given type in last msg"
F G "ACLSentPacketInThisSlot" 16 34 "int8()" "is true until next slot if msg was send in this slot"
F G "ACLAnswerOnACM" 16 35 "int8()" "if a control msgs comes in that requires an answer, it is answered"
F G "ACLNoAnswerOnACM" 16 36 "int8()" "if a control msgs comes in that requires an answer, it will not be answered"
F G "ACLClearSendData" 16 37 "int8()" "deletes the send buffer of ACL"
F G "ACLStart" 16 38 "int8()" "restart ACL after ACLstop()"
F G "ACLStop" 16 39 "int8()" "stops the RF stack. Everything is hold, continues after ACLstart. msg stay in queue"
F G "ACLGetRemainingPayloadSpace" 16 40 "int8()" "returns the number of free bytes in the transmit buffer"
F G "ACLLockReceiveBuffer" 16 41 "int8()" "locks the receive buffer: no new msgs are received"
F G "ACLReceiveBufferLocked" 16 42 "int8()" "returns true if receivebuffer is locked"
F G "ACLReleaseReceiveBuffer" 16 43 "int8()" "un-lock the receivebuffer;"
F G "ACLSetDataToOld" 16 44 "int8()" "set received data to "old": means ACLDataIsNew will not return true unless a new packet was received"
F G "ACLSetDataToNew" 16 45 "int8()" "set received data to "new": means ACLDataIsNew will return true every slot"
F G "ACLAnyDataIsNewNow" 16 46 "int8()" "returns true if data in receive buffer is "new" now"
F G "ACLDataIsNew" 16 47 "int8()" "returns true if data in receive buffer is "new""
V L "type_h" 16 48 "int8"
V L "type_l" 16 48 "int8"
V L "position" 16 48 "int8"
F G "ACLGetReceivedByte" 16 48 "int8(int8 type_h,int8 type_l,int8 position)" "returns a single received byte on the position"
F G "ACLStartup" 16 49 "int8()" "is the first function in any case,  runs selftest and aclinit"
F G "ACLDataReceivedInThisSlot" 16 50 "int8()" "returns true if data was received in this slot"
V L "type_h" 16 53 "int8"
V L "type_l" 16 53 "int8"
F G "ACLFoundReceivedType" 16 53 "int8(int8 type_h,int8 type_l)" "returns true if type was found"
F G "ACLAddressedDataIsNew" 16 54 "int8()" "return1 if adressed data came"
F G "ACLAddressedDataIsNewNow" 16 55 "int8()" "return 1 if adressed data came in this slot"
V L "add1" 16 56 "int8"
V L "add2" 16 56 "int8"
V L "add3" 16 56 "int8"
V L "add4" 16 56 "int8"
V L "add5" 16 56 "int8"
V L "add6" 16 56 "int8"
V L "add7" 16 56 "int8"
V L "add8" 16 56 "int8"
V L "timeout" 16 56 "int8"
F G "ACLSendPacketAddressed" 16 56 "int8(int8 add1,int8 add2,int8 add3,int8 add4,int8 add5,int8 add6,int8 add7,int8 add8,int8 timeout)" "sends out the current packet with a target ID"
F G "ACLWaitForReady" 16 57 "int8()" "waits until ACL has finished all jobs like packet send etc."
D G "ACL_ADDRESS_ARG" 16 59 "(addr) (addr)[0],(addr)[1],(addr)[2],(addr)[3],(addr)[4],(addr)[5],(addr)[6],(addr)[7]"
C L "ACLWaitForReady" 18 1 2 "FUNCTION"
V L "value" 18 4 "int16"
F G "AppSetRealTimeClock" 18 4 "int8(int16 value)" "sets the real time clock to given value"
F G "AppGetRealTimeClockH" 18 5 "int8()" "returns the HIGh byte of the real time clock"
F G "AppGetSupplyVoltage" 18 6 "int8()" "returns the supply voltage; 255 means 3.0 V, scaled linear"
V L "ledstyle" 18 8 "int8"
F G "AppSetLEDBehaviour" 18 8 "int8(int8 ledstyle)" "sets how LED should behave (blicking, blue on transmit, sync etc, off)"
F G "AppSetLEDs" 18 10 "int8()" "internal: updates the state of the LEDs"
V L "result" 18 11 "*int8"
F G "AppSelfTest" 18 11 "int8(*int8 result)" "runs the selftest if a selftest connector is on"
C L "AppSelfTest" 20 1 1 "*"
C L "AppSelfTest" 20 1 1 "*"
C L "AppSelfTest" 20 1 1 "*"
C L "AppSelfTest" 20 1 1 "*"
C L "AppSelfTest" 20 1 1 "*"
C L "AppSelfTest" 20 1 1 "*"
C L "AppSelfTest" 20 1 1 "*"
C L "AppSelfTest" 20 1 1 "*"
C L "AppSelfTest" 20 1 1 "*"
C L "AppSelfTest" 20 1 1 "*"
C L "AppSelfTest" 20 1 1 "*"
C L "AppSelfTest" 20 1 1 "*"
C L "AppSelfTest" 20 1 1 "*"
C L "AppSelfTest" 20 1 1 "*"
C L "AppSelfTest" 20 1 1 "*"
C L "AppSelfTest" 20 1 1 "*"
C L "AppSelfTest" 20 1 1 "*"
C L "AppSelfTest" 20 1 1 "*"
C L "AppSelfTest" 20 1 1 "*"
C L "AppSelfTest" 20 1 1 "*"
C L "AppSelfTest" 20 1 1 "*"
C L "AppSelfTest" 20 1 1 "*"
C L "AppSelfTest" 20 1 1 "*"
C L "AppSelfTest" 20 1 1 "*"
C L "AppSelfTest" 20 1 1 "*"
C L "AppSelfTest" 20 1 1 "*"
C L "AppSelfTest" 20 1 1 "*"
C L "AppSelfTest" 20 1 1 "*"
C L "AppSelfTest" 20 1 1 "*"
C L "AppSelfTest" 20 1 1 "*"
C L "AppSelfTest" 20 1 34 "*"
C L "AppSelfTest" 20 1 1 "*"
C L "AppSelfTest" 20 1 1 "*"
C L "AppSelfTest" 20 1 1 "*"
C L "AppSelfTest" 20 1 1 "*"
C L "AppSelfTest" 20 1 1 "*"
C L "AppSelfTest" 20 1 1 "*"
C L "AppSelfTest" 20 1 1 "*"
C L "AppSelfTest" 20 1 1 "*"
C L "AppSelfTest" 20 1 1 "*"
C L "AppSelfTest" 20 1 1 "*"
C L "AppSelfTest" 20 1 1 "FUNCTION"
C L "AppSelfTest" 20 1 1 "FUNCTION"
C L "AppSelfTest" 20 1 1 "FUNCTION"
T G "UInt8" 20 106 "int8"
T G "UInt16" 20 107 "int16" "this is debug stuff"
D G "SENDER" 20 111 "0"
D G "DEBUG" 20 112 "0"
D G "SYNC_DEBUG" 20 113 "0		" "set this to one: on pin 4 is the sync time visible to compare with other devices"
D G "VERSION" 20 117 "5"
D G "MY_MAC_ID" 20 118 "141					" "141"
D G "RF_FSM_TIME_SYNC" 20 121 "1			" "one count is one bit or TIMER1H = 50,1 us"
D G "RF_FSM_TIME_STATISTIC" 20 122 "11			" "rf_limit"
D G "RF_FSM_TIME_ARBI" 20 123 "15			" "rf_limit 14"
D G "RF_FSM_TIME_DATA" 20 124 "24"
D G "RF_FSM_TIME_TUNE16f" 20 125 "93			" "98	//tuning in  #asm cycles"
D G "RF_FSM_TIME_TUNE18f" 20 126 "93+5		" "war +10"
D G "RF_FSM_TIME_TUNE" 20 127 " (RF_FSM_TIME_TUNE18f)"
D G "RF_FSM_TIME_SYNC_RECEIVE" 20 129 " (RF_FSM_TIME_SYNC*256 + 7*(64*5) + RF_FSM_TIME_TUNE)"
D G "RF_FSM_TIME_SLOT_END" 20 130 "255"
D G "RF_FSM_TIME_EARLY_SLOT_END" 20 131 " (RF_FSM_TIME_SLOT_END-2)"
D G "RF_FSM_TIME_SYNC_COMPARE" 20 133 "180		" "this is the sync point to compare devices"
D G "FSM_STATE_START" 20 136 "1"
D G "FSM_STATE_SYNC" 20 137 "2"
D G "FSM_STATE_STATISTIC" 20 138 "3"
D G "FSM_STATE_ARBI" 20 139 "4"
D G "FSM_STATE_SEND_DATA" 20 140 "5"
D G "FSM_STATE_REC_DATA" 20 141 "8"
D G "FSM_STATE_ALONE" 20 142 "6"
D G "FSM_STATE_DEBUG" 20 143 "99"
D G "FSM_STATE_ERROR" 20 144 "10"
D G "FSM_STATE_END" 20 145 "20"
D G "RF_INITIAL_LISTEN_SLOTS_DEFAULT" 20 148 "2				" "duration in slot that an unsynced new smartit uses to listen"
D G "RF_ARBITRATION_MINIMUM_SAMPLES" 20 149 "7				" "no of (uart)samples with which a slot is assumed "busy""
D G "RF_SYMBOL_SYNC1" 20 152 "0b11100011"
D G "RF_SYMBOL_SYNC2" 20 153 "0b10001110"
D G "RF_SYMBOL_SYNC3" 20 154 "0b00111000"
D G "RF_SYMBOL_SYNC4" 20 155 "0b11100011"
D G "RF_SYMBOL_SYNC5" 20 156 "0b10001111"
D G "RF_SYMBOL_SYNC6" 20 157 "0b11000000"
D G "RF_SYMBOL_SYNC7" 20 158 "0b11100000"
D G "RF_SYMBOL_SYNCRECEIVED" 20 159 "0b00110010  			" "the received Sync symbol (is the "sync"-symbol, but 3 times as fast"
D G "RF_SYMBOL_FASTTRAILER" 20 160 "0b10101010				" "trailer for data packets"
D G "RF_SYMBOL_SOP" 20 161 "0b11001010"
D G "RF_SYMBOL_EOP" 20 162 "0b00000000				" "to reset the spi"
D G "RF_SYMBOL_RSSI" 20 163 "0b11111111"
D G "RF_SYMBOL_RSSI_START" 20 164 "0b11000111"
D G "RF_STATUS_SENDING" 20 168 "0b00000001"
D G "RF_STATUS_SEND_SUCCESS" 20 169 "0b00000010"
D G "RF_STATUS_NEW_PACKET" 20 170 "0b00000100"
D G "RF_STATUS_RECEIVE_ERROR" 20 171 "0b00001000"
D G "RF_STATUS_LAYER_ON" 20 172 "0b10000000		" "one if stack is running"
D G "RF_STATUS_INSERTED_CTRLMSG" 20 173 "0b01000000		" "is being set if waiting normal msg was interrupted due t incoming control/management msg"
D G "RF_STATUS_NEW_DATA" 20 174 "0b00010000		" "new data arrived"
D G "RF_STATUS_JUST_SENT" 20 175 "0b00100000		" "data send in this slot"
D G "SYNC_STATE_SYNCED" 20 178 "1"
D G "SYNC_STATE_ALONE" 20 179 "2"
D G "SYNC_MAX_MISSED_SYNCS" 20 180 "7		" "after these empty sync=> state=alone"
D G "SYNC_RECOVER_SYNCS" 20 181 "4		" "after these syncs it's recover state (only sync receive)"
D G "SYNC_STATE_DEBUG" 20 182 "99"
D G "RF_SYNC_MODE_ACTIVE" 20 184 "1		" "searches for partners and syncs"
D G "RF_SYNC_MODE_PASSIVE" 20 185 "2		" "does not search for partners but syncs"
D G "RF_SYNC_MODE_BLIND_FLIGHT" 20 186 "10" "means no transmission, no sync, no nothing, just interrupts"
D G "RF_SYNC_RATE_DEFAULT" 20 188 "80		" "normal = 30% sync rate"
D G "LL_HEADER_SIZE" 20 192 "12"
D G "LL_PAYLOAD_SIZE" 20 193 "64" "64"
D G "LL_TAIL_SIZE" 20 194 "2"
D G "LL_FRAME_MAX_SIZE" 20 195 " (LL_HEADER_SIZE+LL_PAYLOAD_SIZE+LL_TAIL_SIZE)"
D G "ACL_SUBSCRIPTIONLIST_LENGTH" 20 198 "8"
D G "ACL_CONTROL_MESSAGES_TIMEOUT" 20 199 "30"
D G "ACL_TYPE_ACM_H" 20 200 "ACL_TYPE_ACM_HI"
D G "ACL_TYPE_ACM_L" 20 201 "ACL_TYPE_ACM_LO"
D G "RF_RSSI_SAMPLES" 20 205 "36"
D G "RF_RSSI_BYTES" 20 206 "32"
D G "LEDS_NORMAL" 20 210 "1"
D G "LEDS_OFF" 20 211 "0		" "leds off and stack doesnt touch them"
D G "LEDS_ON_SEND" 20 212 "2"
D G "LEDS_ON_RECEIVE" 20 213 "3"
D G "LEDS_ONLY_ONE" 20 214 "5"
D G "LEDS_ON_CRC_ERROR" 20 215 "6	" "blue led on crc error"
C L "AppSelfTest" 20 1 5 "FUNCTION"
F G "RFSetModeSleep" 20 236 "int8()"
F G "RFSetModeAsk" 20 238 "int8()"
F G "RFSetModeOok" 20 240 "int8()"
F G "RFSetModeReceive" 20 242 "int8()"
F G "RFSetModeSensitive" 20 244 "int8()"
F G "RFSpiSendByte" 20 246 "int8()"
F G "RFDeleteTimer1Overflow" 20 248 "int8()"
F G "RFInit" 20 249 "int8()" "UInt8 RFGetRandom();"
F G "RFPowerModuleOn" 20 252 "int8()"
F G "RFPowerModuleOff" 20 254 "int8()"
V L "i" 20 257 "int8"
F G "DebugGiveOut" 20 257 "int8(int8 i)"
F G "RFInitUart" 20 261 "int8()"
F G "RFUartStartContinuous" 20 263 "int8()"
F G "RFUartClearFifo" 20 265 "int8()"
F G "RFUartGetByte" 20 267 "int8()"
F G "RFSpiWait" 20 269 "int8()"
F G "RFUartOff" 20 271 "int8()"
F G "RFUartOn" 20 273 "int8()"
F G "RFSpiOff" 20 275 "int8()"
F G "RFSpiOn" 20 277 "int8()"
V L "timeout" 20 279 "int8"
F G "RFWaitForTimer1Exact" 20 279 "int8(int8 timeout)"
F G "RFSpiClear" 20 281 "int8()"
F G "RFWaitForNextBitTimeExact" 20 283 "int8()"
F G "RFSendSync" 20 284 "int8()"
V L "Timeout" 20 285 "int8"
V L "wait_slots" 20 285 "int8"
F G "RFSynchronize" 20 285 "int8(int8 Timeout,int8 wait_slots)"
F G "RFInitRandom" 20 286 "int8()"
V L "receive" 20 288 "int8"
F G "RFStatistic" 20 288 "int8(int8 receive)"
V L "rf_arbi_pos" 20 289 "int16"
F G "RFArbitration" 20 289 "int8(int16 rf_arbi_pos)"
F G "RFSendData" 20 290 "int8()"
F G "RFReceiveData" 20 291 "int8()"
F G "RFScramble" 20 293 "int8()"
F G "RFCreateAliveSymbol" 20 294 "int8()"
F G "RFNewRandom" 20 295 "int8()"
F G "RFStop" 20 296 "int8()"
V L "power" 20 297 "int8"
F G "RFSetFieldStrength" 20 297 "int8(int8 power)"
F G "RFGetFieldStrength" 20 298 "int8()"
F G "RFStart" 20 300 "int8()"
F G "RFReceiveScrambledByte" 20 301 "int8()"
F G "RFReceiveByte" 20 302 "int8()"
V L "rate" 20 303 "int8"
F G "RFSetSyncRate" 20 303 "int8(int8 rate)"
V L "mode" 20 304 "int8"
F G "RFSetSyncMode" 20 304 "int8(int8 mode)"
V L "slots" 20 305 "int8"
F G "RFSetInitialListenSlots" 20 305 "int8(int8 slots)"
F G "RFAlone" 20 307 "int8()"
F G "RFCheckSubscriptions" 20 309 "int8()"
F G "RFShowSynchronization" 20 310 "int8()"
F G "RFMicroSecondsUntilNextSlot" 20 311 "int16()"
F G "RFEvaluateStatistic" 20 313 "int8()"
F G "RF100usLeft" 20 314 "int8()"
F G "RF200usLeft" 20 315 "int8()"
F G "RF500usLeft" 20 316 "int8()"
F G "SlotEndCallBack" 20 322 "int8()" "all other"
C L "SlotEndCallBack" 20 1 3 "FUNCTION"
V G "RF_BIT_POS_HIGH_PERIOD" 20 344 "int8[256]"
C L "SlotEndCallBack" 20 1 5 "FUNCTION"
V G "RF_NUMBER_OF_BITS" 20 375 "int8[256]"
C L "SlotEndCallBack" 20 1 18 "FUNCTION"
V G "RF_4_to_8" 20 417 "int8[16]"
C L "SlotEndCallBack" 20 1 1 "FUNCTION"
V G "RF_STATISTIC_TABLE" 20 439 "int8[8]"
C L "SlotEndCallBack" 20 1 10 "FUNCTION"
V G "RF_SYNC_RATES" 20 464 "int8[8]"
C L "SlotEndCallBack" 20 1 1 "FUNCTION"
V G "rf_fsm_state" 20 480 "int8"
V G "rf_status" 20 481 "int8" "holds the state of rf layer like busy, receiving succes , err, etc"
V G "rf_sync_state" 20 483 "int8"
V G "rf_sync_mode" 20 484 "int8"
V G "rf_sync_rate" 20 485 "int8" "0 means never send a sync; 255 means always send a sync"
V G "rf_missed_syncs" 20 487 "int8"
V G "rf_slotcounter" 20 488 "int16"
V G "rf_longbuffer" 20 489 "int16"
V G "rf_symbol_am_alive" 20 490 "int8" "always make sure that the lowest bit is zero"
V G "rf_statistic_am_alive" 20 491 "int8" "hold the last valid situation"
V G "rf_field_strength" 20 492 "int8"
V G "rf_initial_listen_slots" 20 493 "int8" "the number of listenslots before a lonely note sends a sync"
V G "rf_new_statistic_value" 20 494 "int1" "is set true if a new statistic value was there"
V G "rf_LED_style" 20 495 "int8"
V G "rf_random_8" 20 496 "int8"
V G "rf_number_of_devices" 20 497 "int8" "gives the number of devices in the environment"
V G "rf_statistic_values" 20 501 "int8[9]" "statistics only on 18f platforms 0..7 holds bits, 8 the counter"
V G "LL_slots_left" 20 508 "int8"
V G "LL_payload_length" 20 509 "int8" "hold the actual size of LL frame (not includes ll header, lltail)"
V G "LL_sequence_no" 20 510 "int8"
V G "LL_receive_buffer_locked" 20 511 "int1"
V G "LL_received_packet_in_this_slot" 20 512 "int1" "the reincarnation of the good old mac_msg_recieved_in_last_slot"
V G "LL_longbuffer" 20 513 "int16"
V G "LL_payload_received" 20 515 "int8[64]"
V G "LL_payload_send" 20 516 "int8[64]"
V G "LL_payload_receivebuffer" 20 517 "int8[64]"
V G "LL_header_received" 20 519 "int8[12]"
V G "LL_header_send" 20 520 "int8[12]"
V G "LL_header_receivebuffer" 20 521 "int8[12]"
V G "LL_tail_received" 20 523 "int8[2]"
V G "LL_tail_send" 20 524 "int8[2]"
V G "LL_tail_receivebuffer" 20 525 "int8[2]"
V G "LL_last_data" 20 527 "ll_data_in_last_slot" "RSSI globals."
V G "rssi_send_on" 20 530 "int8"
V G "rssi_receive_on" 20 531 "int8" "globals for ota packets"
C L "SlotEndCallBack" 20 1 15 "FUNCTION"
C L "SlotEndCallBack" 20 1 1 "FUNCTION"
C L "SlotEndCallBack" 20 1 1 "FUNCTION"
V G "ACL_subscriptions" 20 610 "int8[8][2]"
V G "ACL_subscribe_all" 20 611 "int1"
V G "ACL_ignore_control_messages" 20 612 "int1"
V G "ACL_pass_control_messages" 20 613 "int1" "das ist die neue state machine"
F G "fsm" 20 623 "int8()" "int buff;"
C L "fsm" 20 1 1 "FUNCTION"
C L "fsm" 20 1 1 "FUNCTION"
C L "fsm" 20 1 3 "FUNCTION"
C L "fsm" 20 1 1 "FUNCTION"
C L "fsm" 20 1 1 "FUNCTION"
C L "fsm" 20 1 1 "FUNCTION"
C L "fsm" 20 1 1 "FUNCTION"
C L "fsm" 20 1 1 "FUNCTION"
C L "fsm" 20 1 2 "FUNCTION"
C L "fsm" 20 1 1 "FUNCTION"
C L "fsm" 20 1 1 "FUNCTION"
C L "fsm" 20 1 1 "FUNCTION"
C L "fsm" 20 1 1 "FUNCTION"
C L "fsm" 20 1 1 "FUNCTION"
C L "fsm" 20 1 1 "FUNCTION"
C L "fsm" 20 1 1 "FUNCTION"
C L "fsm" 20 1 1 "FUNCTION"
C L "fsm" 20 1 1 "FUNCTION"
C L "fsm" 20 1 2 "FUNCTION"
C L "fsm" 20 1 1 "FUNCTION"
C L "fsm" 20 1 1 "FUNCTION"
C L "fsm" 20 1 1 "FUNCTION"
C L "fsm" 20 1 1 "FUNCTION"
C L "fsm" 20 1 1 "FUNCTION"
C L "fsm" 20 1 1 "FUNCTION"
C L "fsm" 20 1 1 "FUNCTION"
C L "fsm" 20 1 1 "FUNCTION"
C L "fsm" 20 1 1 "FUNCTION"
C L "fsm" 20 1 1 "FUNCTION"
C L "fsm" 20 1 1 "FUNCTION"
C L "fsm" 20 1 1 "FUNCTION"
C L "fsm" 20 1 1 "FUNCTION"
C L "fsm" 20 1 1 "FUNCTION"
C L "fsm" 20 1 1 "FUNCTION"
C L "fsm" 20 1 1 "FUNCTION"
C L "fsm" 20 1 1 "FUNCTION"
C L "fsm" 20 1 1 "FUNCTION"
C L "fsm" 20 1 1 "FUNCTION"
C L "fsm" 20 1 1 "FUNCTION"
C L "fsm" 20 1 1 "FUNCTION"
C L "fsm" 20 1 1 "FUNCTION"
C L "fsm" 20 1 1 "FUNCTION"
C L "fsm" 20 1 4 "FUNCTION"
C L "fsm" 20 1 1 "FUNCTION"
C L "fsm" 20 1 2 "FUNCTION"
C L "fsm" 20 1 1 "FUNCTION"
C L "fsm" 20 1 1 "FUNCTION"
C L "fsm" 20 1 1 "FUNCTION"
C L "fsm" 20 1 1 "FUNCTION"
C L "fsm" 20 1 1 "FUNCTION"
C L "fsm" 20 1 3 "FUNCTION"
C L "fsm" 20 1 1 "FUNCTION"
C L "fsm" 20 1 4 "FUNCTION"
C L "RFSetModeSleep" 20 1 1 "FUNCTION"
F G "RFSetModeSleep" 20 1005 "int8()"
F G "RFSetModeAsk" 20 1012 "int8()"
F G "RFSetModeOok" 20 1019 "int8()"
F G "RFSetModeReceive" 20 1026 "int8()"
F G "RFSetModeSensitive" 20 1034 "int8()"
F G "RFInitUart" 20 1045 "int8()"
C L "RFInitUart" 20 1 1 "FUNCTION"
C L "RFInitUart" 20 1 1 "FUNCTION"
C L "RFInitUart" 20 1 1 "FUNCTION"
C L "RFInitUart" 20 1 1 "FUNCTION"
C L "RFInitUart" 20 1 1 "FUNCTION"
C L "RFInitUart" 20 1 1 "FUNCTION"
C L "RFInitUart" 20 1 1 "FUNCTION"
C L "RFInitUart" 20 1 1 "FUNCTION"
C L "RFInitUart" 20 1 1 "FUNCTION"
C L "RFInitUart" 20 1 1 "FUNCTION"
C L "RFSpiSendByte" 20 1 2 "FUNCTION"
F G "RFSpiSendByte" 20 1070 "int8()"
C L "RFSpiSendByte" 20 1 1 "FUNCTION"
C L "RFSpiSendByte" 20 1 1 "FUNCTION"
C L "RFSpiSendByte" 20 1 1 "FUNCTION"
C L "RFSpiSendByte" 20 1 1 "FUNCTION"
F G "RFSpiWait" 20 1082 "int8()" ""
C L "RFSpiWait" 20 1 1 "FUNCTION"
F G "RFSpiClear" 20 1095 "int8()"
V L "nirvana" 20 1097 "int8"
C L "RFSpiClear" 20 1 1 "FUNCTION"
C L "RFSpiClear" 20 1 1 "FUNCTION"
C L "RFSendSync" 20 1 1 "FUNCTION"
F G "RFSendSync" 20 1108 "int8()" "first wait for correct time"
F G "RFDeleteTimer1Overflow" 20 1132 "int8()"
C L "RFDeleteTimer1Overflow" 20 1 1 "FUNCTION"
V L "rate" 20 1138 "int8"
F G "RFSetSyncRate" 20 1139 "int8(int8 rate)"
V L "mode" 20 1142 "int8"
F G "RFSetSyncMode" 20 1143 "int8(int8 mode)"
F G "RFGetSyncMode" 20 1147 "int8(int8 mode)"
V L "slots" 20 1151 "int8"
F G "RFSetInitialListenSlots" 20 1152 "int8(int8 slots)"
F G "RFInit" 20 1159 "int8(int8 slots)" "set my own pins to the necessary values"
C L "RFInit" 20 1 1 "FUNCTION"
C L "RFInit" 20 1 3 "FUNCTION"
C L "RFInit" 20 1 1 "FUNCTION"
C L "RFInit" 20 1 1 "FUNCTION"
C L "RFInit" 20 1 4 "FUNCTION"
C L "RFInit" 20 1 1 "FUNCTION"
C L "RFInit" 20 1 1 "FUNCTION"
C L "RFInit" 20 1196 1 "*"
C L "RFInit" 20 1196 1 "FUNCTION"
C L "RFInit" 20 1196 1 "FUNCTION"
C L "RFInit" 20 1196 1 "FUNCTION"
C L "RFInit" 20 1196 1 "FUNCTION"
C L "RFInit" 20 1196 1 "FUNCTION"
C L "RFInit" 20 1196 1 "FUNCTION"
C L "RFInit" 20 1196 1 "FUNCTION"
C L "RFStart" 20 1196 16 "FUNCTION"
F G "RFStart" 20 1253 "int8(int8 slots)"
C L "RFStart" 20 1196 1 "FUNCTION"
C L "RFStart" 20 1260 1 "*"
C L "RFStart" 20 1260 1 "*"
C L "RFStart" 20 1263 1 "*"
C L "RFStart" 20 1263 5 "FUNCTION"
C L "RFStart" 20 1263 1 "FUNCTION"
C L "RFStart" 20 1263 1 "FUNCTION"
F G "RFGetFieldStrength" 20 1284 "int8(int8 slots)"
V L "power" 20 1288 "int8"
F G "RFSetFieldStrength" 20 1289 "int8(int8 power)"
C L "RFSetFieldStrength" 20 1263 2 "FUNCTION"
C L "RFSetFieldStrength" 20 1263 1 "FUNCTION"
C L "RFSetFieldStrength" 20 1263 1 "FUNCTION"
C L "RFSetFieldStrength" 20 1263 1 "FUNCTION"
C L "RFSetFieldStrength" 20 1263 1 "FUNCTION"
C L "RFSetFieldStrength" 20 1263 1 "FUNCTION"
C L "RFSetFieldStrength" 20 1263 1 "FUNCTION"
C L "RFAlone" 20 1263 6 "FUNCTION"
F G "RFAlone" 20 1321 "int8(int8 power)" "DebugGiveOut(6);"
C L "RFAlone" 20 1263 1 "FUNCTION"
C L "RFAlone" 20 1263 1 "FUNCTION"
C L "RFAlone" 20 1263 2 "FUNCTION"
C L "RFAlone" 20 1263 1 "FUNCTION"
C L "RFAlone" 20 1263 1 "FUNCTION"
C L "RFAlone" 20 1263 1 "FUNCTION"
C L "RFAlone" 20 1263 1 "FUNCTION"
C L "RFAlone" 20 1263 1 "FUNCTION"
C L "RFAlone" 20 1263 1 "FUNCTION"
C L "RFAlone" 20 1263 1 "FUNCTION"
C L "RFAlone" 20 1263 1 "FUNCTION"
C L "RFAlone" 20 1263 1 "FUNCTION"
C L "RFAlone" 20 1263 1 "FUNCTION"
C L "RFSynchronize" 20 1375 9 "*"
V L "Timeout" 20 1400 "int8"
V L "wait_slots" 20 1400 "int8"
F G "RFSynchronize" 20 1401 "int8(int8 Timeout,int8 wait_slots)" "this funtion uses globals:"
C L "RFSynchronize" 20 1375 6 "FUNCTION"
C L "RFSynchronize" 20 1375 1 "FUNCTION"
C L "RFSynchronize" 20 1375 1 "FUNCTION"
C L "RFSynchronize" 20 1375 1 "FUNCTION"
C L "RFSynchronize" 20 1375 1 "FUNCTION"
C L "RFSynchronize" 20 1375 1 "FUNCTION"
C L "RFSynchronize" 20 1375 1 "FUNCTION"
C L "RFSynchronize" 20 1375 1 "FUNCTION"
C L "RFSynchronize" 20 1375 1 "FUNCTION"
C L "RFSynchronize" 20 1375 1 "FUNCTION"
C L "RFSynchronize" 20 1375 1 "FUNCTION"
C L "RFSynchronize" 20 1375 1 "FUNCTION"
C L "RFSynchronize" 20 1375 2 "FUNCTION"
C L "RFSynchronize" 20 1375 1 "FUNCTION"
C L "RFSynchronize" 20 1375 1 "FUNCTION"
C L "RFSynchronize" 20 1375 1 "FUNCTION"
C L "RFSynchronize" 20 1375 1 "FUNCTION"
C L "RFSynchronize" 20 1375 1 "FUNCTION"
C L "RFSynchronize" 20 1375 1 "FUNCTION"
C L "RFSynchronize" 20 1375 1 "FUNCTION"
C L "RFSynchronize" 20 1375 2 "FUNCTION"
C L "RFSynchronize" 20 1375 1 "FUNCTION"
C L "RFSynchronize" 20 1375 1 "FUNCTION"
C L "RFSynchronize" 20 1375 1 "FUNCTION"
C L "RFSynchronize" 20 1375 1 "FUNCTION"
C L "RFSynchronize" 20 1375 2 "FUNCTION"
C L "RFSynchronize" 20 1375 1 "FUNCTION"
C L "RFSynchronize" 20 1375 1 "FUNCTION"
C L "RFSynchronize" 20 1375 1 "FUNCTION"
C L "RFSynchronize" 20 1375 1 "FUNCTION"
C L "RFSynchronize" 20 1375 1 "FUNCTION"
C L "RFSynchronize" 20 1375 2 "FUNCTION"
C L "RFSynchronize" 20 1375 1 "FUNCTION"
C L "RFSynchronize" 20 1375 1 "FUNCTION"
C L "RFSynchronize" 20 1375 1 "FUNCTION"
C L "RFSynchronize" 20 1375 1 "FUNCTION"
C L "RFSynchronize" 20 1375 2 "FUNCTION"
C L "RFSynchronize" 20 1375 1 "FUNCTION"
C L "RFSynchronize" 20 1375 1 "FUNCTION"
C L "RFSynchronize" 20 1375 4 "FUNCTION"
C L "RFSynchronize" 20 1375 1 "FUNCTION"
C L "RFSynchronize" 20 1375 1 "FUNCTION"
C L "RFSynchronize" 20 1375 1 "FUNCTION"
C L "RFSynchronize" 20 1375 1 "FUNCTION"
C L "RFSynchronize" 20 1375 1 "FUNCTION"
C L "RFSynchronize" 20 1375 1 "FUNCTION"
C L "RFSynchronize" 20 1375 1 "FUNCTION"
C L "RFSynchronize" 20 1375 1 "FUNCTION"
C L "RFSynchronize" 20 1375 1 "FUNCTION"
C L "RFSynchronize" 20 1375 1 "FUNCTION"
C L "RFSynchronize" 20 1375 1 "FUNCTION"
C L "RFSynchronize" 20 1375 1 "FUNCTION"
C L "RFSynchronize" 20 1375 1 "FUNCTION"
C L "RFSynchronize" 20 1375 1 "FUNCTION"
C L "RFSynchronize" 20 1375 1 "FUNCTION"
C L "RFSynchronize" 20 1375 1 "FUNCTION"
C L "RFSynchronize" 20 1375 1 "FUNCTION"
C L "RFSynchronize" 20 1375 1 "FUNCTION"
C L "RFSynchronize" 20 1375 1 "FUNCTION"
C L "RFSynchronize" 20 1375 1 "FUNCTION"
C L "RFSynchronize" 20 1375 1 "FUNCTION"
C L "RFSynchronize" 20 1375 1 "FUNCTION"
C L "RFSynchronize" 20 1375 1 "FUNCTION"
C L "RFSynchronize" 20 1375 1 "FUNCTION"
C L "RFSynchronize" 20 1375 1 "FUNCTION"
C L "RFSynchronize" 20 1375 1 "FUNCTION"
C L "RFSynchronize" 20 1375 1 "FUNCTION"
C L "RFSynchronize" 20 1375 1 "FUNCTION"
V L "i" 20 1694 "int8"
F G "DebugGiveOut" 20 1695 "int8(int8 i)" "int h;"
C L "DebugGiveOut" 20 1375 38 "FUNCTION"
F G "RFUartStartContinuous" 20 1744 "int8(int8 i)"
C L "RFUartStartContinuous" 20 1375 1 "FUNCTION"
C L "RFUartStartContinuous" 20 1375 1 "FUNCTION"
C L "RFUartStartContinuous" 20 1375 1 "FUNCTION"
F G "RFUartClearFifo" 20 1757 "int8(int8 i)"
C L "RFUartClearFifo" 20 1375 1 "FUNCTION"
C L "RFUartClearFifo" 20 1375 1 "FUNCTION"
F G "RFUartGetByte" 20 1768 "int8(int8 i)"
C L "RFUartGetByte" 20 1375 1 "FUNCTION"
C L "RFUartOff" 20 1375 1 "FUNCTION"
F G "RFUartOff" 20 1786 "int8()"
C L "RFUartOff" 20 1375 1 "FUNCTION"
F G "RFUartOn" 20 1793 "int8()"
C L "RFUartOn" 20 1375 1 "FUNCTION"
C L "RFSpiOff" 20 1375 1 "FUNCTION"
F G "RFSpiOff" 20 1803 "int8()"
C L "RFSpiOff" 20 1375 1 "FUNCTION"
F G "RFSpiOn" 20 1813 "int8()"
C L "RFSpiOn" 20 1375 3 "FUNCTION"
V L "timeout" 20 1829 "int8"
F G "RFWaitForTimer1Exact" 20 1830 "int8(int8 timeout)" "use global rf_buff as buffer, rf_timeout"
C L "RFWaitForTimer1Exact" 20 1375 1 "FUNCTION"
C L "RFWaitForTimer1Exact" 20 1375 1 "FUNCTION"
C L "RFWaitForTimer1Exact" 20 1375 1 "FUNCTION"
C L "RFWaitForTimer1Exact" 20 1375 1 "FUNCTION"
C L "RFWaitForTimer1Exact" 20 1375 1 "FUNCTION"
C L "RFWaitForTimer1Exact" 20 1375 1 "FUNCTION"
C L "RFWaitForTimer1Exact" 20 1375 1 "FUNCTION"
F G "RFWaitForNextBitTimeExact" 20 1876 "int8()" "use global rf_buff"
C L "RFWaitForNextBitTimeExact" 20 1375 1 "FUNCTION"
C L "RFWaitForNextBitTimeExact" 20 1375 1 "FUNCTION"
C L "RFWaitForNextBitTimeExact" 20 1375 1 "FUNCTION"
C L "RFWaitForNextBitTimeExact" 20 1375 1 "FUNCTION"
C L "RFWaitForNextBitTimeExact" 20 1375 1 "FUNCTION"
C L "RFWaitForNextBitTimeExact" 20 1375 1 "FUNCTION"
C L "RFWaitForNextBitTimeExact" 20 1375 1 "FUNCTION"
F G "RFInitRandom" 20 1928 "int8()"
V L "i" 20 1929 "UInt8"
C L "RFInitRandom" 20 1375 1 "FUNCTION"
C L "RFStatistic_old" 20 1375 3 "FUNCTION"
F G "RFStatistic_old" 20 1947 "int8()"
C L "RFStatistic_old" 20 1375 1 "FUNCTION"
C L "RFStatistic_old" 20 1375 1 "FUNCTION"
C L "RFStatistic_old" 20 1375 1 "FUNCTION"
C L "RFStatistic_old" 20 1375 1 "FUNCTION"
C L "RFStatistic_old" 20 1375 1 "FUNCTION"
C L "RFStatistic_old" 20 1375 2 "FUNCTION"
C L "RFStatistic_old" 20 1375 1 "FUNCTION"
C L "RFStatistic_old" 20 1375 3 "FUNCTION"
C L "RFStatistic_old" 20 1375 1 "FUNCTION"
C L "RFStatistic" 20 1375 4 "FUNCTION"
V L "receive" 20 2001 "int8"
F G "RFStatistic" 20 2002 "int8(int8 receive)" "reuse for send bytes"
C L "RFStatistic" 20 1375 2 "FUNCTION"
C L "RFStatistic" 20 1375 1 "FUNCTION"
C L "RFStatistic" 20 1375 1 "FUNCTION"
C L "RFStatistic" 20 1375 1 "FUNCTION"
C L "RFStatistic" 20 1375 1 "FUNCTION"
C L "RFStatistic" 20 1375 2 "FUNCTION"
C L "RFStatistic" 20 1375 1 "FUNCTION"
C L "RFStatistic" 20 1375 1 "FUNCTION"
C L "RFStatistic" 20 1375 1 "FUNCTION"
C L "RFStatistic" 20 1375 1 "FUNCTION"
C L "RFArbitration" 20 1375 1 "FUNCTION"
V L "rf_arbi_pos" 20 2056 "int16"
F G "RFArbitration" 20 2057 "int8(int16 rf_arbi_pos)" "int success;"
C L "RFArbitration" 20 1375 2 "FUNCTION"
C L "RFArbitration" 20 1375 1 "FUNCTION"
C L "RFArbitration" 20 1375 1 "FUNCTION"
C L "RFArbitration" 20 1375 1 "FUNCTION"
C L "RFArbitration" 20 1375 1 "FUNCTION"
C L "RFArbitration" 20 1375 1 "FUNCTION"
C L "RFArbitration" 20 1375 1 "FUNCTION"
C L "RFArbitration" 20 1375 1 "FUNCTION"
C L "RFArbitration" 20 1375 2 "FUNCTION"
C L "RFArbitration" 20 1375 1 "FUNCTION"
C L "RFArbitration" 20 1375 1 "FUNCTION"
C L "RFArbitration" 20 1375 1 "FUNCTION"
C L "RFArbitration" 20 1375 1 "FUNCTION"
C L "RFArbitration" 20 1375 1 "FUNCTION"
C L "RFArbitration" 20 1375 1 "FUNCTION"
C L "RFArbitration" 20 1375 1 "FUNCTION"
C L "RFArbitration" 20 1375 2 "FUNCTION"
C L "RFArbitration" 20 1375 1 "FUNCTION"
C L "RFArbitration" 20 1375 1 "FUNCTION"
C L "RFArbitration" 20 1375 1 "FUNCTION"
F G "RFSendData" 20 2133 "int8(int16 rf_arbi_pos)"
C L "RFSendData" 20 1375 1 "FUNCTION"
C L "RFSendData" 20 1375 1 "FUNCTION"
C L "RFSendData" 20 1375 1 "FUNCTION"
C L "RFSendData" 20 1375 1 "FUNCTION"
C L "RFSendData" 20 1375 1 "FUNCTION"
C L "RFSendData" 20 1375 1 "FUNCTION"
C L "RFSendData" 20 1375 1 "FUNCTION"
C L "RFSendData" 20 1375 2 "FUNCTION"
C L "RFSendData" 20 1375 1 "FUNCTION"
C L "RFSendData" 20 1375 2 "FUNCTION"
C L "RFSendData" 20 1375 1 "FUNCTION"
C L "RFSendData" 20 1375 1 "FUNCTION"
C L "RFSendData" 20 1375 1 "FUNCTION"
C L "RFSendData" 20 1375 2 "FUNCTION"
C L "RFSendData" 20 1375 1 "FUNCTION"
C L "RFSendData" 20 1375 1 "FUNCTION"
C L "RFSendData" 20 1375 1 "FUNCTION"
C L "RFSendData" 20 1375 1 "FUNCTION"
C L "RFSendData" 20 1375 1 "FUNCTION"
C L "RFSendData" 20 1375 1 "FUNCTION"
C L "RFSendData" 20 1375 1 "FUNCTION"
C L "RFSendData" 20 1375 1 "FUNCTION"
C L "RFSendData" 20 1375 1 "FUNCTION"
C L "RFSendData" 20 1375 1 "FUNCTION"
C L "RFSendData" 20 1375 1 "FUNCTION"
C L "RFSendData" 20 1375 1 "FUNCTION"
C L "RFSendData" 20 1375 1 "FUNCTION"
C L "RFSendData" 20 1375 1 "FUNCTION"
C L "RFSendData" 20 1375 7 "FUNCTION"
C L "RFCheckSubscriptions" 20 1375 1 "FUNCTION"
F G "RFCheckSubscriptions" 20 2268 "int8(int16 rf_arbi_pos)" "search through subscriptions for early shutdown"
C L "RFCheckSubscriptions" 20 1375 1 "FUNCTION"
C L "RFCheckSubscriptions" 20 1375 1 "FUNCTION"
C L "RFCheckSubscriptions" 20 1375 1 "FUNCTION"
C L "RFCheckSubscriptions" 20 1375 2 "FUNCTION"
C L "RFCheckSubscriptions" 20 1375 1 "FUNCTION"
F G "RFReceiveData" 20 2310 "int8(int16 rf_arbi_pos)"
V L "ll_receive_len" 20 2311 "int8"
V L "crc16" 20 2312 "int16"
C L "RFReceiveData" 20 1375 1 "FUNCTION"
C L "RFReceiveData" 20 1375 1 "FUNCTION"
C L "RFReceiveData" 20 1375 1 "FUNCTION"
C L "RFReceiveData" 20 1375 1 "FUNCTION"
C L "RFReceiveData" 20 1375 1 "FUNCTION"
C L "RFReceiveData" 20 1375 1 "FUNCTION"
C L "RFReceiveData" 20 1375 1 "FUNCTION"
C L "RFReceiveData" 20 1375 2 "FUNCTION"
C L "RFReceiveData" 20 1375 1 "FUNCTION"
C L "RFReceiveData" 20 1375 2 "FUNCTION"
C L "RFReceiveData" 20 1375 1 "FUNCTION"
C L "RFReceiveData" 20 1375 1 "FUNCTION"
C L "RFReceiveData" 20 1375 1 "FUNCTION"
C L "RFReceiveData" 20 1375 2 "FUNCTION"
C L "RFReceiveData" 20 1375 1 "FUNCTION"
C L "RFReceiveData" 20 1375 1 "FUNCTION"
C L "RFReceiveData" 20 1375 2 "FUNCTION"
C L "RFReceiveData" 20 1375 1 "FUNCTION"
C L "RFReceiveData" 20 1375 1 "FUNCTION"
C L "RFReceiveData" 20 1375 1 "FUNCTION"
C L "RFReceiveData" 20 1375 1 "FUNCTION"
C L "RFReceiveData" 20 1375 1 "FUNCTION"
C L "RFReceiveData" 20 1375 2 "FUNCTION"
C L "RFReceiveData" 20 1375 1 "FUNCTION"
C L "RFReceiveData" 20 1375 1 "FUNCTION"
C L "RFReceiveData" 20 1375 1 "FUNCTION"
C L "RFReceiveData" 20 1375 1 "FUNCTION"
C L "RFReceiveData" 20 1375 1 "FUNCTION"
C L "RFReceiveData" 20 1375 1 "FUNCTION"
C L "RFReceiveData" 20 1375 1 "FUNCTION"
C L "RFReceiveData" 20 1375 1 "FUNCTION"
C L "RFReceiveData" 20 1375 1 "FUNCTION"
C L "RFReceiveData" 20 1375 1 "FUNCTION"
C L "RFReceiveData" 20 1375 1 "FUNCTION"
C L "RFReceiveData" 20 1375 3 "FUNCTION"
C L "RFReceiveData" 20 1375 2 "FUNCTION"
C L "RFReceiveData" 20 1375 1 "FUNCTION"
C L "RFReceiveData" 20 1375 1 "FUNCTION"
C L "RFReceiveData" 20 1375 1 "FUNCTION"
C L "RFReceiveData" 20 1375 1 "FUNCTION"
C L "RFReceiveData" 20 1375 1 "FUNCTION"
C L "RFReceiveData" 20 1375 1 "FUNCTION"
C L "RFReceiveData" 20 1375 1 "FUNCTION"
C L "RFReceiveScrambledByte" 20 1375 2 "FUNCTION"
F G "RFReceiveScrambledByte" 20 2518 "int8()"
C L "RFReceiveScrambledByte" 20 1375 1 "FUNCTION"
C L "RFReceiveScrambledByte" 20 1375 1 "FUNCTION"
C L "RFReceiveScrambledByte" 20 1375 1 "FUNCTION"
C L "RFReceiveScrambledByte" 20 1375 1 "FUNCTION"
C L "RFReceiveScrambledByte" 20 1375 1 "FUNCTION"
C L "RFReceiveScrambledByte" 20 1375 1 "FUNCTION"
C L "RFReceiveScrambledByte" 20 1375 1 "FUNCTION"
C L "RFReceiveScrambledByte" 20 1375 1 "FUNCTION"
F G "RFReceiveByte" 20 2540 "int8()"
C L "RFScramble" 20 1375 1 "FUNCTION"
F G "RFScramble" 20 2566 "int8()" "rf_transition0 is the rf_shift register of the RFScrambler"
C L "RFScramble" 20 1375 2 "FUNCTION"
C L "RFCreateAliveSymbol" 20 1375 1 "FUNCTION"
F G "RFCreateAliveSymbol" 20 2585 "int8()" "if (!bit_test(rf_random_l,0)) return 0b00000001;"
C L "RFCreateAliveSymbol" 20 1375 8 "FUNCTION"
C L "RFNewRandom" 20 1375 1 "FUNCTION"
F G "RFNewRandom" 20 2618 "int8()" "first the 16bit randomfunction"
C L "RFNewRandom" 20 1375 1 "FUNCTION"
C L "RFNewRandom" 20 1375 1 "FUNCTION"
C L "RFNewRandom" 20 1375 1 "FUNCTION"
C L "RFNewRandom" 20 1375 1 "FUNCTION"
C L "RFNewRandom" 20 1375 2 "FUNCTION"
C L "RFNewRandom" 20 1375 14 "FUNCTION"
C L "RFNewRandom" 20 1375 7 "FUNCTION"
F G "RFStop" 20 2694 "int8()"
C L "RFStop" 20 1375 2 "FUNCTION"
C L "RFStop" 20 1375 1 "FUNCTION"
V L "slots" 20 2711 "int8"
F G "RFDelaySlots" 20 2712 "int8(int8 slots)"
V L "target" 20 2714 "int16"
C L "RFDelaySlots" 20 1375 1 "FUNCTION"
C L "RFDelaySlots" 20 1375 1 "FUNCTION"
C L "RFMicroSecondsUntilNextSlot" 20 1375 1 "FUNCTION"
F G "RFMicroSecondsUntilNextSlot" 20 2725 "int16()"
V L "value" 20 2726 "int16"
C L "RF100usLeft" 20 1375 1 "FUNCTION"
F G "RF100usLeft" 20 2732 "int8()"
C L "RF200usLeft" 20 1375 1 "FUNCTION"
F G "RF200usLeft" 20 2738 "int8()"
C L "RF500usLeft" 20 1375 1 "FUNCTION"
F G "RF500usLeft" 20 2745 "int8()"
F G "RFShowSynchronization" 20 2755 "int8()"
C L "RFShowSynchronization" 20 1375 1 "FUNCTION"
F G "RFEvaluateStatistic" 20 2766 "int8()" "do this only on 18f platforms"
C L "RFEvaluateStatistic" 20 1375 1 "FUNCTION"
C L "RFEvaluateStatistic" 20 1375 1 "FUNCTION"
C L "RFEvaluateStatistic" 20 1375 1 "FUNCTION"
C L "RFEvaluateStatistic" 20 1375 2 "FUNCTION"
C L "RFEvaluateStatistic" 20 1375 2 "FUNCTION"
C L "RFEvaluateStatistic" 20 1375 3 "FUNCTION"
C L "RFEvaluateStatistic" 20 1375 1 "FUNCTION"
F G "LLGetIDFromHardware" 21 2 "int8()"
V L "buff" 21 3 "int8" "return;"
C L "LLGetIDFromHardware" 21 6 5 "FUNCTION"
C L "LLGetIDFromHardware" 21 6 24 "FUNCTION"
F G "LLInit" 21 71 "int8()"
C L "LLInit" 21 6 1 "FUNCTION"
C L "LLInit" 21 6 8 "FUNCTION"
C L "LLInit" 21 6 1 "FUNCTION"
C L "LLInit" 21 6 1 "FUNCTION"
F G "LLStart" 21 109 "int8()"
F G "LLStop" 21 115 "int8()"
C L "LLStop" 21 6 1 "FUNCTION"
F G "LLSlotEnd" 21 122 "int8()" "check if timeout for waiting packet"
C L "LLSlotEnd" 21 6 1 "FUNCTION"
C L "LLSlotEnd" 21 6 1 "FUNCTION"
C L "LLSlotEnd" 21 6 1 "FUNCTION"
C L "LLSlotEnd" 21 6 1 "FUNCTION"
F G "LLAbortSending" 21 151 "int8()"
F G "LLSetSendingSuccess" 21 170 "int8()" "update the states"
C L "LLSetSendingSuccess" 21 6 1 "FUNCTION"
C L "LLSetSendingSuccess" 21 6 1 "FUNCTION"
C L "LLSetSendingSuccess" 21 6 1 "FUNCTION"
C L "LLSetSendingSuccess" 21 6 1 "FUNCTION"
C L "LLSetSendingSuccess" 21 6 1 "FUNCTION"
C L "LLSetSendingSuccess" 21 6 1 "FUNCTION"
C L "LLSetSendingSuccess" 21 6 1 "FUNCTION"
F G "LLSendingBusy" 21 189 "int8()"
C L "LLGetSendSuccess" 21 6 1 "FUNCTION"
F G "LLGetSendSuccess" 21 196 "int8()"
F G "LLIsActive" 21 202 "int8()"
F G "LLLockReceiveBuffer" 21 209 "int8()"
C L "LLLockReceiveBuffer" 21 6 1 "FUNCTION"
F G "LLReceiveBufferLocked" 21 216 "int8()"
F G "LLReleaseReceiveBuffer" 21 223 "int8()"
C L "LLReleaseReceiveBuffer" 21 6 1 "FUNCTION"
F G "LLSetDataToOld" 21 230 "int8()"
F G "LLSetDataToNew" 21 235 "int8()"
F G "LLDataIsNew" 21 241 "int8()"
F G "LLGetFieldStrength" 21 251 "int8()"
V L "value" 21 255 "int8"
F G "LLSetFieldStrength" 21 256 "int8(int8 value)"
V L "header_data" 21 261 "*int8"
V L "payload_data" 21 261 "*int8"
V L "payload_size" 21 261 "int8"
F G "LLCalcCRC16" 21 262 "int16(*int8 header_data,*int8 payload_data,int8 payload_size)" "calcs a crc on LL_header, ACL_data, LL_tail"
V L "hb" 21 264 "int8"
V L "lb" 21 264 "int8"
V L "i" 21 264 "int8"
V L "tmp" 21 264 "int8"
C L "LLCalcCRC16" 21 6 1 "FUNCTION"
C L "LLSendPacket" 21 6 1 "FUNCTION"
V L "slot_limit" 21 304 "int8"
F G "LLSendPacket" 21 305 "int8(int8 slot_limit)" "long crc16; // makes RAM too full if local var is active"
C L "LLSendPacket" 21 6 1 "FUNCTION"
C L "LLSendPacket" 21 6 2 "FUNCTION"
C L "LLSendPacket" 21 6 1 "FUNCTION"
C L "LLSendPacket" 21 6 1 "FUNCTION"
F G "LLGetRemainingPayloadSpace" 21 341 "int8(int8 slot_limit)"
F G "LLSentPacketInThisSlot" 21 349 "int8(int8 slot_limit)"
V G "ACL_payload_send" 22 1 "int8[64]"
V G "ACL_payload_length" 22 2 "int8"
V G "ACL_send_buffer_locked" 22 4 "int1"
V G "ACL_ACM_answers" 22 5 "int1" "answer on ACM messages like helo and so on"
V G "ACL_write_position" 22 6 "int8"
F G "ACLStartUp" 22 17 "int8()"
V L "result" 22 18 "int8[10]"
V L "selftest_result" 22 19 "int8"
V L "i" 22 19 "int8"
C L "ACLStartUp" 22 21 3 "FUNCTION"
C L "ACLStartUp" 22 21 1 "FUNCTION"
C L "ACLStartUp" 22 21 1 "FUNCTION"
C L "ACLStartUp" 22 21 1 "FUNCTION"
C L "ACLStartUp" 22 21 1 "FUNCTION"
C L "ACLStartUp" 22 21 1 "FUNCTION"
C L "ACLStartUp" 22 21 1 "FUNCTION"
C L "ACLStartUp" 22 21 1 "FUNCTION"
C L "ACLStartUp" 22 21 1 "FUNCTION"
F G "ACLInit" 22 69 "int8()"
C L "ACLInit" 22 21 1 "FUNCTION"
C L "ACLInit" 22 21 1 "FUNCTION"
V L "LL_type_h" 22 109 "int8"
V L "LL_type_l" 22 109 "int8"
F G "ACLSubscribe" 22 110 "int8(int8 LL_type_h,int8 LL_type_l)"
V L "i" 22 111 "int8"
C L "ACLSubscribe" 22 21 1 "FUNCTION"
C L "ACLSubscribe" 22 21 1 "FUNCTION"
C L "ACLSubscribe" 22 21 1 "FUNCTION"
V L "LL_type_h" 22 130 "int8"
V L "LL_type_l" 22 130 "int8"
F G "ACLUnsubscribe" 22 131 "int8(int8 LL_type_h,int8 LL_type_l)"
V L "i" 22 132 "int8"
C L "ACLUnsubscribe" 22 21 1 "FUNCTION"
C L "ACLUnsubscribe" 22 21 1 "FUNCTION"
C L "ACLUnsubscribe" 22 21 1 "FUNCTION"
F G "ACLFlushSubscriptions" 22 147 "int8(int8 LL_type_l)"
V L "i" 22 148 "int8"
F G "ACLSubscribeAll" 22 162 "int8()"
F G "ACLAnswerOnACM" 22 167 "int8()"
F G "ACLNoAnswerOnACM" 22 171 "int8()"
F G "ACLSubscribeDefault" 22 181 "int8()"
V L "result" 22 182 "int8"
C L "ACLSubscribeDefault" 22 21 1 "FUNCTION"
V L "type_h" 22 192 "int8"
V L "type_l" 22 192 "int8"
F G "ACLVerifySubscription" 22 193 "int8(int8 type_h,int8 type_l)"
V L "i" 22 194 "int8"
C L "ACLVerifySubscription" 22 21 1 "FUNCTION"
C L "ACLProcessControlMessages" 22 21 2 "FUNCTION"
F G "ACLProcessControlMessages" 22 212 "int8(int8 type_l)"
C L "ACLProcessControlMessages" 22 21 1 "FUNCTION"
C L "ACLProcessControlMessages" 22 21 2 "FUNCTION"
C L "ACLProcessControlMessages" 22 21 1 "FUNCTION"
D G "LONGESTWDT" 22 225 "7	" "this is the longest wait-time which is accepted from the Software-WDT (2.304sec)"
V L "oldwdtvalue" 22 226 "int8"
V L "oldwdttest" 22 227 "int8"
V L "shutdownminutes" 22 228 "int8"
V L "shutdownseconds" 22 229 "int8"
V L "allseconds" 22 230 "int16"
V L "i" 22 231 "int16"
V L "timercycles" 22 232 "int16"
C L "ACLProcessControlMessages" 22 21 1 "FUNCTION"
C L "ACLProcessControlMessages" 22 21 1 "FUNCTION"
C L "ACLProcessControlMessages" 22 21 1 "FUNCTION"
C L "ACLProcessControlMessages" 22 21 1 "FUNCTION"
C L "ACLProcessControlMessages" 22 21 2 "FUNCTION"
C L "ACLProcessControlMessages" 22 21 2 "FUNCTION"
V L "fsvalue" 22 294 "int8"
C L "ACLProcessControlMessages" 22 21 1 "FUNCTION"
C L "ACLProcessControlMessages" 22 21 1 "FUNCTION"
C L "ACLProcessControlMessages" 22 21 1 "FUNCTION"
C L "ACLProcessControlMessages" 22 21 1 "FUNCTION"
C L "ACLProcessControlMessages" 22 21 1 "FUNCTION"
C L "ACLProcessControlMessages" 22 21 1 "FUNCTION"
C L "ACLProcessControlMessages" 22 21 2 "FUNCTION"
C L "ACLProcessControlMessages" 22 21 1 "FUNCTION"
C L "ACLProcessControlMessages" 22 21 2 "FUNCTION"
C L "ACLProcessControlMessages" 22 21 1 "FUNCTION"
C L "ACLProcessControlMessages" 22 21 1 "FUNCTION"
C L "ACLProcessControlMessages" 22 21 1 "FUNCTION"
C L "ACLProcessControlMessages" 22 21 1 "FUNCTION"
C L "ACLProcessControlMessages" 22 21 1 "FUNCTION"
C L "ACLProcessControlMessages" 22 21 1 "FUNCTION"
C L "ACLProcessControlMessages" 22 21 1 "FUNCTION"
V L "power" 22 421 "int8"
F G "ACLSetFieldStrength" 22 422 "int8(int8 power)"
F G "ACLSendingBusy" 22 428 "int8(int8 power)"
F G "ACLGetSendSuccess" 22 434 "int8(int8 power)"
V L "id1" 22 440 "*uint8_t"
V L "id2" 22 440 "*uint8_t"
F G "ACLIdEquals" 22 441 "int8(*uint8_t id1,*uint8_t id2)"
V L "i" 22 442 "int8"
V L "buffer" 22 450 "*int8"
F G "ACLMatchesMyIP" 22 451 "int8(*int8 buffer)"
V L "i" 22 452 "int8" "check bcast"
C L "ACLMatchesMyIP" 22 21 2 "FUNCTION"
F G "ACLAbortSending" 22 478 "int8()"
C L "ACLSendPacket" 22 21 2 "FUNCTION"
V L "slot_timeout" 22 490 "int8"
F G "ACLSendPacket" 22 491 "int8(int8 slot_timeout)" "check if sending busy or layer off"
C L "ACLSendPacket" 22 21 2 "FUNCTION"
C L "ACLSendPacket" 22 21 1 "FUNCTION"
C L "ACLSendPacket" 22 21 1 "FUNCTION"
F G "ACLClearSendData" 22 515 "int8(int8 slot_timeout)"
C L "ACLClearSendData" 22 21 1 "FUNCTION"
C L "ACLClearSendData" 22 21 3 "FUNCTION"
C L "ACLClearSendData" 22 21 1 "FUNCTION"
C L "ACLClearSendData" 22 21 1 "FUNCTION"
V L "payload" 22 534 "*int8"
V L "len" 22 534 "int8"
F G "ACLAddPayload" 22 535 "int8(*int8 payload,int8 len)"
C L "ACLAddPayload" 22 21 1 "FUNCTION"
C L "ACLAddPayload" 22 21 1 "FUNCTION"
V L "i" 22 543 "int8"
V L "last" 22 544 "int8"
C L "ACLAddPayload" 22 21 1 "FUNCTION"
C L "ACLAddNewType" 22 21 3 "FUNCTION"
V L "type_h" 22 566 "int8"
V L "type_l" 22 566 "int8"
F G "ACLAddNewType" 22 567 "int8(int8 type_h,int8 type_l)"
C L "ACLAddNewType" 22 21 1 "FUNCTION"
C L "ACLAddNewType" 22 21 1 "FUNCTION"
C L "ACLAddNewType" 22 21 1 "FUNCTION"
C L "ACLAddNewType" 22 21 1 "FUNCTION"
V L "data" 22 585 "*int8"
V L "len" 22 585 "int8"
F G "ACLAddDataN" 22 586 "int8(*int8 data,int8 len)"
C L "ACLAddDataN" 22 21 1 "FUNCTION"
C L "ACLAddDataN" 22 21 1 "FUNCTION"
C L "ACLAddDataN" 22 21 1 "FUNCTION"
C L "ACLAddDataN" 22 21 1 "FUNCTION"
V L "data" 22 602 "int8"
F G "ACLAddData" 22 603 "int8(int8 data,int8 len)"
C L "ACLAddData" 22 21 1 "FUNCTION"
C L "ACLAddData" 22 21 1 "FUNCTION"
C L "ACLAddData" 22 21 1 "FUNCTION"
C L "ACLAddData" 22 21 1 "FUNCTION"
F G "ACLGetRemainingPayloadSpace" 22 620 "int8(int8 data,int8 len)" "return (LL_payload_length-ACL_payload_length);"
F G "ACLGetSrcId" 22 627 "*int8(int8 data,int8 len)"
F G "ACLGetLocalId" 22 632 "*int8(int8 len)"
F G "ACLGetReceivedFieldstrength" 22 637 "int8(int8 len)"
F G "ACLGetReceivedPayloadLength" 22 643 "int8()"
F G "ACLGetSubject" 22 648 "*int8()"
V L "data" 22 652 "*int8"
F G "ACLGetDataLength" 22 653 "int8(*int8 data)"
V L "data" 22 657 "*int8"
F G "ACLGetDataTypeHi" 22 658 "int8(*int8 data)"
V L "data" 22 662 "*int8"
F G "ACLGetDataTypeLo" 22 663 "int8(*int8 data)"
V L "data" 22 667 "*int8"
F G "ACLGetNextTupleData" 22 668 "*int8(*int8 data)"
D G "ACLGetTupleData" 22 677 "(X) &X[3]"
D G "ACLGetTupleLength" 22 678 "(X) X[2]"
F G "ACLGetReceivedSubjectData" 22 682 "*int8()"
C L "ACLGetReceivedData" 22 21 1 "FUNCTION"
V L "type_h" 22 687 "int8"
V L "type_l" 22 687 "int8"
F G "ACLGetReceivedData" 22 688 "*int8(int8 type_h,int8 type_l)"
V L "i" 22 689 "int8"
V L "type_h" 22 701 "int8"
V L "type_l" 22 701 "int8"
F G "ACLGetReceivedDataLength" 22 702 "sint8(int8 type_h,int8 type_l)"
V L "data" 22 703 "*int8"
V L "type_h" 22 709 "int8"
V L "type_l" 22 709 "int8"
V L "position" 22 709 "int8"
F G "ACLGetReceivedByte" 22 710 "int8(int8 type_h,int8 type_l,int8 position)"
V L "data" 22 711 "*int8"
V L "type_h" 22 717 "int8"
V L "type_l" 22 717 "int8"
F G "ACLFoundReceivedType" 22 718 "int8(int8 type_h,int8 type_l)"
V L "ignore" 22 724 "int8"
V L "pass" 22 724 "int8"
F G "ACLSetControlMessagesBehaviour" 22 725 "int8(int8 ignore,int8 pass)"
C L "ACLSetControlMessagesBehaviour" 22 21 1 "FUNCTION"
C L "ACLSetControlMessagesBehaviour" 22 21 1 "FUNCTION"
F G "ACLSentPacketInThisSlot" 22 733 "int8(int8 ignore,int8 pass)"
F G "ACLStart" 22 739 "int8(int8 ignore,int8 pass)"
F G "ACLStop" 22 744 "int8(int8 ignore,int8 pass)"
F G "ACLLockReceiveBuffer" 22 750 "int8(int8 ignore,int8 pass)"
F G "ACLReceiveBufferLocked" 22 755 "int8(int8 ignore,int8 pass)"
F G "ACLReleaseReceiveBuffer" 22 761 "int8(int8 ignore,int8 pass)"
F G "ACLSetDataToOld" 22 767 "int8(int8 ignore,int8 pass)"
F G "ACLSetDataToNew" 22 772 "int8(int8 ignore,int8 pass)"
F G "ACLDataIsNew" 22 778 "int8(int8 ignore,int8 pass)"
F G "ACLDataReceivedInThisSlot" 22 783 "int8(int8 ignore,int8 pass)"
F G "ACLAnyDataIsNewNow" 22 789 "int8(int8 ignore,int8 pass)"
F G "ACLXAddressedDataIsAddressed" 22 794 "int8(int8 ignore,int8 pass)"
F G "ACLAddressedDataIsNew" 22 799 "int8(int8 pass)"
V L "cad" 22 800 "*int8"
F G "ACLAddressedDataIsNewNow" 22 813 "int8()"
C L "ACLSendPacketAddressed" 22 21 1 "FUNCTION"
V L "add1" 22 820 "int8"
V L "add2" 22 820 "int8"
V L "add3" 22 820 "int8"
V L "add4" 22 820 "int8"
V L "add5" 22 820 "int8"
V L "add6" 22 820 "int8"
V L "add7" 22 820 "int8"
V L "add8" 22 820 "int8"
V L "timeout" 22 820 "int8"
F G "ACLSendPacketAddressed" 22 821 "int8(int8 add1,int8 add2,int8 add3,int8 add4,int8 add5,int8 add6,int8 add7,int8 add8,int8 timeout)"
C L "ACLSendPacketAddressed" 22 21 1 "FUNCTION"
F G "ACLWaitForReady" 22 839 "int8(int8 add1,int8 add2,int8 add3,int8 add4,int8 add5,int8 add6,int8 add7,int8 add8,int8 timeout)"
V L "ledstyle" 23 1 "int8"
F G "AppSetLEDBehaviour" 23 2 "int8(int8 ledstyle,int8 add2,int8 add3,int8 add4,int8 add5,int8 add6,int8 add7,int8 add8,int8 timeout)"
C L "AppSetLEDs" 23 10 1 "FUNCTION"
F G "AppSetLEDs" 23 13 "int8(int8 ledstyle,int8 add2,int8 add3,int8 add4,int8 add5,int8 add6,int8 add7,int8 add8,int8 timeout)"
C L "AppSetLEDs" 23 10 1 "FUNCTION"
C L "AppSetLEDs" 23 10 1 "FUNCTION"
C L "AppSetLEDs" 23 10 1 "FUNCTION"
C L "AppSetLEDs" 23 10 1 "FUNCTION"
C L "AppSetLEDs" 23 10 1 "FUNCTION"
D G "BRIDGE_COMM_TIME_OUT" 1 72 "210"
D G "CTS_UART1" 1 77 "PIN_CONN_08"
D G "TRIS_CTS_UART1" 1 78 "TRIS_CONN_08"
D G "RTS_UART1" 1 84 "PIN_CONN_09"
D G "TRIS_RTS_UART1" 1 85 "TRIS_CONN_09"
D G "USB_REQUEST_MAXDELAY" 1 89 "5"
C L "BridgeRun" 1 68 1 "FUNCTION"
F G "BridgeRun" 1 92 "int8(int8 ledstyle,int8 add2,int8 add3,int8 add4,int8 add5,int8 add6,int8 add7,int8 add8,int8 timeout)"
V L "slot_limit" 1 93 "int8"
F G "LLSendPacketSpecial" 1 93 "int8(int8 slot_limit,int8 add3,int8 add4,int8 add5,int8 add6,int8 add7,int8 add8,int8 timeout)"
F G "Particle2USB" 1 94 "int8(int8 add4,int8 add5,int8 add6,int8 add7,int8 add8,int8 timeout)"
F G "USB2Particle" 1 95 "int8(int8 add5,int8 add6,int8 add7,int8 add8,int8 timeout)" "global variable"
V G "usbRequestMaxDelay" 1 99 "int8" "this function is called from the fsm at the end of an rf slot"
C L "USB2Particle" 1 68 1 "FUNCTION"
F G "SlotEndCallBack" 1 104 "int8(int8 add7,int8 add8,int8 timeout)"
F G "BridgeRun" 1 108 "int8(int8 add7,int8 add8,int8 timeout)"
C L "BridgeRun" 1 68 2 "FUNCTION"
C L "BridgeRun" 1 68 1 "FUNCTION"
C L "Particle2USB" 1 68 1 "FUNCTION"
F G "Particle2USB" 1 141 "int8(int8 add7,int8 add8,int8 timeout)"
V L "i" 1 142 "int8"
V L "n" 1 142 "int8"
V L "c" 1 143 "int8"
C L "Particle2USB" 1 68 1 "FUNCTION"
C L "Particle2USB" 1 68 1 "FUNCTION"
C L "Particle2USB" 1 68 1 "FUNCTION"
C L "Particle2USB" 1 68 1 "FUNCTION"
C L "Particle2USB" 1 68 1 "FUNCTION"
C L "USB2Particle" 1 68 1 "FUNCTION"
F G "USB2Particle" 1 187 "int8()"
V L "i" 1 188 "int16"
V L "j" 1 189 "int8"
V L "c" 1 190 "int8" "allow transmission"
C L "USB2Particle" 1 68 1 "FUNCTION"
C L "USB2Particle" 1 68 1 "FUNCTION"
C L "USB2Particle" 1 68 1 "FUNCTION"
C L "USB2Particle" 1 68 1 "FUNCTION"
C L "USB2Particle" 1 68 1 "FUNCTION"
C L "USB2Particle" 1 68 1 "FUNCTION"
C L "USB2Particle" 1 68 1 "FUNCTION"
C L "USB2Particle" 1 68 2 "FUNCTION"
C L "LLSendPacketSpecial" 1 68 2 "FUNCTION"
V L "slot_limit" 1 243 "int8"
F G "LLSendPacketSpecial" 1 243 "int8(int8 slot_limit)" "giveoutdata();"
C L "LLSendPacketSpecial" 1 68 1 "FUNCTION"
C L "LLSendPacketSpecial" 1 68 3 "FUNCTION"
C L "LLSendPacketSpecial" 1 68 1 "FUNCTION"
F G "main" 1 266 "int8(int8 slot_limit)" "unsigned int stund;"
C L "main" 1 68 7 "FUNCTION"
V L "test" 1 279 "int8[10]"
C L "main" 1 68 1 "FUNCTION"
C L "main" 1 68 1 "FUNCTION"
C L "main" 1 68 1 "FUNCTION"
C L "main" 1 68 3 "FUNCTION"
